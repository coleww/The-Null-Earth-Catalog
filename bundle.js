(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var lipogram = require('lipogram')
var markov = require('@coleww/markov')
var tipots = require('this-is-probably-ok-to-say')

module.exports = function () {
  return "howdy"
}
},{"@coleww/markov":13,"lipogram":30,"this-is-probably-ok-to-say":49}],2:[function(require,module,exports){
var tipots = require('this-is-probably-ok-to-say')
module.exports = function () {
  return "howdy"
}
},{"this-is-probably-ok-to-say":49}],3:[function(require,module,exports){
var queneauBuckets = require('queneau-buckets')
var newSlang = require('new-slang')
var tipots = require('this-is-probably-ok-to-say')
module.exports = function () {
  return "howdy"
}
},{"new-slang":31,"queneau-buckets":35,"this-is-probably-ok-to-say":49}],4:[function(require,module,exports){
var isSnowball = require('is-snowball')
var tipots = require('this-is-probably-ok-to-say')
// fs.readdirSync('../corpuses') // um read all the things, pull out snowballs.

// make a snowball markov or something?
module.exports = function () {
  return "howdy"
}
},{"is-snowball":28,"this-is-probably-ok-to-say":49}],5:[function(require,module,exports){
module.exports = [
"understanding whole systems",
"shelter and land use",
"industry and craft",
"communication in a post-internet world",
"community and empathetic cooperation",
"nomadic techniques of the future",
"learning to learn",
"emergent technologies",
"generative systems",
"simulacra and simulation",
"the society of the spectacle",
"postmodernism or the logic of late capitalism",
"dadaist maneuvers in the dark"]
},{}],6:[function(require,module,exports){
module.exports = ["The chief defect of all hitherto existing materialism – that of Feuerbach included – is that the thing, reality, sensuousness, is conceived only in the form of the object or of contemplation, but not as sensuous human activity, practice, not subjectively.",
"Hence, in contradistinction to materialism, the active side was developed abstractly by idealism – which, of course, does not know real, sensuous activity as such.",
"Feuerbach wants sensuous objects, really distinct from the thought objects, but he does not conceive human activity itself as objective activity.",
"Hence, in The Essence of Christianity, he regards the theoretical attitude as the only genuinely human attitude, while practice is conceived and fixed only in its dirty-judaical manifestation.",
"Hence he does not grasp the significance of “revolutionary”, of “practical-critical”, activity.",
"The question whether objective truth can be attributed to human thinking is not a question of theory but is a practical question.",
"Man must prove the truth — i.",
"the reality and power, the this-sidedness of his thinking in practice.",
"The dispute over the reality or non-reality of thinking that is isolated from practice is a purely scholastic question.",
"The materialist doctrine concerning the changing of circumstances and upbringing forgets that circumstances are changed by men and that it is essential to educate the educator himself.",
"This doctrine must, therefore, divide society into two parts, one of which is superior to society.",
"The coincidence of the changing of circumstances and of human activity or self-changing can be conceived and rationally understood only as revolutionary practice.",
"Feuerbach starts out from the fact of religious self-alienation, of the duplication of the world into a religious world and a secular one.",
"His work consists in resolving the religious world into its secular basis.",
"But that the secular basis detaches itself from itself and establishes itself as an independent realm in the clouds can only be explained by the cleavages and self-contradictions within this secular basis.",
"The latter must, therefore, in itself be both understood in its contradiction and revolutionized in practice.",
"Thus, for instance, after the earthly family is discovered to be the secret of the holy family, the former must then itself be destroyed in theory and in practice.",
"Feuerbach, not satisfied with abstract thinking, wants contemplation; but he does not conceive sensuousness as practical, human-sensuous activity.",
"Feuerbach resolves the religious essence into the human essence.",
"But the human essence is no abstraction inherent in each single individual.",
"In its reality it is the ensemble of the social relations.",
"Feuerbach, who does not enter upon a criticism of this real essence, is consequently compelled:",
"To abstract from the historical process and to fix the religious sentiment as something by itself and to presuppose an abstract – isolated – human individual.",
"Essence, therefore, can be comprehended only as “genus”, as an internal, dumb generality which naturally unites the many individuals.",
"Feuerbach, consequently, does not see that the “religious sentiment” is itself a social product, and that the abstract individual whom he analyses belongs to a particular form of society.",
"All social life is essentially practical.",
"All mysteries which lead theory to mysticism find their rational solution in human practice and in the comprehension of this practice.",
"The highest point reached by contemplative materialism, that is, materialism which does not comprehend sensuousness as practical activity, is contemplation of single individuals and of civil society.",
"The standpoint of the old materialism is civil society; the standpoint of the new is human society, or social humanity.",
"The philosophers have only interpreted the world, in various ways; the point is to change it.",
"The wealth of those societies in which the capitalist mode of production prevails, presents itself as “an immense accumulation of commodities,”  its unit being a single commodity.",
"Our investigation must therefore begin with the analysis of a commodity.",
"A commodity is, in the first place, an object outside us, a thing that by its properties satisfies human wants of some sort or another.",
"The nature of such wants, whether, for instance, they spring from the stomach or from fancy, makes no difference.",
"Neither are we here concerned to know how the object satisfies these wants, whether directly as means of subsistence, or indirectly as means of production.",
"Every useful thing, as iron, paper, &c.",
"may be looked at from the two points of view of quality and quantity.",
"It is an assemblage of many properties, and may therefore be of use in various ways.",
"To discover the various uses of things is the work of history.",
"So also is the establishment of socially-recognized standards of measure for the quantities of these useful objects.",
"The diversity of these measures has its origin partly in the diverse nature of the objects to be measured, partly in convention.",
"The utility of a thing makes it a use value.",
"But this utility is not a thing of air.",
"Being limited by the physical properties of the commodity, it has no existence apart from that commodity.",
"A commodity, such as iron, corn, or a diamond, is therefore, so far as it is a material thing, a use value, something useful.",
"This property of a commodity is independent of the amount of labour required to appropriate its useful qualities.",
"When treating of use value, we always assume to be dealing with definite quantities, such as dozens of watches, yards of linen, or tons of iron.",
"The use values of commodities furnish the material for a special study, that of the commercial knowledge of commodities.",
"Use values become a reality only by use or consumption: they also constitute the substance of all wealth, whatever may be the social form of that wealth.",
"In the form of society we are about to consider, they are, in addition, the material depositories of exchange value.",
"Exchange value, at first sight, presents itself as a quantitative relation, as the proportion in which values in use of one sort are exchanged for those of another sort,  a relation constantly changing with time and place.",
"Hence exchange value appears to be something accidental and purely relative, and consequently an intrinsic value, i.",
"an exchange value that is inseparably connected with, inherent in commodities, seems a contradiction in terms.",
"Let us consider the matter a little more closely.",
"A given commodity, e.",
"a quarter of wheat is exchanged for x blacking, y silk, or z gold, &c.",
"in short, for other commodities in the most different proportions.",
"Instead of one exchange value, the wheat has, therefore, a great many.",
"But since x blacking, y silk, or z gold &c.",
"each represents the exchange value of one quarter of wheat, x blacking, y silk, z gold, &c.",
"must, as exchange values, be replaceable by each other, or equal to each other.",
"Therefore, first: the valid exchange values of a given commodity express something equal; secondly, exchange value, generally, is only the mode of expression, the phenomenal form, of something contained in it, yet distinguishable from it.",
"Let us take two commodities, e.",
"corn and iron.",
"The proportions in which they are exchangeable, whatever those proportions may be, can always be represented by an equation in which a given quantity of corn is equated to some quantity of iron: e.",
"1 quarter corn = x cwt.",
"iron.",
"What does this equation tell us?",
"It tells us that in two different things – in 1 quarter of corn and x cwt.",
"of iron, there exists in equal quantities something common to both.",
"The two things must therefore be equal to a third, which in itself is neither the one nor the other.",
"Each of them, so far as it is exchange value, must therefore be reducible to this third.",
"A simple geometrical illustration will make this clear.",
"In order to calculate and compare the areas of rectilinear figures, we decompose them into triangles.",
"But the area of the triangle itself is expressed by something totally different from its visible figure, namely, by half the product of the base multiplied by the altitude.",
"In the same way the exchange values of commodities must be capable of being expressed in terms of something common to them all, of which thing they represent a greater or less quantity.",
"This common “something” cannot be either a geometrical, a chemical, or any other natural property of commodities.",
"Such properties claim our attention only in so far as they affect the utility of those commodities, make them use values.",
"But the exchange of commodities is evidently an act characterised by a total abstraction from use value.",
"Then one use value is just as good as another, provided only it be present in sufficient quantity.",
"Or, as old Barbon says,",
"“one sort of wares are as good as another, if the values be equal.",
"There is no difference or distinction in things of equal value .",
"An hundred pounds’ worth of lead or iron, is of as great value as one hundred pounds’ worth of silver or gold.",
"As use values, commodities are, above all, of different qualities, but as exchange values they are merely different quantities, and consequently do not contain an atom of use value.",
"If then we leave out of consideration the use value of commodities, they have only one common property left, that of being products of labour.",
"But even the product of labour itself has undergone a change in our hands.",
"If we make abstraction from its use value, we make abstraction at the same time from the material elements and shapes that make the product a use value; we see in it no longer a table, a house, yarn, or any other useful thing.",
"Its existence as a material thing is put out of sight.",
"Neither can it any longer be regarded as the product of the labour of the joiner, the mason, the spinner, or of any other definite kind of productive labour.",
"Along with the useful qualities of the products themselves, we put out of sight both the useful character of the various kinds of labour embodied in them, and the concrete forms of that labour; there is nothing left but what is common to them all; all are reduced to one and the same sort of labour, human labour in the abstract.",
"Let us now consider the residue of each of these products; it consists of the same unsubstantial reality in each, a mere congelation of homogeneous human labour, of labour power expended without regard to the mode of its expenditure.",
"All that these things now tell us is, that human labour power has been expended in their production, that human labour is embodied in them.",
"When looked at as crystals of this social substance, common to them all, they are – Values.",
"We have seen that when commodities are exchanged, their exchange value manifests itself as something totally independent of their use value.",
"But if we abstract from their use value, there remains their Value as defined above.",
"Therefore, the common substance that manifests itself in the exchange value of commodities, whenever they are exchanged, is their value.",
"The progress of our investigation will show that exchange value is the only form in which the value of commodities can manifest itself or be expressed.",
"For the present, however, we have to consider the nature of value independently of this, its form.",
"A use value, or useful article, therefore, has value only because human labour in the abstract has been embodied or materialised in it.",
"How, then, is the magnitude of this value to be measured?",
"Plainly, by the quantity of the value-creating substance, the labour, contained in the article.",
"The quantity of labour, however, is measured by its duration, and labour time in its turn finds its standard in weeks, days, and hours.",
"Some people might think that if the value of a commodity is determined by the quantity of labour spent on it, the more idle and unskilful the labourer, the more valuable would his commodity be, because more time would be required in its production.",
"The labour, however, that forms the substance of value, is homogeneous human labour, expenditure of one uniform labour power.",
"The total labour power of society, which is embodied in the sum total of the values of all commodities produced by that society, counts here as one homogeneous mass of human labour power, composed though it be of innumerable individual units.",
"Each of these units is the same as any other, so far as it has the character of the average labour power of society, and takes effect as such; that is, so far as it requires for producing a commodity, no more time than is needed on an average, no more than is socially necessary.",
"The labour time socially necessary is that required to produce an article under the normal conditions of production, and with the average degree of skill and intensity prevalent at the time.",
"The introduction of power-looms into England probably reduced by one-half the labour required to weave a given quantity of yarn into cloth.",
"The hand-loom weavers, as a matter of fact, continued to require the same time as before; but for all that, the product of one hour of their labour represented after the change only half an hour’s social labour, and consequently fell to one-half its former value.",
"We see then that that which determines the magnitude of the value of any article is the amount of labour socially necessary, or the labour time socially necessary for its production.",
"Each individual commodity, in this connexion, is to be considered as an average sample of its class.",
"Commodities, therefore, in which equal quantities of labour are embodied, or which can be produced in the same time, have the same value.",
"The value of one commodity is to the value of any other, as the labour time necessary for the production of the one is to that necessary for the production of the other.",
"“As values, all commodities are only definite masses of congealed labour time.",
"The value of a commodity would therefore remain constant, if the labour time required for its production also remained constant.",
"But the latter changes with every variation in the productiveness of labour.",
"This productiveness is determined by various circumstances, amongst others, by the average amount of skill of the workmen, the state of science, and the degree of its practical application, the social organisation of production, the extent and capabilities of the means of production, and by physical conditions.",
"For example, the same amount of labour in favourable seasons is embodied in 8 bushels of corn, and in unfavourable, only in four.",
"The same labour extracts from rich mines more metal than from poor mines.",
"Diamonds are of very rare occurrence on the earth’s surface, and hence their discovery costs, on an average, a great deal of labour time.",
"Consequently much labour is represented in a small compass.",
"Jacob doubts whether gold has ever been paid for at its full value.",
"This applies still more to diamonds.",
"According to Eschwege, the total produce of the Brazilian diamond mines for the eighty years, ending in 1823, had not realised the price of one-and-a-half years’ average produce of the sugar and coffee plantations of the same country, although the diamonds cost much more labour, and therefore represented more value.",
"With richer mines, the same quantity of labour would embody itself in more diamonds, and their value would fall.",
"If we could succeed at a small expenditure of labour, in converting carbon into diamonds, their value might fall below that of bricks.",
"In general, the greater the productiveness of labour, the less is the labour time required for the production of an article, the less is the amount of labour crystallised in that article, and the less is its value; and vice versâ, the less the productiveness of labour, the greater is the labour time required for the production of an article, and the greater is its value.",
"The value of a commodity, therefore, varies directly as the quantity, and inversely as the productiveness, of the labour incorporated in it.",
"[A]",
"A thing can be a use value, without having value.",
"This is the case whenever its utility to man is not due to labour.",
"Such are air, virgin soil, natural meadows, &c.",
"A thing can be useful, and the product of human labour, without being a commodity.",
"Whoever directly satisfies his wants with the produce of his own labour, creates, indeed, use values, but not commodities.",
"In order to produce the latter, he must not only produce use values, but use values for others, social use values.",
"(And not only for others, without more.",
"The mediaeval peasant produced quit-rent-corn for his feudal lord and tithe-corn for his parson.",
"But neither the quit-rent-corn nor the tithe-corn became commodities by reason of the fact that they had been produced for others.",
"To become a commodity a product must be transferred to another, whom it will serve as a use value, by means of an exchange.",
"Lastly nothing can have value, without being an object of utility.",
"If the thing is useless, so is the labour contained in it; the labour does not count as labour, and therefore creates no value.",
"SECTION 2",
"THE two-fold CHARACTER OF",
"THE LABOUR EMBODIED IN COMMODITIES",
"At first sight a commodity presented itself to us as a complex of two things – use value and exchange value.",
"Later on, we saw also that labour, too, possesses the same two-fold nature; for, so far as it finds expression in value, it does not possess the same characteristics that belong to it as a creator of use values.",
"I was the first to point out and to examine critically this two-fold nature of the labour contained in commodities.",
"As this point is the pivot on which a clear comprehension of political economy turns, we must go more into detail.",
"Let us take two commodities such as a coat and 10 yards of linen, and let the former be double the value of the latter, so that, if 10 yards of linen = W, the coat = 2W.",
"The coat is a use value that satisfies a particular want.",
"Its existence is the result of a special sort of productive activity, the nature of which is determined by its aim, mode of operation, subject, means, and result.",
"The labour, whose utility is thus represented by the value in use of its product, or which manifests itself by making its product a use value, we call useful labour.",
"In this connection we consider only its useful effect.",
"As the coat and the linen are two qualitatively different use values, so also are the two forms of labour that produce them, tailoring and weaving.",
"Were these two objects not qualitatively different, not produced respectively by labour of different quality, they could not stand to each other in the relation of commodities.",
"Coats are not exchanged for coats, one use value is not exchanged for another of the same kind.",
"To all the different varieties of values in use there correspond as many different kinds of useful labour, classified according to the order, genus, species, and variety to which they belong in the social division of labour.",
"This division of labour is a necessary condition for the production of commodities, but it does not follow, conversely, that the production of commodities is a necessary condition for the division of labour.",
"In the primitive Indian community there is social division of labour, without production of commodities.",
"Or, to take an example nearer home, in every factory the labour is divided according to a system, but this division is not brought about by the operatives mutually exchanging their individual products.",
"Only such products can become commodities with regard to each other, as result from different kinds of labour, each kind being carried on independently and for the account of private individuals.",
"To resume, then: In the use value of each commodity there is contained useful labour, i.",
"productive activity of a definite kind and exercised with a definite aim.",
"Use values cannot confront each other as commodities, unless the useful labour embodied in them is qualitatively different in each of them.",
"In a community, the produce of which in general takes the form of commodities, i.",
"in a community of commodity producers, this qualitative difference between the useful forms of labour that are carried on independently of individual producers, each on their own account, develops into a complex system, a social division of labour.",
"Anyhow, whether the coat be worn by the tailor or by his customer, in either case it operates as a use value.",
"Nor is the relation between the coat and the labour that produced it altered by the circumstance that tailoring may have become a special trade, an independent branch of the social division of labour.",
"Wherever the want of clothing forced them to it, the human race made clothes for thousands of years, without a single man becoming a tailor.",
"But coats and linen, like every other element of material wealth that is not the spontaneous produce of Nature, must invariably owe their existence to a special productive activity, exercised with a definite aim, an activity that appropriates particular nature-given materials to particular human wants.",
"So far therefore as labour is a creator of use value, is useful labour, it is a necessary condition, independent of all forms of society, for the existence of the human race; it is an eternal nature-imposed necessity, without which there can be no material exchanges between man and Nature, and therefore no life.",
"The use values, coat, linen, &c.",
"the bodies of commodities, are combinations of two elements – matter and labour.",
"If we take away the useful labour expended upon them, a material substratum is always left, which is furnished by Nature without the help of man.",
"The latter can work only as Nature does, that is by changing the form of matter.",
"Nay more, in this work of changing the form he is constantly helped by natural forces.",
"We see, then, that labour is not the only source of material wealth, of use values produced by labour.",
"As William Petty puts it, labour is its father and the earth its mother.",
"Let us now pass from the commodity considered as a use value to the value of commodities.",
"By our assumption, the coat is worth twice as much as the linen.",
"But this is a mere quantitative difference, which for the present does not concern us.",
"We bear in mind, however, that if the value of the coat is double that of 10 yds of linen, 20 yds of linen must have the same value as one coat.",
"So far as they are values, the coat and the linen are things of a like substance, objective expressions of essentially identical labour.",
"But tailoring and weaving are, qualitatively, different kinds of labour.",
"There are, however, states of society in which one and the same man does tailoring and weaving alternately, in which case these two forms of labour are mere modifications of the labour of the same individual, and not special and fixed functions of different persons, just as the coat which our tailor makes one day, and the trousers which he makes another day, imply only a variation in the labour of one and the same individual.",
"Moreover, we see at a glance that, in our capitalist society, a given portion of human labour is, in accordance with the varying demand, at one time supplied in the form of tailoring, at another in the form of weaving.",
"This change may possibly not take place without friction, but take place it must.",
"Productive activity, if we leave out of sight its special form, viz.",
"the useful character of the labour, is nothing but the expenditure of human labour power.",
"Tailoring and weaving, though qualitatively different productive activities, are each a productive expenditure of human brains, nerves, and muscles, and in this sense are human labour.",
"They are but two different modes of expending human labour power.",
"Of course, this labour power, which remains the same under all its modifications, must have attained a certain pitch of development before it can be expended in a multiplicity of modes.",
"But the value of a commodity represents human labour in the abstract, the expenditure of human labour in general.",
"And just as in society, a general or a banker plays a great part, but mere man, on the other hand, a very shabby part,  so here with mere human labour.",
"It is the expenditure of simple labour power, i.",
"of the labour power which, on an average, apart from any special development, exists in the organism of every ordinary individual.",
"Simple average labour, it is true, varies in character in different countries and at different times, but in a particular society it is given.",
"Skilled labour counts only as simple labour intensified, or rather, as multiplied simple labour, a given quantity of skilled being considered equal to a greater quantity of simple labour.",
"Experience shows that this reduction is constantly being made.",
"A commodity may be the product of the most skilled labour, but its value, by equating it to the product of simple unskilled labour, represents a definite quantity of the latter labour alone.",
"The different proportions in which different sorts of labour are reduced to unskilled labour as their standard, are established by a social process that goes on behind the backs of the producers, and, consequently, appear to be fixed by custom.",
"For simplicity’s sake we shall henceforth account every kind of labour to be unskilled, simple labour; by this we do no more than save ourselves the trouble of making the reduction.",
"Just as, therefore, in viewing the coat and linen as values, we abstract from their different use values, so it is with the labour represented by those values: we disregard the difference between its useful forms, weaving and tailoring.",
"As the use values, coat and linen, are combinations of special productive activities with cloth and yarn, while the values, coat and linen, are, on the other hand, mere homogeneous congelations of undifferentiated labour, so the labour embodied in these latter values does not count by virtue of its productive relation to cloth and yarn, but only as being expenditure of human labour power.",
"Tailoring and weaving are necessary factors in the creation of the use values, coat and linen, precisely because these two kinds of labour are of different qualities; but only in so far as abstraction is made from their special qualities, only in so far as both possess the same quality of being human labour, do tailoring and weaving form the substance of the values of the same articles.",
"Coats and linen, however, are not merely values, but values of definite magnitude, and according to our assumption, the coat is worth twice as much as the ten yards of linen.",
"Whence this difference in their values?",
"It is owing to the fact that the linen contains only half as much labour as the coat, and consequently, that in the production of the latter, labour power must have been expended during twice the time necessary for the production of the former.",
"While, therefore, with reference to use value, the labour contained in a commodity counts only qualitatively, with reference to value it counts only quantitatively, and must first be reduced to human labour pure and simple.",
"In the former case, it is a question of How and What, in the latter of How much?",
"How long a time?",
"Since the magnitude of the value of a commodity represents only the quantity of labour embodied in it, it follows that all commodities, when taken in certain proportions, must be equal in value.",
"If the productive power of all the different sorts of useful labour required for the production of a coat remains unchanged, the sum of the values of the coats produced increases with their number.",
"If one coat represents x days’ labour, two coats represent 2x days’ labour, and so on.",
"But assume that the duration of the labour necessary for the production of a coat becomes doubled or halved.",
"In the first case one coat is worth as much as two coats were before; in the second case, two coats are only worth as much as one was before, although in both cases one coat renders the same service as before, and the useful labour embodied in it remains of the same quality.",
"But the quantity of labour spent on its production has altered.",
"An increase in the quantity of use values is an increase of material wealth.",
"With two coats two men can be clothed, with one coat only one man.",
"Nevertheless, an increased quantity of material wealth may correspond to a simultaneous fall in the magnitude of its value.",
"This antagonistic movement has its origin in the two-fold character of labour.",
"Productive power has reference, of course, only to labour of some useful concrete form, the efficacy of any special productive activity during a given time being dependent on its productiveness.",
"Useful labour becomes, therefore, a more or less abundant source of products, in proportion to the rise or fall of its productiveness.",
"On the other hand, no change in this productiveness affects the labour represented by value.",
"Since productive power is an attribute of the concrete useful forms of labour, of course it can no longer have any bearing on that labour, so soon as we make abstraction from those concrete useful forms.",
"However then productive power may vary, the same labour, exercised during equal periods of time, always yields equal amounts of value.",
"But it will yield, during equal periods of time, different quantities of values in use; more, if the productive power rise, fewer, if it fall.",
"The same change in productive power, which increases the fruitfulness of labour, and, in consequence, the quantity of use values produced by that labour, will diminish the total value of this increased quantity of use values, provided such change shorten the total labour time necessary for their production; and vice versâ.",
"On the one hand all labour is, speaking physiologically, an expenditure of human labour power, and in its character of identical abstract human labour, it creates and forms the value of commodities.",
"On the other hand, all labour is the expenditure of human labour power in a special form and with a definite aim, and in this, its character of concrete useful labour, it produces use values.",
"SECTION 3",
"THE FORM OF VALUE OR EXCHANGE VALUE",
"Commodities come into the world in the shape of use values, articles, or goods, such as iron, linen, corn, &c.",
"This is their plain, homely, bodily form.",
"They are, however, commodities, only because they are something two-fold, both objects of utility, and, at the same time, depositories of value.",
"They manifest themselves therefore as commodities, or have the form of commodities, only in so far as they have two forms, a physical or natural form, and a value form.",
"The reality of the value of commodities differs in this respect from Dame Quickly, that we don’t know “where to have it.",
"The value of commodities is the very opposite of the coarse materiality of their substance, not an atom of matter enters into its composition.",
"Turn and examine a single commodity, by itself, as we will, yet in so far as it remains an object of value, it seems impossible to grasp it.",
"If, however, we bear in mind that the value of commodities has a purely social reality, and that they acquire this reality only in so far as they are expressions or embodiments of one identical social substance, viz.",
"human labour, it follows as a matter of course, that value can only manifest itself in the social relation of commodity to commodity.",
"In fact we started from exchange value, or the exchange relation of commodities, in order to get at the value that lies hidden behind it.",
"We must now return to this form under which value first appeared to us.",
"Every one knows, if he knows nothing else, that commodities have a value form common to them all, and presenting a marked contrast with the varied bodily forms of their use values.",
"I mean their money form.",
"Here, however, a task is set us, the performance of which has never yet even been attempted by bourgeois economy, the task of tracing the genesis of this money form, of developing the expression of value implied in the value relation of commodities, from its simplest, almost imperceptible outline, to the dazzling money-form.",
"By doing this we shall, at the same time, solve the riddle presented by money.",
"The simplest value-relation is evidently that of one commodity to some one other commodity of a different kind.",
"Hence the relation between the values of two commodities supplies us with the simplest expression of the value of a single commodity.",
"Elementary or Accidental Form Of Value",
"x commodity A = y commodity B, or",
"x commodity A is worth y commodity B.",
"20 yards of linen = 1 coat, or",
"20 Yards of linen are worth 1 coat.",
"The two poles of the expression of value.",
"Relative form and Equivalent form",
"The whole mystery of the form of value lies hidden in this elementary form.",
"Its analysis, therefore, is our real difficulty.",
"Here two different kinds of commodities (in our example the linen and the coat), evidently play two different parts.",
"The linen expresses its value in the coat; the coat serves as the material in which that value is expressed.",
"The former plays an active, the latter a passive, part.",
"The value of the linen is represented as relative value, or appears in relative form.",
"The coat officiates as equivalent, or appears in equivalent form.",
"The relative form and the equivalent form are two intimately connected, mutually dependent and inseparable elements of the expression of value; but, at the same time, are mutually exclusive, antagonistic extremes – i.",
"poles of the same expression.",
"They are allotted respectively to the two different commodities brought into relation by that expression.",
"It is not possible to express the value of linen in linen.",
"20 yards of linen = 20 yards of linen is no expression of value.",
"On the contrary, such an equation merely says that 20 yards of linen are nothing else than 20 yards of linen, a definite quantity of the use value linen.",
"The value of the linen can therefore be expressed only relatively – i.",
"in some other commodity.",
"The relative form of the value of the linen presupposes, therefore, the presence of some other commodity – here the coat – under the form of an equivalent.",
"On the other hand, the commodity that figures as the equivalent cannot at the same time assume the relative form.",
"That second commodity is not the one whose value is expressed.",
"Its function is merely to serve as the material in which the value of the first commodity is expressed.",
"No doubt, the expression 20 yards of linen = 1 coat, or 20 yards of linen are worth 1 coat, implies the opposite relation.",
"1 coat = 20 yards of linen, or 1 coat is worth 20 yards of linen.",
"But, in that case, I must reverse the equation, in order to express the value of the coat relatively; and so soon as I do that the linen becomes the equivalent instead of the coat.",
"A single commodity cannot, therefore, simultaneously assume, in the same expression of value, both forms.",
"The very polarity of these forms makes them mutually exclusive.",
"Whether, then, a commodity assumes the relative form, or the opposite equivalent form, depends entirely upon its accidental position in the expression of value – that is, upon whether it is the commodity whose value is being expressed or the commodity in which value is being expressed.",
"The Relative Form of value",
"(a.",
"The nature and import of this form",
"In order to discover how the elementary expression of the value of a commodity lies hidden in the value relation of two commodities, we must, in the first place, consider the latter entirely apart from its quantitative aspect.",
"The usual mode of procedure is generally the reverse, and in the value relation nothing is seen but the proportion between definite quantities of two different sorts of commodities that are considered equal to each other.",
"It is apt to be forgotten that the magnitudes of different things can be compared quantitatively, only when those magnitudes are expressed in terms of the same unit.",
"It is only as expressions of such a unit that they are of the same denomination, and therefore commensurable.",
"Whether 20 yards of linen = 1 coat or = 20 coats or = x coats – that is, whether a given quantity of linen is worth few or many coats, every such statement implies that the linen and coats, as magnitudes of value, are expressions of the same unit, things of the same kind.",
"Linen = coat is the basis of the equation.",
"But the two commodities whose identity of quality is thus assumed, do not play the same part.",
"It is only the value of the linen that is expressed.",
"And how?",
"By its reference to the coat as its equivalent, as something that can be exchanged for it.",
"In this relation the coat is the mode of existence of value, is value embodied, for only as such is it the same as the linen.",
"On the other hand, the linen’s own value comes to the front, receives independent expression, for it is only as being value that it is comparable with the coat as a thing of equal value, or exchangeable with the coat.",
"To borrow an illustration from chemistry, butyric acid is a different substance from propyl formate.",
"Yet both are made up of the same chemical substances, carbon (C), hydrogen (H), and oxygen (O), and that, too, in like proportions – namely, C4H8O2.",
"If now we equate butyric acid to propyl formate, then, in the first place, propyl formate would be, in this relation, merely a form of existence of C4H8O2; and in the second place, we should be stating that butyric acid also consists of C4H8O2.",
"Therefore, by thus equating the two substances, expression would be given to their chemical composition, while their different physical forms would be neglected.",
"If we say that, as values, commodities are mere congelations of human labour, we reduce them by our analysis, it is true, to the abstraction, value; but we ascribe to this value no form apart from their bodily form.",
"It is otherwise in the value relation of one commodity to another.",
"Here, the one stands forth in its character of value by reason of its relation to the other.",
"By making the coat the equivalent of the linen, we equate the labour embodied in the former to that in the latter.",
"Now, it is true that the tailoring, which makes the coat, is concrete labour of a different sort from the weaving which makes the linen.",
"But the act of equating it to the weaving, reduces the tailoring to that which is really equal in the two kinds of labour, to their common character of human labour.",
"In this roundabout way, then, the fact is expressed, that weaving also, in so far as it weaves value, has nothing to distinguish it from tailoring, and, consequently, is abstract human labour.",
"It is the expression of equivalence between different sorts of commodities that alone brings into relief the specific character of value-creating labour, and this it does by actually reducing the different varieties of labour embodied in the different kinds of commodities to their common quality of human labour in the abstract.",
"There is, however, something else required beyond the expression of the specific character of the labour of which the value of the linen consists.",
"Human labour power in motion, or human labour, creates value, but is not itself value.",
"It becomes value only in its congealed state, when embodied in the form of some object.",
"In order to express the value of the linen as a congelation of human labour, that value must be expressed as having objective existence, as being a something materially different from the linen itself, and yet a something common to the linen and all other commodities.",
"The problem is already solved.",
"When occupying the position of equivalent in the equation of value, the coat ranks qualitatively as the equal of the linen, as something of the same kind, because it is value.",
"In this position it is a thing in which we see nothing but value, or whose palpable bodily form represents value.",
"Yet the coat itself, the body of the commodity, coat, is a mere use value.",
"A coat as such no more tells us it is value, than does the first piece of linen we take hold of.",
"This shows that when placed in value-relation to the linen, the coat signifies more than when out of that relation, just as many a man strutting about in a gorgeous uniform counts for more than when in mufti.",
"In the production of the coat, human labour power, in the shape of tailoring, must have been actually expended.",
"Human labour is therefore accumulated in it.",
"In this aspect the coat is a depository of value, but though worn to a thread, it does not let this fact show through.",
"And as equivalent of the linen in the value equation, it exists under this aspect alone, counts therefore as embodied value, as a body that is value.",
"A, for instance, cannot be “your majesty” to B, unless at the same time majesty in B’s eyes assumes the bodily form of A, and, what is more, with every new father of the people, changes its features, hair, and many other things besides.",
"Hence, in the value equation, in which the coat is the equivalent of the linen, the coat officiates as the form of value.",
"The value of the commodity linen is expressed by the bodily form of the commodity coat, the value of one by the use value of the other.",
"As a use value, the linen is something palpably different from the coat; as value, it is the same as the coat, and now has the appearance of a coat.",
"Thus the linen acquires a value form different from its physical form.",
"The fact that it is value, is made manifest by its equality with the coat, just as the sheep’s nature of a Christian is shown in his resemblance to the Lamb of God.",
"We see, then, all that our analysis of the value of commodities has already told us, is told us by the linen itself, so soon as it comes into communication with another commodity, the coat.",
"Only it betrays its thoughts in that language with which alone it is familiar, the language of commodities.",
"In order to tell us that its own value is created by labour in its abstract character of human labour, it says that the coat, in so far as it is worth as much as the linen, and therefore is value, consists of the same labour as the linen.",
"In order to inform us that its sublime reality as value is not the same as its buckram body, it says that value has the appearance of a coat, and consequently that so far as the linen is value, it and the coat are as like as two peas.",
"We may here remark, that the language of commodities has, besides Hebrew, many other more or less correct dialects.",
"The German “Wertsein,” to be worth, for instance, expresses in a less striking manner than the Romance verbs “valere,” “valer,” “valoir,” that the equating of commodity B to commodity A, is commodity A’s own mode of expressing its value.",
"Paris vaut bien une messe.",
"[Paris is certainly worth a mass]",
"By means, therefore, of the value-relation expressed in our equation, the bodily form of commodity B becomes the value form of commodity A, or the body of commodity B acts as a mirror to the value of commodity A.",
"By putting itself in relation with commodity B, as value in propriâ personâ, as the matter of which human labour is made up, the commodity A converts the value in use, B, into the substance in which to express its, A’s, own value.",
"The value of A, thus expressed in the use value of B, has taken the form of relative value.",
"(b.",
"Quantitative determination of Relative value",
"Every commodity, whose value it is intended to express, is a useful object of given quantity, as 15 bushels of corn, or 100 lbs of coffee.",
"And a given quantity of any commodity contains a definite quantity of human labour.",
"The value form must therefore not only express value generally, but also value in definite quantity.",
"Therefore, in the value relation of commodity A to commodity B, of the linen to the coat, not only is the latter, as value in general, made the equal in quality of the linen, but a definite quantity of coat (1 coat) is made the equivalent of a definite quantity (20 yards) of linen.",
"The equation, 20 yards of linen = 1 coat, or 20 yards of linen are worth one coat, implies that the same quantity of value substance (congealed labour) is embodied in both; that the two commodities have each cost the same amount of labour of the same quantity of labour time.",
"But the labour time necessary for the production of 20 yards of linen or 1 coat varies with every change in the productiveness of weaving or tailoring.",
"We have now to consider the influence of such changes on the quantitative aspect of the relative expression of value.",
"Let the value of the linen vary,  that of the coat remaining constant.",
"If, say in consequence of the exhaustion of flax-growing soil, the labour time necessary for the production of the linen be doubled, the value of the linen will also be doubled.",
"Instead of the equation, 20 yards of linen = 1 coat, we should have 20 yards of linen = 2 coats, since 1 coat would now contain only half the labour time embodied in 20 yards of linen.",
"If, on the other hand, in consequence, say, of improved looms, this labour time be reduced by one-half, the value of the linen would fall by one-half.",
"Consequently, we should have 20 yards of linen = ½ coat.",
"The relative value of commodity A, i.",
"its value expressed in commodity B, rises and falls directly as the value of A, the value of B being supposed constant.",
"II.",
"Let the value of the linen remain constant, while the value of the coat varies.",
"If, under these circumstances, in consequence, for instance, of a poor crop of wool, the labour time necessary for the production of a coat becomes doubled, we have instead of 20 yards of linen = 1 coat, 20 yards of linen = ½ coat.",
"If, on the other hand, the value of the coat sinks by one-half, then 20 yards of linen = 2 coats.",
"Hence, if the value of commodity A remain constant, its relative value expressed in commodity B rises and falls inversely as the value of B.",
"If we compare the different cases in I and II, we see that the same change of magnitude in relative value may arise from totally opposite causes.",
"Thus, the equation, 20 yards of linen = 1 coat, becomes 20 yards of linen = 2 coats, either, because the value of the linen has doubled, or because the value of the coat has fallen by one-half; and it becomes 20 yards of linen = ½ coat, either, because the value of the linen has fallen by one-half, or because the value of the coat has doubled.",
"III.",
"Let the quantities of labour time respectively necessary for the production of the linen and the coat vary simultaneously in the same direction and in the same proportion.",
"In this case 20 yards of linen continue equal to 1 coat, however much their values may have altered.",
"Their change of value is seen as soon as they are compared with a third commodity, whose value has remained constant.",
"If the values of all commodities rose or fell simultaneously, and in the same proportion, their relative values would remain unaltered.",
"Their real change of value would appear from the diminished or increased quantity of commodities produced in a given time.",
"IV.",
"The labour time respectively necessary for the production of the linen and the coat, and therefore the value of these commodities may simultaneously vary in the same direction, but at unequal rates or in opposite directions, or in other ways.",
"The effect of all these possible different variations, on the relative value of a commodity, may be deduced from the results of I, II, and III.",
"Thus real changes in the magnitude of value are neither unequivocally nor exhaustively reflected in their relative expression, that is, in the equation expressing the magnitude of relative value.",
"The relative value of a commodity may vary, although its value remains constant.",
"Its relative value may remain constant, although its value varies; and finally, simultaneous variations in the magnitude of value and in that of its relative expression by no means necessarily correspond in amount.",
"The Equivalent form of value",
"We have seen that commodity A (the linen), by expressing its value in the use value of a commodity differing in kind (the coat), at the same time impresses upon the latter a specific form of value, namely that of the equivalent.",
"The commodity linen manifests its quality of having a value by the fact that the coat, without having assumed a value form different from its bodily form, is equated to the linen.",
"The fact that the latter therefore has a value is expressed by saying that the coat is directly exchangeable with it.",
"Therefore, when we say that a commodity is in the equivalent form, we express the fact that it is directly exchangeable with other commodities.",
"When one commodity, such as a coat, serves as the equivalent of another, such as linen, and coats consequently acquire the characteristic property of being directly exchangeable with linen, we are far from knowing in what proportion the two are exchangeable.",
"The value of the linen being given in magnitude, that proportion depends on the value of the coat.",
"Whether the coat serves as the equivalent and the linen as relative value, or the linen as the equivalent and the coat as relative value, the magnitude of the coat’s value is determined, independently of its value form, by the labour time necessary for its production.",
"But whenever the coat assumes in the equation of value, the position of equivalent, its value acquires no quantitative expression; on the contrary, the commodity coat now figures only as a definite quantity of some article.",
"For instance, 40 yards of linen are worth – what?",
"2 coats.",
"Because the commodity coat here plays the part of equivalent, because the use-value coat, as opposed to the linen, figures as an embodiment of value, therefore a definite number of coats suffices to express the definite quantity of value in the linen.",
"Two coats may therefore express the quantity of value of 40 yards of linen, but they can never express the quantity of their own value.",
"A superficial observation of this fact, namely, that in the equation of value, the equivalent figures exclusively as a simple quantity of some article, of some use value, has misled Bailey, as also many others, both before and after him, into seeing, in the expression of value, merely a quantitative relation.",
"The truth being, that when a commodity acts as equivalent, no quantitative determination of its value is expressed.",
"The first peculiarity that strikes us, in considering the form of the equivalent, is this: use value becomes the form of manifestation, the phenomenal form of its opposite, value.",
"The bodily form of the commodity becomes its value form.",
"But, mark well, that this quid pro quo exists in the case of any commodity B, only when some other commodity A enters into a value relation with it, and then only within the limits of this relation.",
"Since no commodity can stand in the relation of equivalent to itself, and thus turn its own bodily shape into the expression of its own value, every commodity is compelled to choose some other commodity for its equivalent, and to accept the use value, that is to say, the bodily shape of that other commodity as the form of its own value.",
"One of the measures that we apply to commodities as material substances, as use values, will serve to illustrate this point.",
"A sugar-loaf being a body, is heavy, and therefore has weight: but we can neither see nor touch this weight.",
"We then take various pieces of iron, whose weight has been determined beforehand.",
"The iron, as iron, is no more the form of manifestation of weight, than is the sugar-loaf.",
"Nevertheless, in order to express the sugar-loaf as so much weight, we put it into a weight-relation with the iron.",
"In this relation, the iron officiates as a body representing nothing but weight.",
"A certain quantity of iron therefore serves as the measure of the weight of the sugar, and represents, in relation to the sugar-loaf, weight embodied, the form of manifestation of weight.",
"This part is played by the iron only within this relation, into which the sugar or any other body, whose weight has to be determined, enters with the iron.",
"Were they not both heavy, they could not enter into this relation, and the one could therefore not serve as the expression of the weight of the other.",
"When we throw both into the scales, we see in reality, that as weight they are both the same, and that, therefore, when taken in proper proportions, they have the same weight.",
"Just as the substance iron, as a measure of weight, represents in relation to the sugar-loaf weight alone, so, in our expression of value, the material object, coat, in relation to the linen, represents value alone.",
"Here, however, the analogy ceases.",
"The iron, in the expression of the weight of the sugar-loaf, represents a natural property common to both bodies, namely their weight; but the coat, in the expression of value of the linen, represents a non-natural property of both, something purely social, namely, their value.",
"Since the relative form of value of a commodity – the linen, for example – expresses the value of that commodity, as being something wholly different from its substance and properties, as being, for instance, coat-like, we see that this expression itself indicates that some social relation lies at the bottom of it.",
"With the equivalent form it is just the contrary.",
"The very essence of this form is that the material commodity itself – the coat – just as it is, expresses value, and is endowed with the form of value by Nature itself.",
"Of course this holds good only so long as the value relation exists, in which the coat stands in the position of equivalent to the linen.",
"Since, however, the properties of a thing are not the result of its relations to other things, but only manifest themselves in such relations, the coat seems to be endowed with its equivalent form, its property of being directly exchangeable, just as much by Nature as it is endowed with the property of being heavy, or the capacity to keep us warm.",
"Hence the enigmatical character of the equivalent form which escapes the notice of the bourgeois political economist, until this form, completely developed, confronts him in the shape of money.",
"He then seeks to explain away the mystical character of gold and silver, by substituting for them less dazzling commodities, and by reciting, with ever renewed satisfaction, the catalogue of all possible commodities which at one time or another have played the part of equivalent.",
"He has not the least suspicion that the most simple expression of value, such as 20 yds of linen = 1 coat, already propounds the riddle of the equivalent form for our solution.",
"The body of the commodity that serves as the equivalent, figures as the materialisation of human labour in the abstract, and is at the same time the product of some specifically useful concrete labour.",
"This concrete labour becomes, therefore, the medium for expressing abstract human labour.",
"If on the one hand the coat ranks as nothing but the embodiment of abstract human labour, so, on the other hand, the tailoring which is actually embodied in it, counts as nothing but the form under which that abstract labour is realised.",
"In the expression of value of the linen, the utility of the tailoring consists, not in making clothes, but in making an object, which we at once recognise to be Value, and therefore to be a congelation of labour, but of labour indistinguishable from that realised in the value of the linen.",
"In order to act as such a mirror of value, the labour of tailoring must reflect nothing besides its own abstract quality of being human labour generally.",
"In tailoring, as well as in weaving, human labour power is expended.",
"Both, therefore, possess the general property of being human labour, and may, therefore, in certain cases, such as in the production of value, have to be considered under this aspect alone.",
"There is nothing mysterious in this.",
"But in the expression of value there is a complete turn of the tables.",
"For instance, how is the fact to be expressed that weaving creates the value of the linen, not by virtue of being weaving, as such, but by reason of its general property of being human labour?",
"Simply by opposing to weaving that other particular form of concrete labour (in this instance tailoring), which produces the equivalent of the product of weaving.",
"Just as the coat in its bodily form became a direct expression of value, so now does tailoring, a concrete form of labour, appear as the direct and palpable embodiment of human labour generally.",
"Hence, the second peculiarity of the equivalent form is, that concrete labour becomes the form under which its opposite, abstract human labour, manifests itself.",
"But because this concrete labour, tailoring in our case, ranks as, and is directly identified with, undifferentiated human labour, it also ranks as identical with any other sort of labour, and therefore with that embodied in the linen.",
"Consequently, although, like all other commodity-producing labour, it is the labour of private individuals, yet, at the same time, it ranks as labour directly social in its character.",
"This is the reason why it results in a product directly exchangeable with other commodities.",
"We have then a third peculiarity of the equivalent form, namely, that the labour of private individuals takes the form of its opposite, labour directly social in its form.",
"The two latter peculiarities of the equivalent form will become more intelligible if we go back to the great thinker who was the first to analyse so many forms, whether of thought, society, or Nature, and amongst them also the form of value.",
"I mean Aristotle.",
"In the first place, he clearly enunciates that the money form of commodities is only the further development of the simple form of value – i.",
"of the expression of the value of one commodity in some other commodity taken at random; for he says:",
"5 beds = 1 house (clinai pente anti oiciaς)",
"is not to be distinguished from",
"5 beds = so much money.",
"(clinai pente anti .",
"oson ai pente clinai)",
"He further sees that the value relation which gives rise to this expression makes it necessary that the house should qualitatively be made the equal of the bed, and that, without such an equalisation, these two clearly different things could not be compared with each other as commensurable quantities.",
"“Exchange,” he says, “cannot take place without equality, and equality not without commensurability",
"(out isothς mh oushς snmmetriaς).",
"Here, however, he comes to a stop, and gives up the further analysis of the form of value.",
"“It is, however, in reality, impossible (th men oun alhqeia adunaton), that such unlike things can be commensurable” – i.",
"qualitatively equal.",
"Such an equalisation can only be something foreign to their real nature, consequently only “a makeshift for practical purposes.",
"Aristotle therefore, himself, tells us what barred the way to his further analysis; it was the absence of any concept of value.",
"What is that equal something, that common substance, which admits of the value of the beds being expressed by a house?",
"Such a thing, in truth, cannot exist, says Aristotle.",
"And why not?",
"Compared with the beds, the house does represent something equal to them, in so far as it represents what is really equal, both in the beds and the house.",
"And that is – human labour.",
"There was, however, an important fact which prevented Aristotle from seeing that, to attribute value to commodities, is merely a mode of expressing all labour as equal human labour, and consequently as labour of equal quality.",
"Greek society was founded upon slavery, and had, therefore, for its natural basis, the inequality of men and of their labour powers.",
"The secret of the expression of value, namely, that all kinds of labour are equal and equivalent, because, and so far as they are human labour in general, cannot be deciphered, until the notion of human equality has already acquired the fixity of a popular prejudice.",
"This, however, is possible only in a society in which the great mass of the produce of labour takes the form of commodities, in which, consequently, the dominant relation between man and man, is that of owners of commodities.",
"The brilliancy of Aristotle’s genius is shown by this alone, that he discovered, in the expression of the value of commodities, a relation of equality.",
"The peculiar conditions of the society in which he lived, alone prevented him from discovering what, “in truth,” was at the bottom of this equality.",
"The Elementary Form of value considered as a whole",
"The elementary form of value of a commodity is contained in the equation, expressing its value relation to another commodity of a different kind, or in its exchange relation to the same.",
"The value of commodity A, is qualitatively expressed, by the fact that commodity B is directly exchangeable with it.",
"Its value is quantitatively expressed by the fact, that a definite quantity of B is exchangeable with a definite quantity of A.",
"In other words, the value of a commodity obtains independent and definite expression, by taking the form of exchange value.",
"When, at the beginning of this chapter, we said, in common parlance, that a commodity is both a use value and an exchange value, we were, accurately speaking, wrong.",
"A commodity is a use value or object of utility, and a value.",
"It manifests itself as this two-fold thing, that it is, as soon as its value assumes an independent form – viz.",
"the form of exchange value.",
"It never assumes this form when isolated, but only when placed in a value or exchange relation with another commodity of a different kind.",
"When once we know this, such a mode of expression does no harm; it simply serves as an abbreviation.",
"Our analysis has shown, that the form or expression of the value of a commodity originates in the nature of value, and not that value and its magnitude originate in the mode of their expression as exchange value.",
"This, however, is the delusion as well of the mercantilists and their recent revivers, Ferrier, Ganilh,  and others, as also of their antipodes, the modern bagmen of Free-trade, such as Bastiat.",
"The mercantilists lay special stress on the qualitative aspect of the expression of value, and consequently on the equivalent form of commodities, which attains its full perfection in money.",
"The modern hawkers of Free-trade, who must get rid of their article at any price, on the other hand, lay most stress on the quantitative aspect of the relative form of value.",
"For them there consequently exists neither value, nor magnitude of value, anywhere except in its expression by means of the exchange relation of commodities, that is, in the daily list of prices current.",
"Macleod, who has taken upon himself to dress up the confused ideas of Lombard Street in the most learned finery, is a successful cross between the superstitious mercantilists, and the enlightened Free-trade bagmen.",
"A close scrutiny of the expression of the value of A in terms of B, contained in the equation expressing the value relation of A to B, has shown us that, within that relation, the bodily form of A figures only as a use value, the bodily form of B only as the form or aspect of value.",
"The opposition or contrast existing internally in each commodity between use value and value, is, therefore, made evident externally by two commodities being placed in such relation to each other, that the commodity whose value it is sought to express, figures directly as a mere use value, while the commodity in which that value is to be expressed, figures directly as mere exchange value.",
"Hence the elementary form of value of a commodity is the elementary form in which the contrast contained in that commodity, between use value and value, becomes apparent.",
"Every product of labour is, in all states of society, a use value; but it is only at a definite historical epoch in a society’s development that such a product becomes a commodity, viz.",
"at the epoch when the labour spent on the production of a useful article becomes expressed as one of the objective qualities of that article, i.",
"as its value.",
"It therefore follows that the elementary value form is also the primitive form under which a product of labour appears historically as a commodity, and that the gradual transformation of such products into commodities, proceeds pari passu with the development of the value form.",
"We perceive, at first sight, the deficiencies of the elementary form of value: it is a mere germ, which must undergo a series of metamorphoses before it can ripen into the price form.",
"The expression of the value of commodity A in terms of any other commodity B, merely distinguishes the value from the use value of A, and therefore places A merely in a relation of exchange with a single different commodity, B; but it is still far from expressing A’s qualitative equality, and quantitative proportionality, to all commodities.",
"To the elementary relative value form of a commodity, there corresponds the single equivalent form of one other commodity.",
"Thus, in the relative expression of value of the linen, the coat assumes the form of equivalent, or of being directly exchangeable, only in relation to a single commodity, the linen.",
"Nevertheless, the elementary form of value passes by an easy transition into a more complete form.",
"It is true that by means of the elementary form, the value of a commodity A, becomes expressed in terms of one, and only one, other commodity.",
"But that one may be a commodity of any kind, coat, iron, corn, or anything else.",
"Therefore, according as A is placed in relation with one or the other, we get for one and the same commodity, different elementary expressions of value.",
"The number of such possible expressions is limited only by the number of the different kinds of commodities distinct from it.",
"The isolated expression of A’s value, is therefore convertible into a series, prolonged to any length, of the different elementary expressions of that value.",
"Total or Expanded Form of value",
"z Com.",
"A = u Com.",
"B or = v Com.",
"C or = w Com.",
"D or = Com.",
"E or = &c.",
"(20 yards of linen = 1 coat or = 10 lbs tea or = 40 lbs.",
"coffee or",
"1 quarter corn or = 2 ounces gold or = ½ ton iron or = &c.",
"The Expanded Relative form of value",
"The value of a single commodity, the linen, for example, is now expressed in terms of numberless other elements of the world of commodities.",
"Every other commodity now becomes a mirror of the linen’s value.",
"It is thus, that for the first time, this value shows itself in its true light as a congelation of undifferentiated human labour.",
"For the labour that creates it, now stands expressly revealed, as labour that ranks equally with every other sort of human labour, no matter what its form, whether tailoring, ploughing, mining, &c.",
"and no matter, therefore, whether it is realised in coats, corn, iron, or gold.",
"The linen, by virtue of the form of its value, now stands in a social relation, no longer with only one other kind of commodity, but with the whole world of commodities.",
"As a commodity, it is a citizen of that world.",
"At the same time, the interminable series of value equations implies, that as regards the value of a commodity, it is a matter of indifference under what particular form, or kind, of use value it appears.",
"In the first form, 20 yds of linen = 1 coat, it might, for ought that otherwise appears, be pure accident, that these two commodities are exchangeable in definite quantities.",
"In the second form, on the contrary, we perceive at once the background that determines, and is essentially different from, this accidental appearance.",
"The value of the linen remains unaltered in magnitude, whether expressed in coats, coffee, or iron, or in numberless different commodities, the property of as many different owners.",
"The accidental relation between two individual commodity-owners disappears.",
"It becomes plain, that it is not the exchange of commodities which regulates the magnitude of their value; but, on the contrary, that it is the magnitude of their value which controls their exchange proportions.",
"The particular Equivalent form",
"Each commodity, such as, coat, tea, corn, iron, &c.",
"figures in the expression of value of the linen, as an equivalent, and, consequently, as a thing that is value.",
"The bodily form of each of these commodities figures now as a particular equivalent form, one out of many.",
"In the same way the manifold concrete useful kinds of labour, embodied in these different commodities, rank now as so many different forms of the realisation, or manifestation, of undifferentiated human labour.",
"Defects of the Total or Expanded form of value",
"In the first place, the relative expression of value is incomplete because the series representing it is interminable.",
"The chain of which each equation of value is a link, is liable at any moment to be lengthened by each new kind of commodity that comes into existence and furnishes the material for a fresh expression of value.",
"In the second place, it is a many-coloured mosaic of disparate and independent expressions of value.",
"And lastly, if, as must be the case, the relative value of each commodity in turn, becomes expressed in this expanded form, we get for each of them a relative value form, different in every case, and consisting of an interminable series of expressions of value.",
"The defects of the expanded relative value form are reflected in the corresponding equivalent form.",
"Since the bodily form of each single commodity is one particular equivalent form amongst numberless others, we have, on the whole, nothing but fragmentary equivalent forms, each excluding the others.",
"In the same way, also, the special, concrete, useful kind of labour embodied in each particular equivalent, is presented only as a particular kind of labour, and therefore not as an exhaustive representative of human labour generally.",
"The latter, indeed, gains adequate manifestation in the totality of its manifold, particular, concrete forms.",
"But, in that case, its expression in an infinite series is ever incomplete and deficient in unity.",
"The expanded relative value form is, however, nothing but the sum of the elementary relative expressions or equations of the first kind, such as:",
"20 yards of linen = 1 coat",
"20 yards of linen = 10 lbs of tea, etc.",
"Each of these implies the corresponding inverted equation,",
"1 coat = 20 yards of linen",
"10 lbs of tea = 20 yards of linen, etc.",
"In fact, when a person exchanges his linen for many other commodities, and thus expresses its value in a series of other commodities, it necessarily follows, that the various owners of the latter exchange them for the linen, and consequently express the value of their various commodities in one and the same third commodity, the linen.",
"If then, we reverse the series, 20 yards of linen = 1 coat or = 10 lbs of tea, etc.",
"that is to say, if we give expression to the converse relation already implied in the series, we get,",
"The General Form of Value",
"1 coat",
"10  lbs of tea",
"40  lbs of coffee",
"1 quarter of corn",
"2 ounces of gold",
"a ton of iron",
"x Commodity A, etc.",
"20 yards of linen",
"The altered character of the form of value",
"All commodities now express their value (1) in an elementary form, because in a single commodity; (2) with unity, because in one and the same commodity.",
"This form of value is elementary and the same for all, therefore general.",
"The forms A and B were fit only to express the value of a commodity as something distinct from its use value or material form.",
"The first form, A, furnishes such equations as the following: – 1 coat = 20 yards of linen, 10 lbs of tea = ½ a ton of iron.",
"The value of the coat is equated to linen, that of the tea to iron.",
"But to be equated to linen, and again to iron, is to be as different as are linen and iron.",
"This form, it is plain, occurs practically only in the first beginning, when the products of labour are converted into commodities by accidental and occasional exchanges.",
"The second form, B, distinguishes, in a more adequate manner than the first, the value of a commodity from its use value, for the value of the coat is there placed in contrast under all possible shapes with the bodily form of the coat; it is equated to linen, to iron, to tea, in short, to everything else, only not to itself, the coat.",
"On the other hand, any general expression of value common to all is directly excluded; for, in the equation of value of each commodity, all other commodities now appear only under the form of equivalents.",
"The expanded form of value comes into actual existence for the first time so soon as a particular product of labour, such as cattle, is no longer exceptionally, but habitually, exchanged for various other commodities.",
"The third and lastly developed form expresses the values of the whole world of commodities in terms of a single commodity set apart for the purpose, namely, the linen, and thus represents to us their values by means of their equality with linen.",
"The value of every commodity is now, by being equated to linen, not only differentiated from its own use value, but from all other use values generally, and is, by that very fact, expressed as that which is common to all commodities.",
"By this form, commodities are, for the first time, effectively brought into relation with one another as values, or made to appear as exchange values.",
"The two earlier forms either express the value of each commodity in terms of a single commodity of a different kind, or in a series of many such commodities.",
"In both cases, it is, so to say, the special business of each single commodity to find an expression for its value, and this it does without the help of the others.",
"These others, with respect to the former, play the passive parts of equivalents.",
"The general form of value, C, results from the joint action of the whole world of commodities, and from that alone.",
"A commodity can acquire a general expression of its value only by all other commodities, simultaneously with it, expressing their values in the same equivalent; and every new commodity must follow suit.",
"It thus becomes evident that since the existence of commodities as values is purely social, this social existence can be expressed by the totality of their social relations alone, and consequently that the form of their value must be a socially recognised form.",
"All commodities being equated to linen now appear not only as qualitatively equal as values generally, but also as values whose magnitudes are capable of comparison.",
"By expressing the magnitudes of their values in one and the same material, the linen, those magnitudes are also compared with each other.",
"For instance, 10 lbs of tea = 20 yards of linen, and 40 lbs of coffee = 20 yards of linen.",
"Therefore, 10 lbs of tea = 40 lbs of coffee.",
"In other words, there is contained in 1 lb of coffee only one-fourth as much substance of value – labour – as is contained in 1 lb of tea.",
"The general form of relative value, embracing the whole world of commodities, converts the single commodity that is excluded from the rest, and made to play the part of equivalent – here the linen – into the universal equivalent.",
"The bodily form of the linen is now the form assumed in common by the values of all commodities; it therefore becomes directly exchangeable with all and every of them.",
"The substance linen becomes the visible incarnation, the social chrysalis state of every kind of human labour.",
"Weaving, which is the labour of certain private individuals producing a particular article, linen, acquires in consequence a social character, the character of equality with all other kinds of labour.",
"The innumerable equations of which the general form of value is composed, equate in turn the labour embodied in the linen to that embodied in every other commodity, and they thus convert weaving into the general form of manifestation of undifferentiated human labour.",
"In this manner the labour realised in the values of commodities is presented not only under its negative aspect, under which abstraction is made from every concrete form and useful property of actual work, but its own positive nature is made to reveal itself expressly.",
"The general value form is the reduction of all kinds of actual labour to their common character of being human labour generally, of being the expenditure of human labour power.",
"The general value form, which represents all products of labour as mere congelations of undifferentiated human labour, shows by its very structure that it is the social resumé of the world of commodities.",
"That form consequently makes it indisputably evident that in the world of commodities the character possessed by all labour of being human labour constitutes its specific social character.",
"The Interdependent Development of the Relative Form of Value, and of the Equivalent Form",
"The degree of development of the relative form of value corresponds to that of the equivalent form.",
"But we must bear in mind that the development of the latter is only the expression and result of the development of the former.",
"The primary or isolated relative form of value of one commodity converts some other commodity into an isolated equivalent.",
"The expanded form of relative value, which is the expression of the value of one commodity in terms of all other commodities, endows those other commodities with the character of particular equivalents differing in kind.",
"And lastly, a particular kind of commodity acquires the character of universal equivalent, because all other commodities make it the material in which they uniformly express their value.",
"The antagonism between the relative form of value and the equivalent form, the two poles of the value form, is developed concurrently with that form itself.",
"The first form, 20 yds of linen = one coat, already contains this antagonism, without as yet fixing it.",
"According as we read this equation forwards or backwards, the parts played by the linen and the coat are different.",
"In the one case the relative value of the linen is expressed in the coat, in the other case the relative value of the coat is expressed in the linen.",
"In this first form of value, therefore, it is difficult to grasp the polar contrast.",
"Form B shows that only one single commodity at a time can completely expand its relative value, and that it acquires this expanded form only because, and in so far as, all other commodities are, with respect to it, equivalents.",
"Here we cannot reverse the equation, as we can the equation 20 yds of linen = 1 coat, without altering its general character, and converting it from the expanded form of value into the general form of value.",
"Finally, the form C gives to the world of commodities a general social relative form of value, because, and in so far as, thereby all commodities, with the exception of one, are excluded from the equivalent form.",
"A single commodity, the linen, appears therefore to have acquired the character of direct exchangeability with every other commodity because, and in so far as, this character is denied to every other commodity.",
"The commodity that figures as universal equivalent, is, on the other hand, excluded from the relative value form.",
"If the linen, or any other commodity serving as universal equivalent, were, at the same time, to share in the relative form of value, it would have to serve as its own equivalent.",
"We should then have 20 yds of linen = 20 yds of linen; this tautology expresses neither value, nor magnitude of value.",
"In order to express the relative value of the universal equivalent, we must rather reverse the form C.",
"This equivalent has no relative form of value in common with other commodities, but its value is relatively expressed by a never ending series of other commodities.",
"Thus, the expanded form of relative value, or form B, now shows itself as the specific form of relative value for the equivalent commodity.",
"Transition from the General form of value to the Money form",
"The universal equivalent form is a form of value in general.",
"It can, therefore, be assumed by any commodity.",
"On the other hand, if a commodity be found to have assumed the universal equivalent form (form C), this is only because and in so far as it has been excluded from the rest of all other commodities as their equivalent, and that by their own act.",
"And from the moment that this exclusion becomes finally restricted to one particular commodity, from that moment only, the general form of relative value of the world of commodities obtains real consistence and general social validity.",
"The particular commodity, with whose bodily form the equivalent form is thus socially identified, now becomes the money commodity, or serves as money.",
"It becomes the special social function of that commodity, and consequently its social monopoly, to play within the world of commodities the part of the universal equivalent.",
"Amongst the commodities which, in form B, figure as particular equivalents of the linen, and, in form C, express in common their relative values in linen, this foremost place has been attained by one in particular – namely, gold.",
"If, then, in form C we replace the linen by gold, we get,",
"The Money-Form",
"20  yards of linen  =",
"1 coat  =",
"10  lbs of tea  =",
"40  lbs of coffee =",
"1 quarter of corn =",
"2 ounces of gold  =",
"a ton of iron =",
"x Commodity A =",
"2 ounces of gold",
"In passing from form A to form B, and from the latter to form C, the changes are fundamental.",
"On the other hand, there is no difference between forms C and D, except that, in the latter, gold has assumed the equivalent form in the place of linen.",
"Gold is in form D, what linen was in form C – the universal equivalent.",
"The progress consists in this alone, that the character of direct and universal exchangeability – in other words, that the universal equivalent form – has now, by social custom, become finally identified with the substance, gold.",
"Gold is now money with reference to all other commodities only because it was previously, with reference to them, a simple commodity.",
"Like all other commodities, it was also capable of serving as an equivalent, either as simple equivalent in isolated exchanges, or as particular equivalent by the side of others.",
"Gradually it began to serve, within varying limits, as universal equivalent.",
"So soon as it monopolises this position in the expression of value for the world of commodities, it becomes the money commodity, and then, and not till then, does form D become distinct from form C, and the general form of value become changed into the money form.",
"The elementary expression of the relative value of a single commodity, such as linen, in terms of the commodity, such as gold, that plays the part of money, is the price form of that commodity.",
"The price form of the linen is therefore",
"20 yards of linen = 2 ounces of gold, or, if 2 ounces of gold when",
"coined are £2, 20 yards of linen = £2.",
"The difficulty in forming a concept of the money form, consists in clearly comprehending the universal equivalent form, and as a necessary corollary, the general form of value, form C.",
"The latter is deducible from form B, the expanded form of value, the essential component element of which, we saw, is form A, 20 yards of linen = 1 coat or x commodity A = y commodity B.",
"The simple commodity form is therefore the germ of the money form.",
"SECTION 4",
"THE FETISHISM OF COMMODITIES",
"AND THE SECRET THEREOF",
"A commodity appears, at first sight, a very trivial thing, and easily understood.",
"Its analysis shows that it is, in reality, a very queer thing, abounding in metaphysical subtleties and theological niceties.",
"So far as it is a value in use, there is nothing mysterious about it, whether we consider it from the point of view that by its properties it is capable of satisfying human wants, or from the point that those properties are the product of human labour.",
"It is as clear as noon-day, that man, by his industry, changes the forms of the materials furnished by Nature, in such a way as to make them useful to him.",
"The form of wood, for instance, is altered, by making a table out of it.",
"Yet, for all that, the table continues to be that common, every-day thing, wood.",
"But, so soon as it steps forth as a commodity, it is changed into something transcendent.",
"It not only stands with its feet on the ground, but, in relation to all other commodities, it stands on its head, and evolves out of its wooden brain grotesque ideas, far more wonderful than “table-turning” ever was.",
"[26a]",
"The mystical character of commodities does not originate, therefore, in their use value.",
"Just as little does it proceed from the nature of the determining factors of value.",
"For, in the first place, however varied the useful kinds of labour, or productive activities, may be, it is a physiological fact, that they are functions of the human organism, and that each such function, whatever may be its nature or form, is essentially the expenditure of human brain, nerves, muscles, &c.",
"Secondly, with regard to that which forms the ground-work for the quantitative determination of value, namely, the duration of that expenditure, or the quantity of labour, it is quite clear that there is a palpable difference between its quantity and quality.",
"In all states of society, the labour time that it costs to produce the means of subsistence, must necessarily be an object of interest to mankind, though not of equal interest in different stages of development.",
"And lastly, from the moment that men in any way work for one another, their labour assumes a social form.",
"Whence, then, arises the enigmatical character of the product of labour, so soon as it assumes the form of commodities?",
"Clearly from this form itself.",
"The equality of all sorts of human labour is expressed objectively by their products all being equally values; the measure of the expenditure of labour power by the duration of that expenditure, takes the form of the quantity of value of the products of labour; and finally the mutual relations of the producers, within which the social character of their labour affirms itself, take the form of a social relation between the products.",
"A commodity is therefore a mysterious thing, simply because in it the social character of men’s labour appears to them as an objective character stamped upon the product of that labour; because the relation of the producers to the sum total of their own labour is presented to them as a social relation, existing not between themselves, but between the products of their labour.",
"This is the reason why the products of labour become commodities, social things whose qualities are at the same time perceptible and imperceptible by the senses.",
"In the same way the light from an object is perceived by us not as the subjective excitation of our optic nerve, but as the objective form of something outside the eye itself.",
"But, in the act of seeing, there is at all events, an actual passage of light from one thing to another, from the external object to the eye.",
"There is a physical relation between physical things.",
"But it is different with commodities.",
"There, the existence of the things quâ commodities, and the value relation between the products of labour which stamps them as commodities, have absolutely no connection with their physical properties and with the material relations arising therefrom.",
"There it is a definite social relation between men, that assumes, in their eyes, the fantastic form of a relation between things.",
"In order, therefore, to find an analogy, we must have recourse to the mist-enveloped regions of the religious world.",
"In that world the productions of the human brain appear as independent beings endowed with life, and entering into relation both with one another and the human race.",
"So it is in the world of commodities with the products of men’s hands.",
"This I call the Fetishism which attaches itself to the products of labour, so soon as they are produced as commodities, and which is therefore inseparable from the production of commodities.",
"This Fetishism of commodities has its origin, as the foregoing analysis has already shown, in the peculiar social character of the labour that produces them.",
"As a general rule, articles of utility become commodities, only because they are products of the labour of private individuals or groups of individuals who carry on their work independently of each other.",
"The sum total of the labour of all these private individuals forms the aggregate labour of society.",
"Since the producers do not come into social contact with each other until they exchange their products, the specific social character of each producer’s labour does not show itself except in the act of exchange.",
"In other words, the labour of the individual asserts itself as a part of the labour of society, only by means of the relations which the act of exchange establishes directly between the products, and indirectly, through them, between the producers.",
"To the latter, therefore, the relations connecting the labour of one individual with that of the rest appear, not as direct social relations between individuals at work, but as what they really are, material relations between persons and social relations between things.",
"It is only by being exchanged that the products of labour acquire, as values, one uniform social status, distinct from their varied forms of existence as objects of utility.",
"This division of a product into a useful thing and a value becomes practically important, only when exchange has acquired such an extension that useful articles are produced for the purpose of being exchanged, and their character as values has therefore to be taken into account, beforehand, during production.",
"From this moment the labour of the individual producer acquires socially a two-fold character.",
"On the one hand, it must, as a definite useful kind of labour, satisfy a definite social want, and thus hold its place as part and parcel of the collective labour of all, as a branch of a social division of labour that has sprung up spontaneously.",
"On the other hand, it can satisfy the manifold wants of the individual producer himself, only in so far as the mutual exchangeability of all kinds of useful private labour is an established social fact, and therefore the private useful labour of each producer ranks on an equality with that of all others.",
"The equalisation of the most different kinds of labour can be the result only of an abstraction from their inequalities, or of reducing them to their common denominator, viz.",
"expenditure of human labour power or human labour in the abstract.",
"The two-fold social character of the labour of the individual appears to him, when reflected in his brain, only under those forms which are impressed upon that labour in every-day practice by the exchange of products.",
"In this way, the character that his own labour possesses of being socially useful takes the form of the condition, that the product must be not only useful, but useful for others, and the social character that his particular labour has of being the equal of all other particular kinds of labour, takes the form that all the physically different articles that are the products of labour, have one common quality, viz.",
"that of having value.",
"Hence, when we bring the products of our labour into relation with each other as values, it is not because we see in these articles the material receptacles of homogeneous human labour.",
"Quite the contrary: whenever, by an exchange, we equate as values our different products, by that very act, we also equate, as human labour, the different kinds of labour expended upon them.",
"We are not aware of this, nevertheless we do it.",
"Value, therefore, does not stalk about with a label describing what it is.",
"It is value, rather, that converts every product into a social hieroglyphic.",
"Later on, we try to decipher the hieroglyphic, to get behind the secret of our own social products; for to stamp an object of utility as a value, is just as much a social product as language.",
"The recent scientific discovery, that the products of labour, so far as they are values, are but material expressions of the human labour spent in their production, marks, indeed, an epoch in the history of the development of the human race, but, by no means, dissipates the mist through which the social character of labour appears to us to be an objective character of the products themselves.",
"The fact, that in the particular form of production with which we are dealing, viz.",
"the production of commodities, the specific social character of private labour carried on independently, consists in the equality of every kind of that labour, by virtue of its being human labour, which character, therefore, assumes in the product the form of value – this fact appears to the producers, notwithstanding the discovery above referred to, to be just as real and final, as the fact, that, after the discovery by science of the component gases of air, the atmosphere itself remained unaltered.",
"What, first of all, practically concerns producers when they make an exchange, is the question, how much of some other product they get for their own?",
"In what proportions the products are exchangeable?",
"When these proportions have, by custom, attained a certain stability, they appear to result from the nature of the products, so that, for instance, one ton of iron and two ounces of gold appear as naturally to be of equal value as a pound of gold and a pound of iron in spite of their different physical and chemical qualities appear to be of equal weight.",
"The character of having value, when once impressed upon products, obtains fixity only by reason of their acting and re-acting upon each other as quantities of value.",
"These quantities vary continually, independently of the will, foresight and action of the producers.",
"To them, their own social action takes the form of the action of objects, which rule the producers instead of being ruled by them.",
"It requires a fully developed production of commodities before, from accumulated experience alone, the scientific conviction springs up, that all the different kinds of private labour, which are carried on independently of each other, and yet as spontaneously developed branches of the social division of labour, are continually being reduced to the quantitative proportions in which society requires them.",
"And why?",
"Because, in the midst of all the accidental and ever fluctuating exchange relations between the products, the labour time socially necessary for their production forcibly asserts itself like an over-riding law of Nature.",
"The law of gravity thus asserts itself when a house falls about our ears.",
"The determination of the magnitude of value by labour time is therefore a secret, hidden under the apparent fluctuations in the relative values of commodities.",
"Its discovery, while removing all appearance of mere accidentality from the determination of the magnitude of the values of products, yet in no way alters the mode in which that determination takes place.",
"Man’s reflections on the forms of social life, and consequently, also, his scientific analysis of those forms, take a course directly opposite to that of their actual historical development.",
"He begins, post festum, with the results of the process of development ready to hand before him.",
"The characters that stamp products as commodities, and whose establishment is a necessary preliminary to the circulation of commodities, have already acquired the stability of natural, self-understood forms of social life, before man seeks to decipher, not their historical character, for in his eyes they are immutable, but their meaning.",
"Consequently it was the analysis of the prices of commodities that alone led to the determination of the magnitude of value, and it was the common expression of all commodities in money that alone led to the establishment of their characters as values.",
"It is, however, just this ultimate money form of the world of commodities that actually conceals, instead of disclosing, the social character of private labour, and the social relations between the individual producers.",
"When I state that coats or boots stand in a relation to linen, because it is the universal incarnation of abstract human labour, the absurdity of the statement is self-evident.",
"Nevertheless, when the producers of coats and boots compare those articles with linen, or, what is the same thing, with gold or silver, as the universal equivalent, they express the relation between their own private labour and the collective labour of society in the same absurd form.",
"The categories of bourgeois economy consist of such like forms.",
"They are forms of thought expressing with social validity the conditions and relations of a definite, historically determined mode of production, viz.",
"the production of commodities.",
"The whole mystery of commodities, all the magic and necromancy that surrounds the products of labour as long as they take the form of commodities, vanishes therefore, so soon as we come to other forms of production.",
"Since Robinson Crusoe’s experiences are a favourite theme with political economists,  let us take a look at him on his island.",
"Moderate though he be, yet some few wants he has to satisfy, and must therefore do a little useful work of various sorts, such as making tools and furniture, taming goats, fishing and hunting.",
"Of his prayers and the like we take no account, since they are a source of pleasure to him, and he looks upon them as so much recreation.",
"In spite of the variety of his work, he knows that his labour, whatever its form, is but the activity of one and the same Robinson, and consequently, that it consists of nothing but different modes of human labour.",
"Necessity itself compels him to apportion his time accurately between his different kinds of work.",
"Whether one kind occupies a greater space in his general activity than another, depends on the difficulties, greater or less as the case may be, to be overcome in attaining the useful effect aimed at.",
"This our friend Robinson soon learns by experience, and having rescued a watch, ledger, and pen and ink from the wreck, commences, like a true-born Briton, to keep a set of books.",
"His stock-book contains a list of the objects of utility that belong to him, of the operations necessary for their production; and lastly, of the labour time that definite quantities of those objects have, on an average, cost him.",
"All the relations between Robinson and the objects that form this wealth of his own creation, are here so simple and clear as to be intelligible without exertion, even to Mr.",
"Sedley Taylor.",
"And yet those relations contain all that is essential to the determination of value.",
"Let us now transport ourselves from Robinson’s island bathed in light to the European middle ages shrouded in darkness.",
"Here, instead of the independent man, we find everyone dependent, serfs and lords, vassals and suzerains, laymen and clergy.",
"Personal dependence here characterises the social relations of production just as much as it does the other spheres of life organised on the basis of that production.",
"But for the very reason that personal dependence forms the ground-work of society, there is no necessity for labour and its products to assume a fantastic form different from their reality.",
"They take the shape, in the transactions of society, of services in kind and payments in kind.",
"Here the particular and natural form of labour, and not, as in a society based on production of commodities, its general abstract form is the immediate social form of labour.",
"Compulsory labour is just as properly measured by time, as commodity-producing labour; but every serf knows that what he expends in the service of his lord, is a definite quantity of his own personal labour power.",
"The tithe to be rendered to the priest is more matter of fact than his blessing.",
"No matter, then, what we may think of the parts played by the different classes of people themselves in this society, the social relations between individuals in the performance of their labour, appear at all events as their own mutual personal relations, and are not disguised under the shape of social relations between the products of labour.",
"For an example of labour in common or directly associated labour, we have no occasion to go back to that spontaneously developed form which we find on the threshold of the history of all civilised races.",
"We have one close at hand in the patriarchal industries of a peasant family, that produces corn, cattle, yarn, linen, and clothing for home use.",
"These different articles are, as regards the family, so many products of its labour, but as between themselves, they are not commodities.",
"The different kinds of labour, such as tillage, cattle tending, spinning, weaving and making clothes, which result in the various products, are in themselves, and such as they are, direct social functions, because functions of the family, which, just as much as a society based on the production of commodities, possesses a spontaneously developed system of division of labour.",
"The distribution of the work within the family, and the regulation of the labour time of the several members, depend as well upon differences of age and sex as upon natural conditions varying with the seasons.",
"The labour power of each individual, by its very nature, operates in this case merely as a definite portion of the whole labour power of the family, and therefore, the measure of the expenditure of individual labour power by its duration, appears here by its very nature as a social character of their labour.",
"Let us now picture to ourselves, by way of change, a community of free individuals, carrying on their work with the means of production in common, in which the labour power of all the different individuals is consciously applied as the combined labour power of the community.",
"All the characteristics of Robinson’s labour are here repeated, but with this difference, that they are social, instead of individual.",
"Everything produced by him was exclusively the result of his own personal labour, and therefore simply an object of use for himself.",
"The total product of our community is a social product.",
"One portion serves as fresh means of production and remains social.",
"But another portion is consumed by the members as means of subsistence.",
"A distribution of this portion amongst them is consequently necessary.",
"The mode of this distribution will vary with the productive organisation of the community, and the degree of historical development attained by the producers.",
"We will assume, but merely for the sake of a parallel with the production of commodities, that the share of each individual producer in the means of subsistence is determined by his labour time.",
"Labour time would, in that case, play a double part.",
"Its apportionment in accordance with a definite social plan maintains the proper proportion between the different kinds of work to be done and the various wants of the community.",
"On the other hand, it also serves as a measure of the portion of the common labour borne by each individual, and of his share in the part of the total product destined for individual consumption.",
"The social relations of the individual producers, with regard both to their labour and to its products, are in this case perfectly simple and intelligible, and that with regard not only to production but also to distribution.",
"The religious world is but the reflex of the real world.",
"And for a society based upon the production of commodities, in which the producers in general enter into social relations with one another by treating their products as commodities and values, whereby they reduce their individual private labour to the standard of homogeneous human labour – for such a society, Christianity with its cultus of abstract man, more especially in its bourgeois developments, Protestantism, Deism, &c.",
"is the most fitting form of religion.",
"In the ancient Asiatic and other ancient modes of production, we find that the conversion of products into commodities, and therefore the conversion of men into producers of commodities, holds a subordinate place, which, however, increases in importance as the primitive communities approach nearer and nearer to their dissolution.",
"Trading nations, properly so called, exist in the ancient world only in its interstices, like the gods of Epicurus in the Intermundia, or like Jews in the pores of Polish society.",
"Those ancient social organisms of production are, as compared with bourgeois society, extremely simple and transparent.",
"But they are founded either on the immature development of man individually, who has not yet severed the umbilical cord that unites him with his fellowmen in a primitive tribal community, or upon direct relations of subjection.",
"They can arise and exist only when the development of the productive power of labour has not risen beyond a low stage, and when, therefore, the social relations within the sphere of material life, between man and man, and between man and Nature, are correspondingly narrow.",
"This narrowness is reflected in the ancient worship of Nature, and in the other elements of the popular religions.",
"The religious reflex of the real world can, in any case, only then finally vanish, when the practical relations of every-day life offer to man none but perfectly intelligible and reasonable relations with regard to his fellowmen and to Nature.",
"The life-process of society, which is based on the process of material production, does not strip off its mystical veil until it is treated as production by freely associated men, and is consciously regulated by them in accordance with a settled plan.",
"This, however, demands for society a certain material ground-work or set of conditions of existence which in their turn are the spontaneous product of a long and painful process of development.",
"Political Economy has indeed analysed, however incompletely,  value and its magnitude, and has discovered what lies beneath these forms.",
"But it has never once asked the question why labour is represented by the value of its product and labour time by the magnitude of that value.",
"These formulæ, which bear it stamped upon them in unmistakable letters that they belong to a state of society, in which the process of production has the mastery over man, instead of being controlled by him, such formulæ appear to the bourgeois intellect to be as much a self-evident necessity imposed by Nature as productive labour itself.",
"Hence forms of social production that preceded the bourgeois form, are treated by the bourgeoisie in much the same way as the Fathers of the Church treated pre-Christian religions.",
"To what extent some economists are misled by the Fetishism inherent in commodities, or by the objective appearance of the social characteristics of labour, is shown, amongst other ways, by the dull and tedious quarrel over the part played by Nature in the formation of exchange value.",
"Since exchange value is a definite social manner of expressing the amount of labour bestowed upon an object, Nature has no more to do with it, than it has in fixing the course of exchange.",
"The mode of production in which the product takes the form of a commodity, or is produced directly for exchange, is the most general and most embryonic form of bourgeois production.",
"It therefore makes its appearance at an early date in history, though not in the same predominating and characteristic manner as now-a-days.",
"Hence its Fetish character is comparatively easy to be seen through.",
"But when we come to more concrete forms, even this appearance of simplicity vanishes.",
"Whence arose the illusions of the monetary system?",
"To it gold and silver, when serving as money, did not represent a social relation between producers, but were natural objects with strange social properties.",
"And modern economy, which looks down with such disdain on the monetary system, does not its superstition come out as clear as noon-day, whenever it treats of capital?",
"How long is it since economy discarded the physiocratic illusion, that rents grow out of the soil and not out of society?",
"But not to anticipate, we will content ourselves with yet another example relating to the commodity form.",
"Could commodities themselves speak, they would say: Our use value may be a thing that interests men.",
"It is no part of us as objects.",
"What, however, does belong to us as objects, is our value.",
"Our natural intercourse as commodities proves it.",
"In the eyes of each other we are nothing but exchange values.",
"Now listen how those commodities speak through the mouth of the economist.",
"“Value” – (i.",
"exchange value) “is a property of things, riches” – (i.",
"use value) “of man.",
"Value, in this sense, necessarily implies exchanges, riches do not.",
"“Riches” (use value) “are the attribute of men, value is the attribute of commodities.",
"A man or a community is rich, a pearl or a diamond is valuable.",
"A pearl or a diamond is valuable as a pearl or a diamond.",
"So far no chemist has ever discovered exchange value either in a pearl or a diamond.",
"The economic discoverers of this chemical element, who by-the-bye lay special claim to critical acumen, find however that the use value of objects belongs to them independently of their material properties, while their value, on the other hand, forms a part of them as objects.",
"What confirms them in this view, is the peculiar circumstance that the use value of objects is realised without exchange, by means of a direct relation between the objects and man, while, on the other hand, their value is realised only by exchange, that is, by means of a social process.",
"Who fails here to call to mind our good friend, Dogberry, who informs neighbour Seacoal, that, “To be a well-favoured man is the gift of fortune; but reading and writing comes by Nature."]
},{}],7:[function(require,module,exports){
module.exports = ["access to tools",
"the height of privilege",
"trust no one",
"there is no authority but yourself",
"question everything",
"the truth is out there",
"i want to believe",
"may the force be with you",
"let us pray",
"zen and the art of website maintenance",
"bobbing for apples",
"diary of a monster",
"skittles and apocalyptic social movements"]
},{}],8:[function(require,module,exports){
module.exports = ["I remember when we broke up the first time",
"We hadn't seen each other in a month",
"When you said you needed space. (What?)",
"Then you come around again and say",
"Remember how that lasted for a day?",
"Ooh, we called it off again last night",
"But ooh, this time I'm telling you, I'm telling you",
"We are never ever ever getting back together,",
"You go talk to your friends, talk to my friends, talk to me",
"But we are never ever ever ever getting back together",
"Like, ever...",
"I'm really gonna miss you picking fights",
"And me falling for it screaming that I'm right",
"And you would hide away and find your peace of mind",
"With some indie record that's much cooler than mine",
"Ooh, you called me up again tonight",
"We are never, ever, ever getting back together",
"You go talk to your friends, talk to my friends, talk to me (talk to me)",
"Ooh, yeah, ooh yeah, ooh yeah",
"Oh oh oh",
"I used to think that we were forever ever",
"No!",
"We are never ever ever getting back together",
"We, ooh, getting back together, ohhh,",
"We, ooh, getting back together",
"It feels like a perfect night to dress up like hipsters",
"And make fun of our exes, uh uh, uh uh.",
"It feels like a perfect night for breakfast at midnight",
"To fall in love with strangers, uh uh, uh uh.",
"Yeah,",
"We're happy, free, confused, and lonely at the same time",
"It's miserable and magical.",
"Oh, yeah",
"Tonight's the night when we forget about the deadlines",
"It's time",
"Uh oh!",
"I don't know about you",
"But I'm feeling 22",
"Everything will be alright",
"If you keep me next to you",
"You don't know about me",
"But I'll bet you want to",
"If we just keep dancing like we're",
"22, ooh-ooh",
"It seems like one of those nights,",
"This place is too crowded.",
"Too many cool kids, uh uh, uh uh (who's Taylor Swift anyway, ew?)",
"We ditch the whole scene and end up dreaming",
"Instead of sleeping.",
"We're happy, free, confused, and lonely in the best way",
"Tonight's the night when we forget about the heartbreaks",
"Uh oh! (hey!)",
"Everything will be alright (alright)",
"22, ooh-ooh (oh, oh, oh)",
"It feels like one of those nights,",
"We ditch the whole scene.",
"We won't be sleeping.",
"You look like bad news.",
"I gotta have you,",
"I gotta have you.",
"Ooh-ooh",
"Ooh-ooh, ye-e-e-e-eah, hey",
"I don't know about you (I don't know about you)",
"You don't know about me (you don't know about me)",
"22, ooh-ooh, yeah, yeah",
"22, ooh-ooh, yeah, yeah, yeah",
"We ditch the whole scene",
"We won't be sleeping",
"You look like bad news,",
"Loving him is like driving a new Maserati down a dead-end street",
"Faster than the wind, passionate as sin, ending so suddenly",
"Loving him is like trying to change your mind once you're already flying through the free fall",
"Like the colors in autumn, so bright just before they lose it all",
"Losing him was blue like I'd never known",
"Missing him was dark grey all alone",
"Forgetting him was like trying to know somebody you never met",
"But loving him was red",
"Loving him was red",
"Touching him was like realizing all you ever wanted was right there in front of you",
"Memorizing him was as easy as knowing all the words to your old favorite song",
"Fighting with him was like trying to solve a crossword and realizing there's no right answer",
"Regretting him was like wishing you never found out that love could be that strong",
"Oh, red",
"Burning red",
"Remembering him comes in flashbacks and echoes",
"Tell myself it's time now, gotta let go",
"But moving on from him is impossible",
"When I still see it all in my head",
"In burning red",
"Burning, it was red",
"Oh, losing him was blue like I'd never known",
"'Cause loving him was red",
"Yeah, yeah, red",
"We're burning red",
"And that's why he's spinnin' 'round in my head",
"Comes back to me, burning red",
"Yeah, yeah",
"His love was like driving a new Maserati down a dead-end street",
"I think--I think when it's all over,",
"It just comes back in flashes, you know?",
"It's like a kaleidoscope of memories.",
"It just all comes back. But he never does.",
"I think part of me knew the second I saw him that this would happen.",
"It's not really anything he said or anything he did,",
"It was the feeling that came along with it.",
"And the crazy thing is I don't know if I'm ever gonna feel that way again.",
"But I don't know if I should.",
"I knew his world moved too fast and burned too bright.",
"But I just thought, how can the devil be pulling you toward someone who looks so much like an angel when he smiles at you?",
"Maybe he knew that when he saw me.",
"I guess I just lost my balance.",
"I think that the worst part of it all wasn't losing him.",
"It was losing me.",
"Once upon a time a few mistakes ago",
"I was in your sights, you got me alone",
"You found me, you found me, you found me",
"I guess you didn't care, and I guess I liked that",
"And when I fell hard you took a step back",
"Without me, without me, without me",
"And he's long gone when he's next to me",
"And I realize the blame is on me",
"'Cause I knew you were trouble when you walked in",
"So shame on me now",
"Flew me to places I'd never been",
"'Til you put me down, oh",
"I knew you were trouble when you walked in",
"Now I'm lying on the cold hard ground",
"Oh, oh, trouble, trouble, trouble",
"No apologies. He'll never see you cry,",
"Pretends he doesn't know that he's the reason why.",
"You're drowning, you're drowning, you're drowning.",
"Now I heard you moved on from whispers on the street",
"A new notch in your belt is all I'll ever be",
"And now I see, now I see, now I see",
"He was long gone when he met me",
"And I realize the joke is on me, yeah!",
"And the saddest fear comes creeping in",
"That you never loved me or her, or anyone, or anything, yeah",
"I knew you were trouble when you walked in (you were right there, you were right there)",
"Trouble, trouble, trouble",
"I stay out too late",
"Got nothing in my brain",
"That's what people say, mmm-mmm",
"But I can't make them stay",
"At least that's what people say, mmm-mmm",
"But I keep cruising",
"Can't stop, won't stop moving",
"It's like I got this music",
"In my mind",
"'Cause the players gonna play, play, play, play, play",
"And the haters gonna hate, hate, hate, hate, hate",
"Baby, I'm just gonna shake, shake, shake, shake, shake",
"I shake it off, I shake it off",
"Heart-breakers gonna break, break, break, break, break",
"And the fakers gonna fake, fake, fake, fake, fake",
"I never miss a beat",
"I'm lightning on my feet",
"And that's what they don't see, mmm-mmm",
"That's what they don't see, mmm-mmm",
"I'm dancing on my own (dancing on my own)",
"I make the moves up as I go (moves up as I go)",
"And that's what they don't know, mmm-mmm",
"That's what they don't know, mmm-mmm",
"Can't stop, won't stop grooving",
"Shake it off, I shake it off,",
"I, I, I shake it off, I shake it off,",
"I, I, I shake it off, I shake it off",
"Hey, hey, hey",
"Just think while you've been getting down and out about the liars and the dirty, dirty cheats of the world,",
"You could've been getting down to this sick beat.",
"My ex-man brought his new girlfriend",
"And to the fella over there with the hella good hair",
"Won't you come on over, baby? We can shake, shake, shake",
"Yeah ohhh",
"And the haters gonna hate, hate, hate, hate, hate (haters gonna hate)",
"I'm just gonna shake, shake, shake, shake, shake",
"Heart-breakers gonna break, break, break, break, break (mmmm)",
"And the fakers gonna fake, fake, fake, fake, fake (and fake, and fake, and fake)",
"I, I, I shake it off, I shake it off (you've got to),",
"'Cause, baby, now we got bad blood",
"You know it used to be mad love",
"So take a look what you've done",
"Hey",
"Now we got problems",
"And I don't think we can solve them",
"You made a really deep cut",
"And, baby, now we got bad blood",
"Did you have to do this? I was thinking that you could be trusted",
"Did you have to ruin what was shiny? Now it's all rusted",
"Did you have to hit me, where I'm weak? Baby, I couldn't breathe",
"And rub it in so deep, salt in the wound like you're laughing right at me",
"Oh, it's so sad to think about the good times, you and I",
"Did you think we'd be fine? Still got scars on my back from your knife",
"So don't think it's in the past, these kinda wounds they last and they last.",
"Now did you think it all through? All these things will catch up to you",
"And time can heal but this won't, so if you're coming my way, just don't",
"Band-aids don't fix bullet holes",
"You say sorry just for show",
"If you live like that, you live with ghosts (ghosts)",
"Band-aids don't fix bullet holes (hey)",
"You say sorry just for show (hey)",
"If you live like that, you live with ghosts (hey)",
"If you love like that blood runs cold",
"You know it used to be mad love (mad love)",
"And I don't think we can solve them (think we can solve them)",
"(Hey)",
"So take a look what you've done (look what you've done)",
"Midnight,",
"You come and pick me up, no headlights",
"A long drive,",
"Could end in burning flames or paradise",
"Fade into view, oh, it's been a while since I have even heard from you (heard from you)",
"I should just tell you to leave 'cause I",
"Know exactly where it leads but I",
"Watch us go 'round and 'round each time",
"You got that James Dean daydream look in your eye",
"And I got that red lip classic thing that you like",
"And when we go crashing down, we come back every time",
"'Cause we never go out of style",
"We never go out of style",
"You got that long hair, slicked back, white t-shirt",
"And I got that good girl faith and a tight little skirt",
"We never go out of style.",
"So it goes",
"He can't keep his wild eyes on the road",
"Takes me home",
"Lights are off, he's taking off his coat, hmm, yeah.",
"'Cause you got that James Dean daydream look in your eye",
"And I got that good girl faith and a tight little skirt (tight little skirt)",
"Take me home",
"Just take me home, yeah.",
"Just take me home",
"(out of style)",
"I was reminiscing just the other day,",
"While having coffee all alone and Lord, it took me away.",
"Back to a first-glance feeling on New York Time.",
"Back when you fit in my poems like a perfect rhyme.",
"Yeah, you skipped the conversation when you already know.",
"I left a note on the door with a joke we’d made,",
"And that was the first day.",
"And darling, it was good never looking down.",
"And right there where we stood was holy ground.",
"Spinning like a girl in a brand new dress,",
"We had this big wide city all to ourselves.",
"We blocked the noise with the sound of ‘I need you’,",
"And for the first time I had something to lose,",
"And I guess we fell apart in the usual way.",
"And the story’s got dust on every page,",
"But sometimes I wonder how you think about it now.",
"And I see your face in every crowd.",
"Cause darling, it was good never looking down.",
"Tonight I’m gonna dance for all that we’ve been through.",
"But I don’t wanna dance if I’m not dancing with you.",
"Tonight I’m gonna dance like you were in this room.",
"But I don’t wanna dance if I’m not dancing with you,",
"It was good never looking down.",
"I still remember the look on your face",
"Lit through the darkness at 1:58",
"The words that you whispered",
"For just us to know",
"You told me you loved me",
"So why did you go away?",
"Away",
"I do recall now the smell of the rain",
"Fresh on the pavement",
"I ran off the plane",
"That July 9th",
"The beat of your heart",
"It jumps through your shirt",
"I can still feel your arms",
"But now I'll go sit on the floor",
"Wearing your clothes",
"All that I know is",
"I don't know how to be something you miss",
"I never thought we'd have a last kiss",
"Never imagined we'd end like this",
"Your name, forever the name on my lips",
"I do remember the swing of your step",
"The life of the party, you're showing off again",
"And I roll my eyes and then",
"You pull me in",
"I'm not much for dancing",
"But for you I did",
"Because I love your handshake, meeting my father",
"I love how you walk with your hands in your pockets",
"How you kissed me when I was in the middle of saying something",
"There's not a day I don't miss those rude interruptions",
"And I'll go sit on the floor",
"Never thought we'd have a last kiss",
"So I'll watch your life in pictures like I used to watch you sleep",
"And I feel you forget me like I used to feel you breathe",
"And I keep up with our old friends just to ask them how you are",
"Hope it's nice where you are",
"And I hope the sun shines",
"And it's a beautiful day",
"And something reminds you",
"You wish you had stayed",
"You can plan for a change in weather and time",
"But I never planned on you changing your mind",
"So I'll go sit on the floor",
"Just like our last kiss",
"Forever the name on my lips",
"Just like our last...",
"You're on the phone with your girlfriend",
"She's upset, she's going off about something that you said",
"'Cause she doesn't get your humor like I do.",
"I'm in the room, it's a typical Tuesday night.",
"I'm listening to the kind of music she doesn't like.",
"And she'll never know your story like I do.",
"But she wears short skirts",
"I wear t-shirts",
"She's cheer captain",
"And I'm on the bleachers",
"Dreaming about the day when you wake up and find",
"That what you're looking for has been here the whole time.",
"If you could see",
"That I'm the one",
"Who understands you.",
"Been here all along.",
"So, why can't you see",
"You belong with me,",
"You belong with me.",
"Walk in the streets with you in your worn out jeans",
"I can't help thinking this is how it ought to be.",
"Laughing on a park bench thinking to myself,",
"And you've got a smile",
"That could light up this whole town.",
"I haven't seen it in a while",
"Since she brought you down.",
"You say you're fine I know you better than that.",
"Hey, what you doing with a girl like that?",
"She wears high heels,",
"I wear sneakers.",
"She's cheer captain,",
"And I'm on the bleachers.",
"Who understands you,",
"Standing by and waiting at your backdoor.",
"All this time how could you not know, baby?",
"[Instrumental]",
"Oh, I remember you driving to my house",
"In the middle of the night.",
"I'm the one who makes you laugh",
"When you know you're 'bout to cry.",
"I know your favorite songs,",
"And you tell me about your dreams.",
"Think I know where you belong,",
"Think I know it's with me.",
"Can't you see",
"Who understands you?",
"Have you ever thought just maybe",
"You belong with me?",
"Nice to meet you, where you been?",
"I could show you incredible things",
"Magic, madness, heaven, sin",
"Saw you there and I thought",
"Oh my God, look at that face",
"You look like my next mistake",
"Love's a game, wanna play?",
"New money, suit and tie",
"I can read you like a magazine",
"Ain't it funny, rumors fly",
"And I know you heard about me",
"So hey, let's be friends",
"I'm dying to see how this one ends",
"Grab your passport and my hand",
"I can make the bad guys good for a weekend",
"So it's gonna be forever",
"Or it's gonna go down in flames",
"You can tell me when it's over",
"If the high was worth the pain",
"Got a long list of ex-lovers",
"They'll tell you I'm insane",
"'Cause you know I love the players",
"And you love the game",
"'Cause we're young and we're reckless",
"We'll take this way too far",
"It'll leave you breathless",
"Or with a nasty scar",
"But I've got a blank space, baby",
"And I'll write your name",
"Cherry lips, crystal skies",
"Stolen kisses, pretty lies",
"You're the King, baby, I'm your Queen",
"Find out what you want",
"Be that girl for a month",
"Wait, the worst is yet to come, oh no",
"Screaming, crying, perfect storms",
"I can make all the tables turn",
"Rose garden filled with thorns",
"Keep you second guessing like",
"I get drunk on jealousy",
"But you'll come back each time you leave",
"'Cause, darling, I'm a nightmare dressed like a daydream",
"Boys only want love if it's torture",
"Don't say I didn't say, I didn't warn ya",
"You stand with your hand on my waist line",
"It's a scene and we're out here in plain sight",
"I can hear them whisper as we pass by",
"It's a bad sign, bad sign",
"Something happens when everybody finds out",
"See the vultures circling dark clouds",
"Love's a fragile little flame, it could burn out",
"It could burn out",
"Cause they got the cages, they got the boxes",
"And guns",
"They are the hunters, we are the foxes",
"And we run",
"Baby, I know places we won't be found",
"And they'll be chasing their tails tryin' to track us down",
"Cause I, I know places we can hide",
"I know places, I know places",
"Lights flash and we'll run for the fences",
"Let them say what they want, we won't hear it",
"Loose lips sink ships all the damn time",
"Not this time",
"Just grab my hand and don't ever drop it",
"My love",
"I know places",
"They take their shots, but we're bulletproof",
"And you know for me, it's always you",
"In the dead of night, your eyes so green",
"And I know for you, it's always me"]
},{}],9:[function(require,module,exports){

var makeSubtitle = require('./subtitle')
var pick = require('pick-random')
module.exports = function () {
    var coverPage = document.createElement('section')
    coverPage.className = 'cover page'
    var title = document.createElement('div')
    title.className = 'cover--title'
    title.textContent = 'THE NULL EARTH CATALOG'
    coverPage.appendChild(title)
    var subtitle = document.createElement('div')
    subtitle.className = 'cover--subtitle'
    subtitle.textContent = makeSubtitle()
    coverPage.appendChild(subtitle)

    var earths =    [
        "./imgs/earth_from_space/PROC-earth from space0.jpg",
        "./imgs/earth_from_space/PROC-earth from space1.jpg",
        "./imgs/earth_from_space/PROC-earth from space11.png",
        "./imgs/earth_from_space/PROC-earth from space12.jpg",
        "./imgs/earth_from_space/PROC-earth from space13.jpg",
        "./imgs/earth_from_space/PROC-earth from space14.jpg",
        "./imgs/earth_from_space/PROC-earth from space15.jpg",
        "./imgs/earth_from_space/PROC-earth from space16.jpg",
        "./imgs/earth_from_space/PROC-earth from space17.jpg",
        "./imgs/earth_from_space/PROC-earth from space18.jpg",
        "./imgs/earth_from_space/PROC-earth from space19.jpg",
        "./imgs/earth_from_space/PROC-earth from space2.jpg",
        "./imgs/earth_from_space/PROC-earth from space20.jpg",
        "./imgs/earth_from_space/PROC-earth from space21.jpg",
        "./imgs/earth_from_space/PROC-earth from space22.jpg",
        "./imgs/earth_from_space/PROC-earth from space23.jpg",
        "./imgs/earth_from_space/PROC-earth from space24.jpg",
        "./imgs/earth_from_space/PROC-earth from space3.jpg",
        "./imgs/earth_from_space/PROC-earth from space4.jpg",
        "./imgs/earth_from_space/PROC-earth from space5.jpg",
        "./imgs/earth_from_space/PROC-earth from space6.jpg",
        "./imgs/earth_from_space/PROC-earth from space7.jpg",
        "./imgs/earth_from_space/PROC-earth from space8.jpg",
        "./imgs/earth_from_space/PROC-earth from space9.jpg",
        "./imgs/earth_from_space/demo.jpg"
      ]
    var imgPath = pick(earths)[0]
    var theEarth = document.createElement('img')
    theEarth.className = 'cover--img'
    theEarth.src = imgPath
    coverPage.appendChild(theEarth)

    var season = pick(['SUMMER', 'FALL', 'WINTER', 'SPRING', 'PRE-WINTER', 'POST-SUMMER', 'EARLY-SPRING', 'TRUST FALLS'])[0]
    var a = (Math.random() < 0.66) ? '1' : '2'
    var b = (a == '2') ? '0' : ((Math.random() < 0.8) ? '9' : ~~(Math.random() * 10))
    var c = (a == '2') ? ((Math.random() < 0.6) ? 0 : 1) : ~~(Math.random() * 10)
    var d = ~~(Math.random() * 10)
    var year = a + b + c + d
    var edition = document.createElement('div')
    edition.className = 'cover--edition'
    edition.textContent = season + ', ' + year
    coverPage.appendChild(edition)
    return coverPage
}
},{"./subtitle":59,"pick-random":32}],10:[function(require,module,exports){
module.exports = [
  [
    "./imgs/ableton_live/PROC-ableton live1.jpg",
    "./imgs/ableton_live/PROC-ableton live2.png",
    "./imgs/ableton_live/PROC-ableton live4.png",
    "./imgs/ableton_live/PROC-ableton live6.jpg",
    "./imgs/ableton_live/PROC-ableton live8.png"
  ],
  [
    "./imgs/airplane_emergency_diagram/PROC-airplane emergency diagram0.jpg",
    "./imgs/airplane_emergency_diagram/PROC-airplane emergency diagram1.jpg",
    "./imgs/airplane_emergency_diagram/PROC-airplane emergency diagram2.jpg",
    "./imgs/airplane_emergency_diagram/PROC-airplane emergency diagram4.jpg",
    "./imgs/airplane_emergency_diagram/PROC-airplane emergency diagram5.jpg",
    "./imgs/airplane_emergency_diagram/PROC-airplane emergency diagram6.jpg",
    "./imgs/airplane_emergency_diagram/PROC-airplane emergency diagram7.jpg",
    "./imgs/airplane_emergency_diagram/PROC-airplane emergency diagram8.jpg",
    "./imgs/airplane_emergency_diagram/PROC-airplane emergency diagram9.jpg"
  ],
  [
    "./imgs/baking_tips/PROC-baking tips0.jpg",
    "./imgs/baking_tips/PROC-baking tips2.jpg",
    "./imgs/baking_tips/PROC-baking tips3.jpg",
    "./imgs/baking_tips/PROC-baking tips4.jpg",
    "./imgs/baking_tips/PROC-baking tips5.jpg",
    "./imgs/baking_tips/PROC-baking tips6.jpg",
    "./imgs/baking_tips/PROC-baking tips8.jpg",
    "./imgs/baking_tips/PROC-baking tips9.jpg"
  ],
  [
    "./imgs/band_camp/PROC-band camp3.jpg",
    "./imgs/band_camp/PROC-band camp4.jpg",
    "./imgs/band_camp/PROC-band camp5.png",
    "./imgs/band_camp/PROC-band camp6.png",
    "./imgs/band_camp/PROC-band camp7.png",
    "./imgs/band_camp/PROC-band camp8.png"
  ],
  [
    "./imgs/bicycle_repair/PROC-bicycle repair5.jpg",
    "./imgs/bicycle_repair/PROC-bicycle repair6.jpg",
    "./imgs/bicycle_repair/PROC-bicycle repair7.jpg",
    "./imgs/bicycle_repair/PROC-bicycle repair8.jpg",
    "./imgs/bicycle_repair/PROC-bicycle repair9.png"
  ],
  [
    "./imgs/boombox_manual/PROC-boombox manual0.jpg",
    "./imgs/boombox_manual/PROC-boombox manual1.jpg",
    "./imgs/boombox_manual/PROC-boombox manual2.jpg",
    "./imgs/boombox_manual/PROC-boombox manual3.jpg",
    "./imgs/boombox_manual/PROC-boombox manual4.jpg",
    "./imgs/boombox_manual/PROC-boombox manual5.jpg",
    "./imgs/boombox_manual/PROC-boombox manual6.jpg",
    "./imgs/boombox_manual/PROC-boombox manual7.jpg",
    "./imgs/boombox_manual/PROC-boombox manual8.jpg",
    "./imgs/boombox_manual/PROC-boombox manual9.jpg"
  ],
  [
    "./imgs/buckminster_fuller_domes/PROC-buckminster fuller domes0.jpg",
    "./imgs/buckminster_fuller_domes/PROC-buckminster fuller domes1.jpg",
    "./imgs/buckminster_fuller_domes/PROC-buckminster fuller domes2.jpg",
    "./imgs/buckminster_fuller_domes/PROC-buckminster fuller domes3.jpg",
    "./imgs/buckminster_fuller_domes/PROC-buckminster fuller domes4.jpg",
    "./imgs/buckminster_fuller_domes/PROC-buckminster fuller domes5.jpg",
    "./imgs/buckminster_fuller_domes/PROC-buckminster fuller domes6.jpg",
    "./imgs/buckminster_fuller_domes/PROC-buckminster fuller domes7.jpg",
    "./imgs/buckminster_fuller_domes/PROC-buckminster fuller domes8.jpg",
    "./imgs/buckminster_fuller_domes/PROC-buckminster fuller domes9.jpg"
  ],
  [
    "./imgs/car_engine/PROC-car engine0.png",
    "./imgs/car_engine/PROC-car engine1.jpg",
    "./imgs/car_engine/PROC-car engine2.jpg",
    "./imgs/car_engine/PROC-car engine3.jpg",
    "./imgs/car_engine/PROC-car engine4.jpg",
    "./imgs/car_engine/PROC-car engine5.jpg",
    "./imgs/car_engine/PROC-car engine6.jpg",
    "./imgs/car_engine/PROC-car engine7.jpg",
    "./imgs/car_engine/PROC-car engine8.jpg"
  ],
  [
    "./imgs/circuit_bending/PROC-circuit bending0.jpg",
    "./imgs/circuit_bending/PROC-circuit bending2.jpg",
    "./imgs/circuit_bending/PROC-circuit bending3.jpg",
    "./imgs/circuit_bending/PROC-circuit bending4.jpg",
    "./imgs/circuit_bending/PROC-circuit bending5.jpg",
    "./imgs/circuit_bending/PROC-circuit bending8.jpg"
  ],
  [
    "./imgs/clocks_and_watches/PROC-clocks and watches0.jpg",
    "./imgs/clocks_and_watches/PROC-clocks and watches1.jpg",
    "./imgs/clocks_and_watches/PROC-clocks and watches2.jpg",
    "./imgs/clocks_and_watches/PROC-clocks and watches3.jpg",
    "./imgs/clocks_and_watches/PROC-clocks and watches4.jpg",
    "./imgs/clocks_and_watches/PROC-clocks and watches5.jpg",
    "./imgs/clocks_and_watches/PROC-clocks and watches6.jpg",
    "./imgs/clocks_and_watches/PROC-clocks and watches7.jpg",
    "./imgs/clocks_and_watches/PROC-clocks and watches8.jpg",
    "./imgs/clocks_and_watches/PROC-clocks and watches9.jpg"
  ],
  [
    "./imgs/cnn/PROC-cnn5.jpg",
    "./imgs/cnn/PROC-cnn7.jpg",
    "./imgs/cnn/PROC-cnn9.jpg"
  ],
  [
    "./imgs/color_by_number/PROC-color by number0.jpg",
    "./imgs/color_by_number/PROC-color by number1.jpg",
    "./imgs/color_by_number/PROC-color by number2.png",
    "./imgs/color_by_number/PROC-color by number3.jpg",
    "./imgs/color_by_number/PROC-color by number5.jpg",
    "./imgs/color_by_number/PROC-color by number6.jpg",
    "./imgs/color_by_number/PROC-color by number7.jpg",
    "./imgs/color_by_number/PROC-color by number8.jpg",
    "./imgs/color_by_number/PROC-color by number9.jpg"
  ],
  [
    "./imgs/cowboy_techniques/PROC-cowboy techniques0.jpg",
    "./imgs/cowboy_techniques/PROC-cowboy techniques1.jpg",
    "./imgs/cowboy_techniques/PROC-cowboy techniques2.jpg",
    "./imgs/cowboy_techniques/PROC-cowboy techniques3.jpg",
    "./imgs/cowboy_techniques/PROC-cowboy techniques4.jpg",
    "./imgs/cowboy_techniques/PROC-cowboy techniques5.jpg",
    "./imgs/cowboy_techniques/PROC-cowboy techniques6.jpg",
    "./imgs/cowboy_techniques/PROC-cowboy techniques7.jpg",
    "./imgs/cowboy_techniques/PROC-cowboy techniques9.jpg"
  ],
  [
    "./imgs/crass/PROC-crass0.png",
    "./imgs/crass/PROC-crass2.jpg",
    "./imgs/crass/PROC-crass4.png",
    "./imgs/crass/PROC-crass6.jpg",
    "./imgs/crass/PROC-crass8.jpg"
  ],
  [
    "./imgs/dadaist_poem/PROC-dadaist poem0.jpg",
    "./imgs/dadaist_poem/PROC-dadaist poem1.jpg",
    "./imgs/dadaist_poem/PROC-dadaist poem2.jpg",
    "./imgs/dadaist_poem/PROC-dadaist poem3.jpg",
    "./imgs/dadaist_poem/PROC-dadaist poem4.jpg",
    "./imgs/dadaist_poem/PROC-dadaist poem5.jpg",
    "./imgs/dadaist_poem/PROC-dadaist poem6.jpg",
    "./imgs/dadaist_poem/PROC-dadaist poem7.jpg",
    "./imgs/dadaist_poem/PROC-dadaist poem9.jpg"
  ],
  [
    "./imgs/diablo_two/PROC-diablo two2.jpg",
    "./imgs/diablo_two/PROC-diablo two3.jpg",
    "./imgs/diablo_two/PROC-diablo two5.jpg",
    "./imgs/diablo_two/PROC-diablo two6.png",
    "./imgs/diablo_two/PROC-diablo two7.jpg",
    "./imgs/diablo_two/PROC-diablo two8.jpg"
  ],

  [
    "./imgs/emacs/PROC-emacs0.png",
    "./imgs/emacs/PROC-emacs2.png",
    "./imgs/emacs/PROC-emacs4.png",
    "./imgs/emacs/PROC-emacs6.png",
    "./imgs/emacs/PROC-emacs8.png"
  ],
  [
    "./imgs/facebook_ui_failure/PROC-facebook ui failure2.png",
    "./imgs/facebook_ui_failure/PROC-facebook ui failure3.jpg",
    "./imgs/facebook_ui_failure/PROC-facebook ui failure4.jpg",
    "./imgs/facebook_ui_failure/PROC-facebook ui failure5.jpg",
    "./imgs/facebook_ui_failure/PROC-facebook ui failure6.jpg",
    "./imgs/facebook_ui_failure/PROC-facebook ui failure7.jpg",
    "./imgs/facebook_ui_failure/PROC-facebook ui failure8.jpg",
    "./imgs/facebook_ui_failure/PROC-facebook ui failure9.jpg"
  ],
  [
    "./imgs/farming_tactics/PROC-farming tactics0.jpg",
    "./imgs/farming_tactics/PROC-farming tactics1.jpg",
    "./imgs/farming_tactics/PROC-farming tactics2.jpg",
    "./imgs/farming_tactics/PROC-farming tactics3.jpg",
    "./imgs/farming_tactics/PROC-farming tactics4.jpg",
    "./imgs/farming_tactics/PROC-farming tactics5.jpg",
    "./imgs/farming_tactics/PROC-farming tactics6.jpg",
    "./imgs/farming_tactics/PROC-farming tactics7.jpg",
    "./imgs/farming_tactics/PROC-farming tactics8.jpg",
    "./imgs/farming_tactics/PROC-farming tactics9.jpg"
  ],
  [
    "./imgs/fashion/PROC-fashion0.jpg",
    "./imgs/fashion/PROC-fashion1.jpg",
    "./imgs/fashion/PROC-fashion2.jpg",
    "./imgs/fashion/PROC-fashion3.png",
    "./imgs/fashion/PROC-fashion4.png",
    "./imgs/fashion/PROC-fashion5.png",
    "./imgs/fashion/PROC-fashion6.png",
    "./imgs/fashion/PROC-fashion7.png",
    "./imgs/fashion/PROC-fashion8.jpg",
    "./imgs/fashion/PROC-fashion9.jpg"
  ],
  [
    "./imgs/final_fantasy_seven_fight/PROC-final fantasy seven fight1.jpg",
    "./imgs/final_fantasy_seven_fight/PROC-final fantasy seven fight2.jpg",
    "./imgs/final_fantasy_seven_fight/PROC-final fantasy seven fight7.jpg",
    "./imgs/final_fantasy_seven_fight/PROC-final fantasy seven fight9.jpg"
  ],
  [
    "./imgs/ghostbusters_marshmallow/PROC-ghostbusters marshmallow0.jpg",
    "./imgs/ghostbusters_marshmallow/PROC-ghostbusters marshmallow2.jpg",
    "./imgs/ghostbusters_marshmallow/PROC-ghostbusters marshmallow4.jpg",
    "./imgs/ghostbusters_marshmallow/PROC-ghostbusters marshmallow8.jpg"
  ],
  [
    "./imgs/goosebumps/PROC-goosebumps0.jpg",
    "./imgs/goosebumps/PROC-goosebumps1.jpg"
  ],
  [
    "./imgs/guitar_lessons/PROC-guitar lessons1.png",
    "./imgs/guitar_lessons/PROC-guitar lessons2.png",
    "./imgs/guitar_lessons/PROC-guitar lessons3.png",
    "./imgs/guitar_lessons/PROC-guitar lessons4.png",
    "./imgs/guitar_lessons/PROC-guitar lessons7.jpg"
  ],
  [
    "./imgs/hockey_stick_graphs/PROC-hockey stick graphs0.jpg",
    "./imgs/hockey_stick_graphs/PROC-hockey stick graphs1.jpg",
    "./imgs/hockey_stick_graphs/PROC-hockey stick graphs2.jpeg",
    "./imgs/hockey_stick_graphs/PROC-hockey stick graphs4.jpg",
    "./imgs/hockey_stick_graphs/PROC-hockey stick graphs5.jpg",
    "./imgs/hockey_stick_graphs/PROC-hockey stick graphs8.png",
    "./imgs/hockey_stick_graphs/PROC-hockey stick graphs9.jpg"
  ],
  [
    "./imgs/how_to_fish/PROC-how to fish0.png",
    "./imgs/how_to_fish/PROC-how to fish1.png",
    "./imgs/how_to_fish/PROC-how to fish2.jpg",
    "./imgs/how_to_fish/PROC-how to fish3.png",
    "./imgs/how_to_fish/PROC-how to fish4.png",
    "./imgs/how_to_fish/PROC-how to fish8.jpg",
    "./imgs/how_to_fish/PROC-how to fish9.jpg"
  ],
  [
    "./imgs/how_to_set_a_table/PROC-how to set a table0.png",
    "./imgs/how_to_set_a_table/PROC-how to set a table1.png",
    "./imgs/how_to_set_a_table/PROC-how to set a table2.png",
    "./imgs/how_to_set_a_table/PROC-how to set a table3.png",
    "./imgs/how_to_set_a_table/PROC-how to set a table4.png",
    "./imgs/how_to_set_a_table/PROC-how to set a table5.png",
    "./imgs/how_to_set_a_table/PROC-how to set a table8.png",
    "./imgs/how_to_set_a_table/PROC-how to set a table9.png"
  ],
  [
    "./imgs/huge_bongs/PROC-huge bongs0.jpg",
    "./imgs/huge_bongs/PROC-huge bongs2.jpg",
    "./imgs/huge_bongs/PROC-huge bongs4.jpg",
    "./imgs/huge_bongs/PROC-huge bongs9.jpg"
  ],
  [
    "./imgs/javascript/PROC-javascript1.png",
    "./imgs/javascript/PROC-javascript2.jpg",
    "./imgs/javascript/PROC-javascript3.jpg",
    "./imgs/javascript/PROC-javascript4.jpg",
    "./imgs/javascript/PROC-javascript5.jpg",
    "./imgs/javascript/PROC-javascript6.jpg",
    "./imgs/javascript/PROC-javascript7.png",
    "./imgs/javascript/PROC-javascript8.png",
    "./imgs/javascript/PROC-javascript9.png"
  ],
  [
    "./imgs/kardashians/PROC-kardashians7.jpg",
    "./imgs/kardashians/PROC-kardashians8.jpg"
  ],
  [
    "./imgs/katamari_damacy/PROC-katamari damacy2.jpg",
    "./imgs/katamari_damacy/PROC-katamari damacy4.jpg",
    "./imgs/katamari_damacy/PROC-katamari damacy6.jpg",
    "./imgs/katamari_damacy/PROC-katamari damacy7.jpg",
    "./imgs/katamari_damacy/PROC-katamari damacy9.jpg"
  ],
  [
    "./imgs/kingdom_hearts/PROC-kingdom hearts4.png",
    "./imgs/kingdom_hearts/PROC-kingdom hearts6.png",
    "./imgs/kingdom_hearts/PROC-kingdom hearts8.png",
    "./imgs/kingdom_hearts/PROC-kingdom hearts9.jpg"
  ],
  [
    "./imgs/magic_the_gathering/PROC-magic the gathering0.jpg",
    "./imgs/magic_the_gathering/PROC-magic the gathering1.jpg",
    "./imgs/magic_the_gathering/PROC-magic the gathering2.jpg",
    "./imgs/magic_the_gathering/PROC-magic the gathering6.jpg",
    "./imgs/magic_the_gathering/PROC-magic the gathering7.jpg",
    "./imgs/magic_the_gathering/PROC-magic the gathering8.jpg",
    "./imgs/magic_the_gathering/PROC-magic the gathering9.jpg"
  ],
  [
    "./imgs/make_up_tips/PROC-make up tips0.jpg",
    "./imgs/make_up_tips/PROC-make up tips1.jpg",
    "./imgs/make_up_tips/PROC-make up tips2.jpg",
    "./imgs/make_up_tips/PROC-make up tips3.jpg",
    "./imgs/make_up_tips/PROC-make up tips4.jpg",
    "./imgs/make_up_tips/PROC-make up tips5.jpg",
    "./imgs/make_up_tips/PROC-make up tips6.jpg",
    "./imgs/make_up_tips/PROC-make up tips7.jpg",
    "./imgs/make_up_tips/PROC-make up tips8.jpg",
    "./imgs/make_up_tips/PROC-make up tips9.jpg"
  ],
  [
    "./imgs/marcel_duchamp_readymades/PROC-marcel duchamp readymades0.jpg",
    "./imgs/marcel_duchamp_readymades/PROC-marcel duchamp readymades1.png",
    "./imgs/marcel_duchamp_readymades/PROC-marcel duchamp readymades2.jpg",
    "./imgs/marcel_duchamp_readymades/PROC-marcel duchamp readymades3.jpg",
    "./imgs/marcel_duchamp_readymades/PROC-marcel duchamp readymades4.png",
    "./imgs/marcel_duchamp_readymades/PROC-marcel duchamp readymades5.png",
    "./imgs/marcel_duchamp_readymades/PROC-marcel duchamp readymades6.jpg",
    "./imgs/marcel_duchamp_readymades/PROC-marcel duchamp readymades7.jpg",
    "./imgs/marcel_duchamp_readymades/PROC-marcel duchamp readymades8.jpg",
    "./imgs/marcel_duchamp_readymades/PROC-marcel duchamp readymades9.jpg"
  ],
  [
    "./imgs/mathematics/PROC-mathematics0.jpg",
    "./imgs/mathematics/PROC-mathematics1.jpg",
    "./imgs/mathematics/PROC-mathematics2.jpg",
    "./imgs/mathematics/PROC-mathematics4.jpg",
    "./imgs/mathematics/PROC-mathematics5.jpg",
    "./imgs/mathematics/PROC-mathematics6.jpg",
    "./imgs/mathematics/PROC-mathematics7.jpg",
    "./imgs/mathematics/PROC-mathematics8.jpg",
    "./imgs/mathematics/PROC-mathematics9.jpg"
  ],
  [
    "./imgs/modular_synthesizers/PROC-modular synthesizers0.jpg",
    "./imgs/modular_synthesizers/PROC-modular synthesizers1.jpg",
    "./imgs/modular_synthesizers/PROC-modular synthesizers2.jpg",
    "./imgs/modular_synthesizers/PROC-modular synthesizers4.jpg",
    "./imgs/modular_synthesizers/PROC-modular synthesizers6.jpg",
    "./imgs/modular_synthesizers/PROC-modular synthesizers7.jpg",
    "./imgs/modular_synthesizers/PROC-modular synthesizers8.jpg",
    "./imgs/modular_synthesizers/PROC-modular synthesizers9.jpg"
  ],
  [
    "./imgs/nba_jam_on_fire/PROC-nba jam on fire1.jpg",
    "./imgs/nba_jam_on_fire/PROC-nba jam on fire3.jpg",
    "./imgs/nba_jam_on_fire/PROC-nba jam on fire4.jpg",
    "./imgs/nba_jam_on_fire/PROC-nba jam on fire5.jpg",
    "./imgs/nba_jam_on_fire/PROC-nba jam on fire6.jpg",
    "./imgs/nba_jam_on_fire/PROC-nba jam on fire7.jpg",
    "./imgs/nba_jam_on_fire/PROC-nba jam on fire8.jpg"
  ],
  [
    "./imgs/philosophers/PROC-philosophers0.jpg",
    "./imgs/philosophers/PROC-philosophers1.jpg",
    "./imgs/philosophers/PROC-philosophers2.jpg",
    "./imgs/philosophers/PROC-philosophers3.jpg",
    "./imgs/philosophers/PROC-philosophers4.jpg",
    "./imgs/philosophers/PROC-philosophers5.jpg",
    "./imgs/philosophers/PROC-philosophers6.jpg",
    "./imgs/philosophers/PROC-philosophers7.jpg",
    "./imgs/philosophers/PROC-philosophers8.jpg",
    "./imgs/philosophers/PROC-philosophers9.jpg"
  ],
  [
    "./imgs/pokemon_blue/PROC-pokemon blue0.jpg",
    "./imgs/pokemon_blue/PROC-pokemon blue1.jpg",
    "./imgs/pokemon_blue/PROC-pokemon blue2.jpg",
    "./imgs/pokemon_blue/PROC-pokemon blue3.jpg",
    "./imgs/pokemon_blue/PROC-pokemon blue4.jpg",
    "./imgs/pokemon_blue/PROC-pokemon blue5.jpg",
    "./imgs/pokemon_blue/PROC-pokemon blue6.jpg",
    "./imgs/pokemon_blue/PROC-pokemon blue7.jpg",
    "./imgs/pokemon_blue/PROC-pokemon blue8.jpg",
    "./imgs/pokemon_blue/PROC-pokemon blue9.png"
  ],
  [
    "./imgs/power_rangers_megazord/PROC-power rangers megazord0.jpg",
    "./imgs/power_rangers_megazord/PROC-power rangers megazord1.jpg",
    "./imgs/power_rangers_megazord/PROC-power rangers megazord2.jpg",
    "./imgs/power_rangers_megazord/PROC-power rangers megazord3.jpg",
    "./imgs/power_rangers_megazord/PROC-power rangers megazord4.jpg",
    "./imgs/power_rangers_megazord/PROC-power rangers megazord5.jpg",
    "./imgs/power_rangers_megazord/PROC-power rangers megazord6.jpg",
    "./imgs/power_rangers_megazord/PROC-power rangers megazord7.jpg",
    "./imgs/power_rangers_megazord/PROC-power rangers megazord8.jpg",
    "./imgs/power_rangers_megazord/PROC-power rangers megazord9.jpg"
  ],
  [
    "./imgs/rez_ps2/PROC-rez ps22.jpg"
  ],
  [
    "./imgs/richard_serra_sculptures/PROC-richard serra sculptures0.jpg",
    "./imgs/richard_serra_sculptures/PROC-richard serra sculptures1.jpg",
    "./imgs/richard_serra_sculptures/PROC-richard serra sculptures2.jpg",
    "./imgs/richard_serra_sculptures/PROC-richard serra sculptures3.jpg",
    "./imgs/richard_serra_sculptures/PROC-richard serra sculptures4.jpg",
    "./imgs/richard_serra_sculptures/PROC-richard serra sculptures5.jpg",
    "./imgs/richard_serra_sculptures/PROC-richard serra sculptures6.jpg",
    "./imgs/richard_serra_sculptures/PROC-richard serra sculptures7.jpg",
    "./imgs/richard_serra_sculptures/PROC-richard serra sculptures8.jpg",
    "./imgs/richard_serra_sculptures/PROC-richard serra sculptures9.jpg"
  ],
  [
    "./imgs/science_fiction_art/PROC-science fiction art0.jpg",
    "./imgs/science_fiction_art/PROC-science fiction art1.jpg",
    "./imgs/science_fiction_art/PROC-science fiction art2.jpg",
    "./imgs/science_fiction_art/PROC-science fiction art3.jpg",
    "./imgs/science_fiction_art/PROC-science fiction art4.jpg",
    "./imgs/science_fiction_art/PROC-science fiction art5.jpg",
    "./imgs/science_fiction_art/PROC-science fiction art6.jpg",
    "./imgs/science_fiction_art/PROC-science fiction art7.jpg",
    "./imgs/science_fiction_art/PROC-science fiction art8.jpg",
    "./imgs/science_fiction_art/PROC-science fiction art9.jpg"
  ],
  [
    "./imgs/snorkeling_safety/PROC-snorkeling safety0.png",
    "./imgs/snorkeling_safety/PROC-snorkeling safety1.jpg",
    "./imgs/snorkeling_safety/PROC-snorkeling safety4.jpg",
    "./imgs/snorkeling_safety/PROC-snorkeling safety5.jpg",
    "./imgs/snorkeling_safety/PROC-snorkeling safety6.jpg",
    "./imgs/snorkeling_safety/PROC-snorkeling safety7.jpg",
    "./imgs/snorkeling_safety/PROC-snorkeling safety8.jpg",
    "./imgs/snorkeling_safety/PROC-snorkeling safety9.jpg"
  ],
  [
    "./imgs/sol_lewitt_wall_drawings/PROC-sol lewitt wall drawings0.jpg",
    "./imgs/sol_lewitt_wall_drawings/PROC-sol lewitt wall drawings1.jpg",
    "./imgs/sol_lewitt_wall_drawings/PROC-sol lewitt wall drawings2.jpg",
    "./imgs/sol_lewitt_wall_drawings/PROC-sol lewitt wall drawings3.jpg",
    "./imgs/sol_lewitt_wall_drawings/PROC-sol lewitt wall drawings4.jpg",
    "./imgs/sol_lewitt_wall_drawings/PROC-sol lewitt wall drawings5.jpg",
    "./imgs/sol_lewitt_wall_drawings/PROC-sol lewitt wall drawings6.jpg",
    "./imgs/sol_lewitt_wall_drawings/PROC-sol lewitt wall drawings7.jpg",
    "./imgs/sol_lewitt_wall_drawings/PROC-sol lewitt wall drawings8.jpg",
    "./imgs/sol_lewitt_wall_drawings/PROC-sol lewitt wall drawings9.jpg"
  ],
  [
    "./imgs/sp_505_sampler/PROC-sp 505 sampler0.jpg",
    "./imgs/sp_505_sampler/PROC-sp 505 sampler1.jpg",
    "./imgs/sp_505_sampler/PROC-sp 505 sampler2.jpg",
    "./imgs/sp_505_sampler/PROC-sp 505 sampler3.jpg",
    "./imgs/sp_505_sampler/PROC-sp 505 sampler4.jpg",
    "./imgs/sp_505_sampler/PROC-sp 505 sampler5.jpg",
    "./imgs/sp_505_sampler/PROC-sp 505 sampler6.jpg",
    "./imgs/sp_505_sampler/PROC-sp 505 sampler7.jpg",
    "./imgs/sp_505_sampler/PROC-sp 505 sampler8.jpg",
    "./imgs/sp_505_sampler/PROC-sp 505 sampler9.jpg"
  ],
  [
    "./imgs/star_wars/PROC-star wars3.jpg",
    "./imgs/star_wars/PROC-star wars7.jpg",
    "./imgs/star_wars/PROC-star wars8.jpg"
  ],
  [
    "./imgs/superhero/PROC-superhero0.png",
    "./imgs/superhero/PROC-superhero6.jpg",
    "./imgs/superhero/PROC-superhero7.jpg",
    "./imgs/superhero/PROC-superhero8.jpg",
    "./imgs/superhero/PROC-superhero9.jpg"
  ],
  [
    "./imgs/swimming_with_dolphins/PROC-swimming with dolphins0.jpg",
    "./imgs/swimming_with_dolphins/PROC-swimming with dolphins1.jpg",
    "./imgs/swimming_with_dolphins/PROC-swimming with dolphins2.jpg",
    "./imgs/swimming_with_dolphins/PROC-swimming with dolphins3.jpg",
    "./imgs/swimming_with_dolphins/PROC-swimming with dolphins4.jpg",
    "./imgs/swimming_with_dolphins/PROC-swimming with dolphins5.jpg",
    "./imgs/swimming_with_dolphins/PROC-swimming with dolphins6.jpg",
    "./imgs/swimming_with_dolphins/PROC-swimming with dolphins7.jpg",
    "./imgs/swimming_with_dolphins/PROC-swimming with dolphins8.jpg",
    "./imgs/swimming_with_dolphins/PROC-swimming with dolphins9.jpg"
  ],
  [
    "./imgs/toejam_and_earl/PROC-toejam and earl0.jpg",
    "./imgs/toejam_and_earl/PROC-toejam and earl1.png",
    "./imgs/toejam_and_earl/PROC-toejam and earl2.png",
    "./imgs/toejam_and_earl/PROC-toejam and earl3.png",
    "./imgs/toejam_and_earl/PROC-toejam and earl4.jpeg",
    "./imgs/toejam_and_earl/PROC-toejam and earl5.jpeg",
    "./imgs/toejam_and_earl/PROC-toejam and earl6.png",
    "./imgs/toejam_and_earl/PROC-toejam and earl7.png",
    "./imgs/toejam_and_earl/PROC-toejam and earl8.png",
    "./imgs/toejam_and_earl/PROC-toejam and earl9.png"
  ],
  [
    "./imgs/tofu_recipe/PROC-tofu recipe0.jpg",
    "./imgs/tofu_recipe/PROC-tofu recipe1.jpg",
    "./imgs/tofu_recipe/PROC-tofu recipe2.jpg",
    "./imgs/tofu_recipe/PROC-tofu recipe4.jpg",
    "./imgs/tofu_recipe/PROC-tofu recipe5.jpg",
    "./imgs/tofu_recipe/PROC-tofu recipe7.jpg",
    "./imgs/tofu_recipe/PROC-tofu recipe8.jpg",
    "./imgs/tofu_recipe/PROC-tofu recipe9.jpg"
  ],
  [
    "./imgs/transformer_faces/PROC-transformer faces0.jpg",
    "./imgs/transformer_faces/PROC-transformer faces1.jpg",
    "./imgs/transformer_faces/PROC-transformer faces4.jpg",
    "./imgs/transformer_faces/PROC-transformer faces5.jpg",
    "./imgs/transformer_faces/PROC-transformer faces6.jpg",
    "./imgs/transformer_faces/PROC-transformer faces7.jpg",
    "./imgs/transformer_faces/PROC-transformer faces8.jpg"
  ],
  [
    "./imgs/worst_google_doodles/PROC-worst google doodles3.jpg",
    "./imgs/worst_google_doodles/PROC-worst google doodles4.jpg",
    "./imgs/worst_google_doodles/PROC-worst google doodles6.jpg",
    "./imgs/worst_google_doodles/PROC-worst google doodles7.jpg",
    "./imgs/worst_google_doodles/PROC-worst google doodles9.jpg"
  ]
]
},{}],11:[function(require,module,exports){
var catalog = document.createElement('div')
catalog.className = 'catalog'
var section = require('./section')
var topics = require('./toc')()
var uses = require('./uses')()


var pick = require('pick-random')
var imageMap = require('./imageMap')



var coverPage = require('./coverPage')()
catalog.appendChild(coverPage)

var tocPage = require('./tocPage')(topics)
catalog.appendChild(tocPage)

var usePage = require('./usePage')(uses)
catalog.appendChild(usePage)





// var sections = topics.forEach(function (topic, i) {
//   catalog.appendChild(section(topic, i + 1, topics))
// })

// make index? glossary? closing page?



document.body.appendChild(catalog)

},{"./coverPage":9,"./imageMap":10,"./section":58,"./toc":60,"./tocPage":61,"./usePage":62,"./uses":63,"pick-random":32}],12:[function(require,module,exports){
var q = require('queneau-buckets')()


var texts = require('./corpuses/TOC')
.concat(require('./corpuses/subtitles'))
.concat(require('./corpuses/marx'))
.concat(require('./corpuses/ts1989'))
q.seed(texts)

module.exports = function () {
  return [q.fill(5 + (~~Math.random() * 7)),
  q.fill(5 + (~~Math.random() * 12)),
  q.fill(5 + (~~Math.random() * 18)),
  q.fill(5 + (~~Math.random() * 15)),
  q.fill(5 + (~~Math.random() * 12)),
  q.fill(5 + (~~Math.random() * 7)),
  q.fill(5 + (~~Math.random() * 3))].join('. ')
}

},{"./corpuses/TOC":5,"./corpuses/marx":6,"./corpuses/subtitles":7,"./corpuses/ts1989":8,"queneau-buckets":35}],13:[function(require,module,exports){
(function (Buffer){
var EventEmitter = require('events').EventEmitter;
var deck = require('deck');
var Lazy = require('lazy');
var Hash = require('hashish');

module.exports = function (order) {
    if (!order) order = 2;
    var db = {};
    var self = {};
    
    self.seed = function (seed, cb) {
        if (seed instanceof EventEmitter) {
            Lazy(seed).lines.forEach(self.seed);
            
            if (cb) {
                seed.on('error', cb);
                seed.on('end', cb);
            }
        }
        else {
            var text = (Buffer.isBuffer(seed) ? seed.toString() : seed)
            var words = text.split(/\s+/);
            var links = [];
            
            for (var i = 0; i < words.length; i += order) {
                var link = words.slice(i, i + order).join(' ');
                links.push(link);
            }
            
            if (links.length <= 1) {
                if (cb) cb(null);
                return;
            }
            
            for (var i = 1; i < links.length; i++) {
                var word = links[i-1];
                var cword = clean(word);
                var next = links[i];
                var cnext = clean(next);
                
                var node = Hash.has(db, cword)
                    ? db[cword]
                    : {
                        count : 0,
                        words : {},
                        next : {},
                        prev : {},
                    }
                ;
                db[cword] = node;
                
                node.count ++;
                node.words[word] = (
                    Hash.has(node.words, word) ? node.words[word] : 0
                ) + 1;
                node.next[cnext] = (
                    Hash.has(node.next, cnext) ? node.next[cnext] : 0
                ) + 1
                if (i > 1) {
                    var prev = clean(links[i-2]);
                    node.prev[prev] = (
                        Hash.has(node.prev, prev) ? node.prev[prev] : 0
                    ) + 1;
                }
                else {
                    node.prev[''] = (node.prev[''] || 0) + 1;
                }
            }
            
            if (!Hash.has(db, cnext)) db[cnext] = {
                count : 1,
                words : {},
                next : { '' : 0 },
                prev : {},
            };
            var n = db[cnext];
            n.words[next] = (Hash.has(n.words, next) ? n.words[next] : 0) + 1;
            n.prev[cword] = (Hash.has(n.prev, cword) ? n.prev[cword] : 0) + 1;
            n.next[''] = (n.next[''] || 0) + 1;
            
            if (cb) cb(null);
        }
    };
    
    self.search = function (text) {
        var words = text.split(/\s+/);
        
        // find a starting point...
        var start = null;
        var groups = {};
        for (var i = 0; i < words.length; i += order) {
            var word = clean(words.slice(i, i + order).join(' '));
            if (Hash.has(db, word)) groups[word] = db[word].count;
        }
        
        return deck.pick(groups);
    };
    
    self.pick = function () {
        return deck.pick(Object.keys(db))
    };
    
    self.next = function (cur) {
        if (!cur || !db[cur]) return undefined;
        
        var next = deck.pick(db[cur].next);
        return next && {
            key : next,
            word : deck.pick(db[next].words),
        } || undefined;
    };
    
    self.prev = function (cur) {
        if (!cur || !db[cur]) return undefined;
        
        var prev = deck.pick(db[cur].prev);
        return prev && {
            key : prev,
            word : deck.pick(db[prev].words),
        } || undefined;
    };
    
    self.forward = function (cur, limit) {
        var res = [];
        while (cur && !limit || res.length < limit) {
            var next = self.next(cur);
            if (!next) break;
            cur = next.key;
            res.push(next.word);
        }
        
        return res;
    };
    
    self.backward = function (cur, limit) {
        var res = [];
        while (cur && !limit || res.length < limit) {
            var prev = self.prev(cur);
            if (!prev) break;
            cur = prev.key;
            res.unshift(prev.word);
        }
        
        return res;
    };
    
    self.fill = function (cur, limit) {
        var res = [ deck.pick(db[cur].words) ];
        if (!res[0]) return [];
        if (limit && res.length >= limit) return res;;
        
        var pcur = cur;
        var ncur = cur;
        
        while (pcur || ncur) {
            if (pcur) {
                var prev = self.prev(pcur);
                pcur = null;
                if (prev) {
                    pcur = prev.key;
                    res.unshift(prev.word);
                    if (limit && res.length >= limit) break;
                }
            }
            
            if (ncur) {
                var next = self.next(ncur);
                ncur = null;
                if (next) {
                    ncur = next.key;
                    res.push(next.word);
                    if (limit && res.length >= limit) break;
                }
            }
        }
        
        return res;
    };
    
    self.respond = function (text, limit) {
        var cur = self.search(text) || self.pick();
        return self.fill(cur, limit);
    };
    
    self.word = function (cur) {
        return db[cur] && deck.pick(db[cur].words);
    };
    
    return self;
};

function clean (s) {
    return s
        .toLowerCase()
        .replace(/[^a-z\d]+/g, '_')
        .replace(/^_/, '')
        .replace(/_$/, '')
    ;
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":27,"deck":14,"events":23,"hashish":15,"lazy":17}],14:[function(require,module,exports){
var exports = module.exports = function (xs) {
    if (typeof xs !== 'object') { // of which Arrays are
        throw new TypeError('Must be an Array or an object');
    }
    
    return Object.keys(exports).reduce(function (acc, name) {
        acc[name] = exports[name].bind(null, xs);
        return acc;
    }, {});
};

exports.shuffle = function (xs) {
    if (Array.isArray(xs)) {
        // uniform shuffle
        var res = xs.slice();
        for (var i = res.length - 1; i >= 0; i--) {
            var n = Math.floor(Math.random() * i);
            var t = res[i];
            res[i] = res[n];
            res[n] = t;
        }
        return res;
    }
    else if (typeof xs === 'object') {
        // weighted shuffle
        var weights = Object.keys(xs).reduce(function (acc, key) {
            acc[key] = xs[key];
            return acc;
        }, {});
        
        var ret = [];
        
        while (Object.keys(weights).length > 0) {
            var key = exports.pick(weights);
            delete weights[key];
            ret.push(key);
        }
        
        return ret;
    }
    else {
        throw new TypeError('Must be an Array or an object');
    }
};

exports.pick = function (xs) {
    if (Array.isArray(xs)) {
        // uniform sample
        return xs[Math.floor(Math.random() * xs.length)];
    }
    else if (typeof xs === 'object') {
        // weighted sample
        var weights = exports.normalize(xs);
        if (!weights) return undefined;
        
        var n = Math.random();
        var threshold = 0;
        var keys = Object.keys(weights);
        
        for (var i = 0; i < keys.length; i++) {
            threshold += weights[keys[i]];
            if (n < threshold) return keys[i];
        }
        throw new Error('Exceeded threshold. Something is very wrong.');
    }
    else {
        throw new TypeError('Must be an Array or an object');
    }
};

exports.normalize = function (weights) {
    if (typeof weights !== 'object' || Array.isArray(weights)) {
        throw 'Not an object'
    }
    
    var keys = Object.keys(weights);
    if (keys.length === 0) return undefined;
    
    var total = keys.reduce(function (sum, key) {
        var x = weights[key];
        if (x < 0) {
            throw new Error('Negative weight encountered at key ' + key);
        }
        else if (typeof x !== 'number') {
            throw new TypeError('Number expected, got ' + typeof x);
        }
        else {
            return sum + x;
        }
    }, 0);
    
    return total === 1
        ? weights
        : keys.reduce(function (acc, key) {
            acc[key] = weights[key] / total;
            return acc;
        }, {})
    ;
};

},{}],15:[function(require,module,exports){
module.exports = Hash;
var Traverse = require('traverse');

function Hash (hash, xs) {
    if (Array.isArray(hash) && Array.isArray(xs)) {
        var to = Math.min(hash.length, xs.length);
        var acc = {};
        for (var i = 0; i < to; i++) {
            acc[hash[i]] = xs[i];
        }
        return Hash(acc);
    }
    
    if (hash === undefined) return Hash({});
    
    var self = {
        map : function (f) {
            var acc = { __proto__ : hash.__proto__ };
            Object.keys(hash).forEach(function (key) {
                acc[key] = f.call(self, hash[key], key);
            });
            return Hash(acc);
        },
        forEach : function (f) {
            Object.keys(hash).forEach(function (key) {
                f.call(self, hash[key], key);
            });
            return self;
        },
        filter : function (f) {
            var acc = { __proto__ : hash.__proto__ };
            Object.keys(hash).forEach(function (key) {
                if (f.call(self, hash[key], key)) {
                    acc[key] = hash[key];
                }
            });
            return Hash(acc);
        },
        detect : function (f) {
            for (var key in hash) {
                if (f.call(self, hash[key], key)) {
                    return hash[key];
                }
            }
            return undefined;
        },
        reduce : function (f, acc) {
            var keys = Object.keys(hash);
            if (acc === undefined) acc = keys.shift();
            keys.forEach(function (key) {
                acc = f.call(self, acc, hash[key], key);
            });
            return acc;
        },
        some : function (f) {
            for (var key in hash) {
                if (f.call(self, hash[key], key)) return true;
            }
            return false;
        },
        update : function (obj) {
            if (arguments.length > 1) {
                self.updateAll([].slice.call(arguments));
            }
            else {
                Object.keys(obj).forEach(function (key) {
                    hash[key] = obj[key];
                });
            }
            return self;
        },
        updateAll : function (xs) {
            xs.filter(Boolean).forEach(function (x) {
                self.update(x);
            });
            return self;
        },
        merge : function (obj) {
            if (arguments.length > 1) {
                return self.copy.updateAll([].slice.call(arguments));
            }
            else {
                return self.copy.update(obj);
            }
        },
        mergeAll : function (xs) {
            return self.copy.updateAll(xs);
        },
        has : function (key) { // only operates on enumerables
            return Array.isArray(key)
                ? key.every(function (k) { return self.has(k) })
                : self.keys.indexOf(key.toString()) >= 0;
        },
        valuesAt : function (keys) {
            return Array.isArray(keys)
                ? keys.map(function (key) { return hash[key] })
                : hash[keys]
            ;
        },
        tap : function (f) {
            f.call(self, hash);
            return self;
        },
        extract : function (keys) {
            var acc = {};
            keys.forEach(function (key) {
                acc[key] = hash[key];
            });
            return Hash(acc);
        },
        exclude : function (keys) {
            return self.filter(function (_, key) {
                return keys.indexOf(key) < 0
            });
        },
        end : hash,
        items : hash
    };
    
    var props = {
        keys : function () { return Object.keys(hash) },
        values : function () {
            return Object.keys(hash).map(function (key) { return hash[key] });
        },
        compact : function () {
            return self.filter(function (x) { return x !== undefined });
        },
        clone : function () { return Hash(Hash.clone(hash)) },
        copy : function () { return Hash(Hash.copy(hash)) },
        length : function () { return Object.keys(hash).length },
        size : function () { return self.length }
    };
    
    if (Object.defineProperty) {
        // es5-shim has an Object.defineProperty but it throws for getters
        try {
            for (var key in props) {
                Object.defineProperty(self, key, { get : props[key] });
            }
        }
        catch (err) {
            for (var key in props) {
                if (key !== 'clone' && key !== 'copy' && key !== 'compact') {
                    // ^ those keys use Hash() so can't call them without
                    // a stack overflow
                    self[key] = props[key]();
                }
            }
        }
    }
    else if (self.__defineGetter__) {
        for (var key in props) {
            self.__defineGetter__(key, props[key]);
        }
    }
    else {
        // non-lazy version for browsers that suck >_<
        for (var key in props) {
            self[key] = props[key]();
        }
    }
    
    return self;
};

// deep copy
Hash.clone = function (ref) {
    return Traverse.clone(ref);
};

// shallow copy
Hash.copy = function (ref) {
    var hash = { __proto__ : ref.__proto__ };
    Object.keys(ref).forEach(function (key) {
        hash[key] = ref[key];
    });
    return hash;
};

Hash.map = function (ref, f) {
    return Hash(ref).map(f).items;
};

Hash.forEach = function (ref, f) {
    Hash(ref).forEach(f);
};

Hash.filter = function (ref, f) {
    return Hash(ref).filter(f).items;
};

Hash.detect = function (ref, f) {
    return Hash(ref).detect(f);
};

Hash.reduce = function (ref, f, acc) {
    return Hash(ref).reduce(f, acc);
};

Hash.some = function (ref, f) {
    return Hash(ref).some(f);
};

Hash.update = function (a /*, b, c, ... */) {
    var args = Array.prototype.slice.call(arguments, 1);
    var hash = Hash(a);
    return hash.update.apply(hash, args).items;
};

Hash.merge = function (a /*, b, c, ... */) {
    var args = Array.prototype.slice.call(arguments, 1);
    var hash = Hash(a);
    return hash.merge.apply(hash, args).items;
};

Hash.has = function (ref, key) {
    return Hash(ref).has(key);
};

Hash.valuesAt = function (ref, keys) {
    return Hash(ref).valuesAt(keys);
};

Hash.tap = function (ref, f) {
    return Hash(ref).tap(f).items;
};

Hash.extract = function (ref, keys) {
    return Hash(ref).extract(keys).items;
};

Hash.exclude = function (ref, keys) {
    return Hash(ref).exclude(keys).items;
};

Hash.concat = function (xs) {
    var hash = Hash({});
    xs.forEach(function (x) { hash.update(x) });
    return hash.items;
};

Hash.zip = function (xs, ys) {
    return Hash(xs, ys).items;
};

// .length is already defined for function prototypes
Hash.size = function (ref) {
    return Hash(ref).size;
};

Hash.compact = function (ref) {
    return Hash(ref).compact.items;
};

},{"traverse":16}],16:[function(require,module,exports){
var traverse = module.exports = function (obj) {
    return new Traverse(obj);
};

function Traverse (obj) {
    this.value = obj;
}

Traverse.prototype.get = function (ps) {
    var node = this.value;
    for (var i = 0; i < ps.length; i ++) {
        var key = ps[i];
        if (!node || !hasOwnProperty.call(node, key)) {
            node = undefined;
            break;
        }
        node = node[key];
    }
    return node;
};

Traverse.prototype.has = function (ps) {
    var node = this.value;
    for (var i = 0; i < ps.length; i ++) {
        var key = ps[i];
        if (!node || !hasOwnProperty.call(node, key)) {
            return false;
        }
        node = node[key];
    }
    return true;
};

Traverse.prototype.set = function (ps, value) {
    var node = this.value;
    for (var i = 0; i < ps.length - 1; i ++) {
        var key = ps[i];
        if (!hasOwnProperty.call(node, key)) node[key] = {};
        node = node[key];
    }
    node[ps[i]] = value;
    return value;
};

Traverse.prototype.map = function (cb) {
    return walk(this.value, cb, true);
};

Traverse.prototype.forEach = function (cb) {
    this.value = walk(this.value, cb, false);
    return this.value;
};

Traverse.prototype.reduce = function (cb, init) {
    var skip = arguments.length === 1;
    var acc = skip ? this.value : init;
    this.forEach(function (x) {
        if (!this.isRoot || !skip) {
            acc = cb.call(this, acc, x);
        }
    });
    return acc;
};

Traverse.prototype.paths = function () {
    var acc = [];
    this.forEach(function (x) {
        acc.push(this.path); 
    });
    return acc;
};

Traverse.prototype.nodes = function () {
    var acc = [];
    this.forEach(function (x) {
        acc.push(this.node);
    });
    return acc;
};

Traverse.prototype.clone = function () {
    var parents = [], nodes = [];
    
    return (function clone (src) {
        for (var i = 0; i < parents.length; i++) {
            if (parents[i] === src) {
                return nodes[i];
            }
        }
        
        if (typeof src === 'object' && src !== null) {
            var dst = copy(src);
            
            parents.push(src);
            nodes.push(dst);
            
            forEach(objectKeys(src), function (key) {
                dst[key] = clone(src[key]);
            });
            
            parents.pop();
            nodes.pop();
            return dst;
        }
        else {
            return src;
        }
    })(this.value);
};

function walk (root, cb, immutable) {
    var path = [];
    var parents = [];
    var alive = true;
    
    return (function walker (node_) {
        var node = immutable ? copy(node_) : node_;
        var modifiers = {};
        
        var keepGoing = true;
        
        var state = {
            node : node,
            node_ : node_,
            path : [].concat(path),
            parent : parents[parents.length - 1],
            parents : parents,
            key : path.slice(-1)[0],
            isRoot : path.length === 0,
            level : path.length,
            circular : null,
            update : function (x, stopHere) {
                if (!state.isRoot) {
                    state.parent.node[state.key] = x;
                }
                state.node = x;
                if (stopHere) keepGoing = false;
            },
            'delete' : function (stopHere) {
                delete state.parent.node[state.key];
                if (stopHere) keepGoing = false;
            },
            remove : function (stopHere) {
                if (isArray(state.parent.node)) {
                    state.parent.node.splice(state.key, 1);
                }
                else {
                    delete state.parent.node[state.key];
                }
                if (stopHere) keepGoing = false;
            },
            keys : null,
            before : function (f) { modifiers.before = f },
            after : function (f) { modifiers.after = f },
            pre : function (f) { modifiers.pre = f },
            post : function (f) { modifiers.post = f },
            stop : function () { alive = false },
            block : function () { keepGoing = false }
        };
        
        if (!alive) return state;
        
        function updateState() {
            if (typeof state.node === 'object' && state.node !== null) {
                if (!state.keys || state.node_ !== state.node) {
                    state.keys = objectKeys(state.node)
                }
                
                state.isLeaf = state.keys.length == 0;
                
                for (var i = 0; i < parents.length; i++) {
                    if (parents[i].node_ === node_) {
                        state.circular = parents[i];
                        break;
                    }
                }
            }
            else {
                state.isLeaf = true;
                state.keys = null;
            }
            
            state.notLeaf = !state.isLeaf;
            state.notRoot = !state.isRoot;
        }
        
        updateState();
        
        // use return values to update if defined
        var ret = cb.call(state, state.node);
        if (ret !== undefined && state.update) state.update(ret);
        
        if (modifiers.before) modifiers.before.call(state, state.node);
        
        if (!keepGoing) return state;
        
        if (typeof state.node == 'object'
        && state.node !== null && !state.circular) {
            parents.push(state);
            
            updateState();
            
            forEach(state.keys, function (key, i) {
                path.push(key);
                
                if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);
                
                var child = walker(state.node[key]);
                if (immutable && hasOwnProperty.call(state.node, key)) {
                    state.node[key] = child.node;
                }
                
                child.isLast = i == state.keys.length - 1;
                child.isFirst = i == 0;
                
                if (modifiers.post) modifiers.post.call(state, child);
                
                path.pop();
            });
            parents.pop();
        }
        
        if (modifiers.after) modifiers.after.call(state, state.node);
        
        return state;
    })(root).node;
}

function copy (src) {
    if (typeof src === 'object' && src !== null) {
        var dst;
        
        if (isArray(src)) {
            dst = [];
        }
        else if (isDate(src)) {
            dst = new Date(src.getTime ? src.getTime() : src);
        }
        else if (isRegExp(src)) {
            dst = new RegExp(src);
        }
        else if (isError(src)) {
            dst = { message: src.message };
        }
        else if (isBoolean(src)) {
            dst = new Boolean(src);
        }
        else if (isNumber(src)) {
            dst = new Number(src);
        }
        else if (isString(src)) {
            dst = new String(src);
        }
        else if (Object.create && Object.getPrototypeOf) {
            dst = Object.create(Object.getPrototypeOf(src));
        }
        else if (src.constructor === Object) {
            dst = {};
        }
        else {
            var proto =
                (src.constructor && src.constructor.prototype)
                || src.__proto__
                || {}
            ;
            var T = function () {};
            T.prototype = proto;
            dst = new T;
        }
        
        forEach(objectKeys(src), function (key) {
            dst[key] = src[key];
        });
        return dst;
    }
    else return src;
}

var objectKeys = Object.keys || function keys (obj) {
    var res = [];
    for (var key in obj) res.push(key)
    return res;
};

function toS (obj) { return Object.prototype.toString.call(obj) }
function isDate (obj) { return toS(obj) === '[object Date]' }
function isRegExp (obj) { return toS(obj) === '[object RegExp]' }
function isError (obj) { return toS(obj) === '[object Error]' }
function isBoolean (obj) { return toS(obj) === '[object Boolean]' }
function isNumber (obj) { return toS(obj) === '[object Number]' }
function isString (obj) { return toS(obj) === '[object String]' }

var isArray = Array.isArray || function isArray (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

forEach(objectKeys(Traverse.prototype), function (key) {
    traverse[key] = function (obj) {
        var args = [].slice.call(arguments, 1);
        var t = new Traverse(obj);
        return t[key].apply(t, args);
    };
});

var hasOwnProperty = Object.hasOwnProperty || function (obj, key) {
    return key in obj;
};

},{}],17:[function(require,module,exports){
(function (process,Buffer){
var EventEmitter = require('events').EventEmitter;
var util = require('util');
var stream = require('stream');

function Lazy(em, opts) {
    if (!(this instanceof Lazy)) return new Lazy(em, opts);
    EventEmitter.call(this);
    var self = this;


    self.once = function (name, f) {
        self.on(name, function g () {
            self.removeListener(name, g);
            f.apply(this, arguments);
        });
    }

    if (!opts) opts = {};
    var dataName = opts.data || 'data';
    var pipeName = opts.pipe || 'pipe';
    var endName = opts.pipe || 'end';

    if (pipeName != endName) {
        var piped = false;
        self.once(pipeName, function () { piped = true });
        self.once(endName, function () {
            if (!piped) self.emit(pipeName);
        });
    }

    self.push = function (x) {
        self.emit(dataName, x);
    }

    self.end = function () {
        self.emit(endName);
    }

    if (em && em.on) {
        em.on(endName, function () {
            self.emit(endName);
        });
        self.on(pipeName, function () {
            em.emit(pipeName);
        });
        // Check for v0.10 or Greater (Stream2 has Duplex type)
        if (stream.Duplex && em instanceof(stream)) {
            em.on('readable', function () {
                var x = em.read();
                self.emit(dataName, x);
            });
        } else {
            // Old Stream1 or Event support
            em.on(dataName, function (x) {
                self.emit(dataName, x);
            });
        }
    }

    function newLazy (g, h, l) {
        if (!g) {
            g = function () {
                return true;
            };
        }
        if (!h) {
            h = function (x) {
                return x;
            };
        }
        var lazy = new Lazy(null, opts, l);
        self.on(dataName, function (x, y) {
            if (g.call(lazy, x)) {
                lazy.emit(dataName, h(x), y);
            }
        });
        self.once(pipeName, function () {
            lazy.emit(pipeName);
        });
        return lazy;
    }

    self.filter = function (f) {
        return newLazy(function (x) {
            return f(x);
        });
    }

    self.forEach = function (f) {
        return newLazy(function (x) {
            f(x);
            return true;
        });
    }

    self.map = function (f) {
        return newLazy(
            function () { return true },
            function (x) { return f(x) }
        );
    }

    self.head = function (f) {
        var lazy = newLazy();
        lazy.on(dataName, function g (x) {
            f(x)
            lazy.removeListener(dataName, g)
        })
    }

    self.tail = function () {
        var skip = true;
        return newLazy(function () {
            if (skip) {
                skip = false;
                return false;
            }
            return true;
        });
    }

    self.skip = function (n) {
        return newLazy(function () {
            if (n > 0) {
                n--;
                return false;
            }
            return true;
        });
    }

    self.take = function (n) {
        return newLazy(function () {
            if (n == 0) self.emit(pipeName);
            return n-- > 0;
        });
    }

    self.takeWhile = function (f) {
        var cond = true;
        return newLazy(function (x) {
            if (cond && f(x)) return true;
            cond = false;
            self.emit(pipeName);
            return false;
        });
    }

    self.foldr = function (op, i, f) {
        var acc = i;
        var lazy = newLazy();
        lazy.on(dataName, function g (x) {
            acc = op(x, acc);
        });
        lazy.once(pipeName, function () {
            f(acc);
        });
    }

    self.sum = function (f) {
        return self.foldr(function (x, acc) { return x + acc }, 0, f);
    }

    self.product = function (f) {
        return self.foldr(function (x, acc) { return x*acc }, 1, f);
    }

    self.join = function (f) {
        var data = []
        var lazy = newLazy(function (x) {
            data.push(x);
            return true;
        });
        lazy.once(pipeName, function () { f(data) });
        return self;
    }

    self.bucket = function (init, f) {
        var lazy = new Lazy(null, opts);
        var yieldTo = function (x) {
            lazy.emit(dataName, x);
        };

        var acc = init;

        self.on(dataName, function (x) {
            acc = f.call(yieldTo, acc, x);
        });

        self.once(pipeName, function () {
            lazy.emit(pipeName);
        });

        // flush on end event
        self.once(endName, function () {
            var finalBuffer = mergeBuffers(acc);
            if (finalBuffer) {
                yieldTo(finalBuffer);
            }
        });

        return lazy;
    }

    // Streams that use this should emit strings or buffers only
    self.__defineGetter__('lines', function () {
        return self.bucket([], function (chunkArray, chunk) {
            var newline = '\n'.charCodeAt(0), lastNewLineIndex = 0;
            if (typeof chunk === 'string') chunk = new Buffer(chunk);
        if (chunk){
            	for (var i = 0; i < chunk.length; i++) {
                	if (chunk[i] === newline) {
                    	// If we have content from the current chunk to append to our buffers, do it.
                    		if (i > 0) {
                        		chunkArray.push(chunk.slice(lastNewLineIndex, i));
                    		}

                    		// Wrap all our buffers and emit it.
                    		this(mergeBuffers(chunkArray));
                    		lastNewLineIndex = i + 1;
                	}
            }
	    }

            if (lastNewLineIndex > 0) {
                // New line found in the chunk, push the remaining part of the buffer.
                if (lastNewLineIndex < chunk.length) {
                    chunkArray.push(chunk.slice(lastNewLineIndex));
                }
            } else {
                // No new line found, push the whole buffer.
                if (chunk && chunk.length) {
                    chunkArray.push(chunk);
                }
            }
            return chunkArray;
        });
    });
}

Lazy.range = function () {
    var args = arguments;
    var step = 1;
    var infinite = false;

    if (args.length == 1 && typeof args[0] == 'number') {
        var i = 0, j = args[0];
    }
    else if (args.length == 1 && typeof args[0] == 'string') { // 'start[,next]..[end]'
        var arg = args[0];
        var startOpen = false, endClosed = false;
        if (arg[0] == '(' || arg[0] == '[') {
            if (arg[0] == '(') startOpen = true;
            arg = arg.slice(1);
        }
        if (arg.slice(-1) == ']') endClosed = true;

        var parts = arg.split('..');
        if (parts.length != 2)
            throw new Error("single argument range takes 'start..' or 'start..end' or 'start,next..end'");

        if (parts[1] == '') { // 'start..'
            var i = parts[0];
            infinite = true;
        }
        else { // 'start[,next]..end'
            var progression = parts[0].split(',');
            if (progression.length == 1) { // start..end
                var i = parts[0], j = parts[1];
            }
            else { // 'start,next..end'
                var i = progression[0], j = parts[1];
                step = Math.abs(progression[1]-i);
            }
        }

        i = parseInt(i, 10);
        j = parseInt(j, 10);

        if (startOpen) {
            if (infinite || i < j) i++;
            else i--;
        }

        if (endClosed) {
            if (i < j) j++;
            else j--;
        }
    }
    else if (args.length == 2 || args.length == 3) { // start, end[, step]
        var i = args[0], j = args[1];
        if (args.length == 3) {
            var step = args[2];
        }
    }
    else {
        throw new Error("range takes 1, 2 or 3 arguments");
    }
    var lazy = new Lazy;
    var stopInfinite = false;
    lazy.on('pipe', function () {
        stopInfinite = true;
    });
    if (infinite) {
        process.nextTick(function g () {
            if (stopInfinite) return;
            lazy.emit('data', i++);
            process.nextTick(g);
        });
    }
    else {
        process.nextTick(function () {
            if (i < j) {
                for (; i<j; i+=step) {
                    lazy.emit('data', i)
                }
            }
            else {
                for (; i>j; i-=step) {
                    lazy.emit('data', i)
                }
            }
            lazy.emit('end');
        });
    }
    return lazy;
}

var mergeBuffers = function mergeBuffers(buffers) {
  // We expect buffers to be a non-empty Array
  if (!buffers || !Array.isArray(buffers) || !buffers.length) return;

  var finalBufferLength, finalBuffer, currentBuffer, currentSize = 0;

  // Sum all the buffers lengths
  finalBufferLength = buffers.reduce(function(left, right) { return (left.length||left) + (right.length||right); }, 0);
  finalBuffer = new Buffer(finalBufferLength);
  while(buffers.length) {
    currentBuffer = buffers.shift();
    currentBuffer.copy(finalBuffer, currentSize);
    currentSize += currentBuffer.length;
  }

  return finalBuffer;
}


util.inherits(Lazy, EventEmitter);
module.exports = Lazy;

}).call(this,require('_process'),require("buffer").Buffer)

},{"_process":34,"buffer":20,"events":23,"stream":47,"util":57}],18:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],19:[function(require,module,exports){

},{}],20:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
 *     on objects.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

function typedArraySupport () {
  function Bar () {}
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    arr.constructor = Bar
    return arr.foo() === 42 && // typed array instances can be augmented
        arr.constructor === Bar && // constructor can be set
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  this.length = 0
  this.parent = undefined

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    array.byteLength
    that = Buffer._augment(new Uint8Array(array))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` is deprecated
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` is deprecated
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":18,"ieee754":24,"is-array":26}],21:[function(require,module,exports){
module.exports = function (string) {
  return string.charAt(0).toUpperCase() + string.substring(1);
}

module.exports.words = function (string) {
  return string.replace(/(^|[^a-zA-Z\u00C0-\u017F'])([a-zA-Z\u00C0-\u017F])/g, function (m) {
    return m.toUpperCase()
  })
}

},{}],22:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return Buffer.isBuffer(arg);
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":27}],23:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],24:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],25:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],26:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],27:[function(require,module,exports){
/**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */

module.exports = function (obj) {
  return !!(obj != null &&
    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)
      (obj.constructor &&
      typeof obj.constructor.isBuffer === 'function' &&
      obj.constructor.isBuffer(obj))
    ))
}

},{}],28:[function(require,module,exports){
module.exports = function(text, reverse){
  return text.split(" ").every(function(word, i, arr){
    var last = i ? arr[i - 1].length : false
    var curr = word.length
    var diff = reverse ? last - curr : curr - last
    return !(last && diff !== 1)
  })
}

},{}],29:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],30:[function(require,module,exports){
module.exports = function(string, _c){
  var result = true
  var constraint

  if(Array.isArray(_c)){
    constraint = _c
  } else if (_c){
    constraint = ['b', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'p', 'q', 't', 'y']
  }

  var letters = string.toLowerCase().split("").filter(function(el){return el.match(/[a-z]/)})

  var map = {}

  letters.forEach(function(letter){
    map[letter] = true
  })

  if(constraint){
    constraint.every(function(letter){
      return map[letter] ? result = false : true
    })
  } else {
    result = 'abcdefghijklmnopqrstuvwxyz'.split("").filter(function(letter){return !map[letter]})
    if(!result.length) result = false
  }
  return result;
}

},{}],31:[function(require,module,exports){
var conversionMap = {
  ough: 'ewe',
  ant: 'aunt',
  end: 'ihnd',
  and: 'uhn',
  ent: 'ind',
  lan: 'lown',
  ast: 'inst',
  ou: 'oo',
  ow: 'au',
  il: 'iliil',
  ag: 'ack',
  ew: 'eeoo'
}

module.exports = function(text, lev, conv){
  var newStr = text
  var level = lev !== undefined ? lev : 0.5
  var conversions = conv !== undefined ? conv : conversionMap
  Object.keys(conversions).forEach(function(substr){
    if(newStr.indexOf(substr) !== -1 && Math.random() < level){
      newStr = newStr.replace(new RegExp(substr, 'g'), conversions[substr])
    }
  })
  return newStr
}

module.exports.conversions = conversionMap
},{}],32:[function(require,module,exports){
'use strict';
module.exports = function (data, options) {
	options = options || {};
	data = data.slice();

	var count = Number(options.count) || 1;
	var ret = [];

	if (!Array.isArray(data)) {
		throw new TypeError('Expected an array as the first argument');
	}

	if (count >= data.length) {
		throw new Error('options.count must be lower than the number of picks');
	}

	while (count--) {
		ret.push(data.splice(Math.floor(Math.random() * data.length), 1)[0]);
	}

	return ret;
};

},{}],33:[function(require,module,exports){
(function (process){
'use strict';
module.exports = nextTick;

function nextTick(fn) {
  var args = new Array(arguments.length - 1);
  var i = 0;
  while (i < args.length) {
    args[i++] = arguments[i];
  }
  process.nextTick(function afterTick() {
    fn.apply(null, args);
  });
}

}).call(this,require('_process'))

},{"_process":34}],34:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],35:[function(require,module,exports){
var pick = require('pick-random')
module.exports = function () {
  return {
    a: [],
    b: [],
    c: [],
    seed: function (ls) {
      var that = this
      ls.forEach(function (l) {
        // for each line
        var ws = l.split(' ')
        // put the first word in a bucket
        that.a.push(ws.shift())
        // last word in c bucket
        if (ws.length) that.c.push(ws.pop())
        // and everything else in the b bucket.
        if (ws.length) that.b.push(ws.join(' '))
      })
      return this
    },
    fill: function (length) {
      // if user passes 0, umm, undefined!
      if (length) {
        // we start with a random word from the a bucket
        var res = [pick(this.a)]
        // then we pick a random middle thing and split it up
        var mid = pick(this.b)[0].split(' ')
        // as long as we have stuff from the middle thing,
        // and our res is not one less than the target length...
        while (res.length < length - 1 && mid.length) {
          // we push the next word from our middle thing
          res.push(mid.shift())
          // if the middle thing is depleted, we pick a new one.
          // if the buckets are insufficiently filled this might error out. i should fix that sometime
          if (!mid.length) mid = pick(this.b)[0].split(' ')
        }
        // if the user wants length > 2, pop an ending thing from the c bucket on the end
        if (length > 1) res.push(pick(this.c))
        // return the generated string
        return res.join(' ')
      }
    }
  }
}

},{"pick-random":36}],36:[function(require,module,exports){
arguments[4][32][0].apply(exports,arguments)
},{"dup":32}],37:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":38}],38:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/



/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

},{"./_stream_readable":40,"./_stream_writable":42,"core-util-is":22,"inherits":25,"process-nextick-args":33}],39:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":41,"core-util-is":22,"inherits":25}],40:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events');

/*<replacement>*/
var EElistenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/



/*<replacement>*/
var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function')
    this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function() {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}


// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = computeNewHighWaterMark(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      processNextTick(emitReadable_, stream);
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    processNextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      if (state.pipesCount === 1 &&
          state.pipes[0] === dest &&
          src.listenerCount('data') === 1 &&
          !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];


  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }; }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};


// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else if (list.length === 1)
      ret = list[0];
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))

},{"./_stream_duplex":38,"_process":34,"buffer":20,"core-util-is":22,"events":23,"inherits":25,"isarray":29,"process-nextick-args":33,"string_decoder/":48,"util":19}],41:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function')
      this._transform = options.transform;

    if (typeof options.flush === 'function')
      this._flush = options.flush;
  }

  this.once('prefinish', function() {
    if (typeof this._flush === 'function')
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":38,"core-util-is":22,"inherits":25}],42:[function(require,module,exports){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/


/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function (){try {
Object.defineProperty(WritableState.prototype, 'buffer', {
  get: internalUtil.deprecate(function() {
    return this.getBuffer();
  }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' +
     'instead.')
});
}catch(_){}}());


function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function')
      this._write = options.write;

    if (typeof options.writev === 'function')
      this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;

  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = nop;

  if (state.ended)
    writeAfterEnd(this, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.bufferedRequest)
      clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string')
    encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64',
'ucs2', 'ucs-2','utf16le', 'utf-16le', 'raw']
.indexOf((encoding + '').toLowerCase()) > -1))
    throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync)
    processNextTick(cb, er);
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      processNextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var buffer = [];
    var cbs = [];
    while (entry) {
      cbs.push(entry.callback);
      buffer.push(entry);
      entry = entry.next;
    }

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    state.lastBufferedRequest = null;
    doWrite(stream, state, true, state.length, buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null)
      state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined)
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(state) {
  return (state.ending &&
          state.length === 0 &&
          state.bufferedRequest === null &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      processNextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

},{"./_stream_duplex":38,"buffer":20,"core-util-is":22,"events":23,"inherits":25,"process-nextick-args":33,"util-deprecate":55}],43:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":39}],44:[function(require,module,exports){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":38,"./lib/_stream_passthrough.js":39,"./lib/_stream_readable.js":40,"./lib/_stream_transform.js":41,"./lib/_stream_writable.js":42}],45:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":41}],46:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":42}],47:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":23,"inherits":25,"readable-stream/duplex.js":37,"readable-stream/passthrough.js":43,"readable-stream/readable.js":44,"readable-stream/transform.js":45,"readable-stream/writable.js":46}],48:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":20}],49:[function(require,module,exports){

var isCool = require('iscool')()

module.exports = function (str) {
  return str.split('\W').every(function (word) {
    return !!word ? isCool(word) : true
  })
}

},{"iscool":51}],50:[function(require,module,exports){
var Immutable = require('immutable');

// Everything in the lists should be lowercase. Potential matches will also 
// be converted to lowercase.

var lists = {
  // falsePositivesList should contain only the singular forms of the words, 
  // words will be singularized before being checked against this list.
  falsePositives: [
    'rt',
    'http',
    'haha',
    'adv',
    'san',
    'tri',
    'asa',
    'att',
    'io',
    'imo',
    'pl',
    'dr',
    'ala',
    'ama'
  ],
  extendedBlacklist: [
    'negro',
    'negroes',
    'chink',
    'chinks',
    'gook',
    'gooks',
    'nigger',
    'niggers',
    'nigga',
    'niggas',
    'spic',
    'spics',
    'rape',
    'rapes',
    'rapist',
    'rapists',
    'bombing',
    'bombings',
    'shootings',
    'shooting',
    'miscarriage',
    'coon',
    'transgender', // OK normally, not OK as a noun.
    'swastika',
    'nazi',
    'nazis',
    'nazidom',
    'holocaust',
    'islamist',
    'jihadist',
    'klan',
    'blackface',
    'abuser',
    'n-word',
    'darky',
    'darkies',
    'crip',
    'crips',
    'cripple',
    'cripples',
    'pedophile',
    'pedophilia',
    'cancer',
    'seizure',
    'eulogy',
    'lynching',
    'slaveowner',
    'slaveowners',
    'condolence',
    'condolences',
    'RIP',
    'molestation',
    'molestations',
    'molester',
    'molesters',
    'triggering',
    'trigger'
  ],
  tragedyModeBlacklist: [
    'gaza',
    'israel',
    'palestine',
    'invasion',
    'horror',
    'genocide',
    'explosion',
    'assault',
    'hamas',
    'bomb',
    'plane',
    'death',
    'missile',
    'crash',
    'suicide',
    'airstrike',
    'brigadier',
    'idf',
    'isis',
    'mourner',
    'mourners',
    'iraq',
    'accident',
    'ebola',
    'depression',
    'asphyxiation',
    'ferguson',
    'beheading',
    'foley',
    'gun',
    'rip',
    'chokehold',
    'coroner',
    'eric',
    'garner',
    'torture',
    'torturer',
    'ukraine',
    'donetsk',
    'jihad',
    'grieving',
    'walter',
    'scott',
    'cop',
    'police',
    'officer',
    'nepal',
    'earthquake',
    'katmandu',
    'Durbar',
    'wreckage',
    'carnage',
    'riot',
    'rioting',
    'baltimore',
    'freddie',
    'gray',
    'derailment',
    'amtrak',
    'train',
    'philadelphia',

    'rev',
    // 'sharonda',
    // 'coleman',
    'singleton',

    // 'cynthia',
    'hurd',

    // 'susie',
    // 'jackson',

    'ethel',
    'lance',

    // 'depayne',
    // 'middleton',
    // 'doctor',

    // 'clementa',
    // 'pinckney',

    // 'tywanza',
    // 'sanders',
    'sander',

    'daniel',
    // 'simmons',
    'simmon',

    // 'myra',
    // 'thompson',

    'ame',
    'emanuel',
    'victim',
    'charleston',
    'columbia',
    'racist',
    'supremacist',
    'racism',
    'supremacy',
    'dylann',
    'roof',
    'murder',
    'murderer',
    'whiteness',
    'rhodesian',
    'rhodesia',
    'funeral',
    'arson',
    'firebombing',
    'killed',

    'cameraman',
    'virginia'
  ],
  whitelist: [
  ]
};

// TODO: Differentiate between words not cool to say vs. words not cool to
// respond to.

module.exports = Immutable.Map(lists);

},{"immutable":52}],51:[function(require,module,exports){
var defaultLists = require('./defaultlists');
var wordfilter = require('wordfilter');

wordfilter.removeWord('crip');

function createIsCool(opts) {
  var falsePositives = defaultLists.get('falsePositives');
  var extendedBlacklist = defaultLists.get('extendedBlacklist');
  var tragedyModeBlacklist = defaultLists.get('tragedyModeBlacklist');
  var whitelist = defaultLists.get('whitelist');
  var customBlacklist;
  var customWhitelist;
  var tragedyHappenedRecently = true;
  var logger;

  if (typeof opts === 'object') {
    if (opts.logger) {
      logger = opts.logger;
    }
    if (opts.falsePositives) {
      falsePositives = opts.falsePositives;
    }
    if (opts.extendedBlacklist) {
      extendedBlacklist = opts.extendedBlacklist;
    }
    if (opts.customBlacklist) {
      customBlacklist = opts.customBlacklist;
    }
    if (opts.tragedyModeBlacklist) {
      tragedyModeBlacklist = opts.tragedyModeBlacklist;
    }
    if ('tragedyHappenedRecently' in opts) {
      tragedyHappenedRecently = opts.tragedyHappenedRecently;
    }
    customWhitelist = opts.customWhitelist;
  }
  else if (typeof opts === 'string') {
    throw new TypeError('iscool constructor function expected an options object but received ' + opts);
  }

  function isCool(word) {
    var normalizedWord = word.toLowerCase();
    
    if (whitelist.indexOf(normalizedWord) !== -1) {
      return true;
    }
    else if (customWhitelist && customWhitelist.indexOf(normalizedWord) !== -1) {
      return true;
    }

    var cool = (falsePositives.indexOf(normalizedWord) === -1);

    if (cool) {
      cool = (extendedBlacklist.indexOf(normalizedWord) === -1);
    }

    if (cool) {
      cool = !wordfilter.blacklisted(normalizedWord);
    }

    if (cool && customBlacklist) {
      cool = (customBlacklist.indexOf(normalizedWord) === -1);
    }

    if (cool && tragedyHappenedRecently) {
      cool = (tragedyModeBlacklist.indexOf(normalizedWord) === -1);
    }

    if (!cool && logger) {
      logger.log('Uncool word: ' + word);
    }

    return cool;
  }

  return isCool;
}

module.exports = createIsCool;

},{"./defaultlists":50,"wordfilter":54}],52:[function(require,module,exports){
/**
 *  Copyright (c) 2014-2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  global.Immutable = factory()
}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;

  function createClass(ctor, superClass) {
    if (superClass) {
      ctor.prototype = Object.create(superClass.prototype);
    }
    ctor.prototype.constructor = ctor;
  }

  // Used for setting prototype methods that IE8 chokes on.
  var DELETE = 'delete';

  // Constants describing the size of trie nodes.
  var SHIFT = 5; // Resulted in best performance after ______?
  var SIZE = 1 << SHIFT;
  var MASK = SIZE - 1;

  // A consistent shared value representing "not set" which equals nothing other
  // than itself, and nothing that could be provided externally.
  var NOT_SET = {};

  // Boolean references, Rough equivalent of `bool &`.
  var CHANGE_LENGTH = { value: false };
  var DID_ALTER = { value: false };

  function MakeRef(ref) {
    ref.value = false;
    return ref;
  }

  function SetRef(ref) {
    ref && (ref.value = true);
  }

  // A function which returns a value representing an "owner" for transient writes
  // to tries. The return value will only ever equal itself, and will not equal
  // the return of any subsequent call of this function.
  function OwnerID() {}

  // http://jsperf.com/copy-array-inline
  function arrCopy(arr, offset) {
    offset = offset || 0;
    var len = Math.max(0, arr.length - offset);
    var newArr = new Array(len);
    for (var ii = 0; ii < len; ii++) {
      newArr[ii] = arr[ii + offset];
    }
    return newArr;
  }

  function ensureSize(iter) {
    if (iter.size === undefined) {
      iter.size = iter.__iterate(returnTrue);
    }
    return iter.size;
  }

  function wrapIndex(iter, index) {
    // This implements "is array index" which the ECMAString spec defines as:
    //     A String property name P is an array index if and only if
    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
    //     to 2^32−1.
    // However note that we're currently calling ToNumber() instead of ToUint32()
    // which should be improved in the future, as floating point numbers should
    // not be accepted as an array index.
    if (typeof index !== 'number') {
      var numIndex = +index;
      if ('' + numIndex !== index) {
        return NaN;
      }
      index = numIndex;
    }
    return index < 0 ? ensureSize(iter) + index : index;
  }

  function returnTrue() {
    return true;
  }

  function wholeSlice(begin, end, size) {
    return (begin === 0 || (size !== undefined && begin <= -size)) &&
      (end === undefined || (size !== undefined && end >= size));
  }

  function resolveBegin(begin, size) {
    return resolveIndex(begin, size, 0);
  }

  function resolveEnd(end, size) {
    return resolveIndex(end, size, size);
  }

  function resolveIndex(index, size, defaultIndex) {
    return index === undefined ?
      defaultIndex :
      index < 0 ?
        Math.max(0, size + index) :
        size === undefined ?
          index :
          Math.min(size, index);
  }

  function Iterable(value) {
      return isIterable(value) ? value : Seq(value);
    }


  createClass(KeyedIterable, Iterable);
    function KeyedIterable(value) {
      return isKeyed(value) ? value : KeyedSeq(value);
    }


  createClass(IndexedIterable, Iterable);
    function IndexedIterable(value) {
      return isIndexed(value) ? value : IndexedSeq(value);
    }


  createClass(SetIterable, Iterable);
    function SetIterable(value) {
      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
    }



  function isIterable(maybeIterable) {
    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
  }

  function isKeyed(maybeKeyed) {
    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
  }

  function isIndexed(maybeIndexed) {
    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
  }

  function isAssociative(maybeAssociative) {
    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
  }

  function isOrdered(maybeOrdered) {
    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
  }

  Iterable.isIterable = isIterable;
  Iterable.isKeyed = isKeyed;
  Iterable.isIndexed = isIndexed;
  Iterable.isAssociative = isAssociative;
  Iterable.isOrdered = isOrdered;

  Iterable.Keyed = KeyedIterable;
  Iterable.Indexed = IndexedIterable;
  Iterable.Set = SetIterable;


  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  /* global Symbol */

  var ITERATE_KEYS = 0;
  var ITERATE_VALUES = 1;
  var ITERATE_ENTRIES = 2;

  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';

  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;


  function src_Iterator__Iterator(next) {
      this.next = next;
    }

    src_Iterator__Iterator.prototype.toString = function() {
      return '[Iterator]';
    };


  src_Iterator__Iterator.KEYS = ITERATE_KEYS;
  src_Iterator__Iterator.VALUES = ITERATE_VALUES;
  src_Iterator__Iterator.ENTRIES = ITERATE_ENTRIES;

  src_Iterator__Iterator.prototype.inspect =
  src_Iterator__Iterator.prototype.toSource = function () { return this.toString(); }
  src_Iterator__Iterator.prototype[ITERATOR_SYMBOL] = function () {
    return this;
  };


  function iteratorValue(type, k, v, iteratorResult) {
    var value = type === 0 ? k : type === 1 ? v : [k, v];
    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {
      value: value, done: false
    });
    return iteratorResult;
  }

  function iteratorDone() {
    return { value: undefined, done: true };
  }

  function hasIterator(maybeIterable) {
    return !!getIteratorFn(maybeIterable);
  }

  function isIterator(maybeIterator) {
    return maybeIterator && typeof maybeIterator.next === 'function';
  }

  function getIterator(iterable) {
    var iteratorFn = getIteratorFn(iterable);
    return iteratorFn && iteratorFn.call(iterable);
  }

  function getIteratorFn(iterable) {
    var iteratorFn = iterable && (
      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
      iterable[FAUX_ITERATOR_SYMBOL]
    );
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  function isArrayLike(value) {
    return value && typeof value.length === 'number';
  }

  createClass(Seq, Iterable);
    function Seq(value) {
      return value === null || value === undefined ? emptySequence() :
        isIterable(value) ? value.toSeq() : seqFromValue(value);
    }

    Seq.of = function(/*...values*/) {
      return Seq(arguments);
    };

    Seq.prototype.toSeq = function() {
      return this;
    };

    Seq.prototype.toString = function() {
      return this.__toString('Seq {', '}');
    };

    Seq.prototype.cacheResult = function() {
      if (!this._cache && this.__iterateUncached) {
        this._cache = this.entrySeq().toArray();
        this.size = this._cache.length;
      }
      return this;
    };

    // abstract __iterateUncached(fn, reverse)

    Seq.prototype.__iterate = function(fn, reverse) {
      return seqIterate(this, fn, reverse, true);
    };

    // abstract __iteratorUncached(type, reverse)

    Seq.prototype.__iterator = function(type, reverse) {
      return seqIterator(this, type, reverse, true);
    };



  createClass(KeyedSeq, Seq);
    function KeyedSeq(value) {
      return value === null || value === undefined ?
        emptySequence().toKeyedSeq() :
        isIterable(value) ?
          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :
          keyedSeqFromValue(value);
    }

    KeyedSeq.prototype.toKeyedSeq = function() {
      return this;
    };



  createClass(IndexedSeq, Seq);
    function IndexedSeq(value) {
      return value === null || value === undefined ? emptySequence() :
        !isIterable(value) ? indexedSeqFromValue(value) :
        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
    }

    IndexedSeq.of = function(/*...values*/) {
      return IndexedSeq(arguments);
    };

    IndexedSeq.prototype.toIndexedSeq = function() {
      return this;
    };

    IndexedSeq.prototype.toString = function() {
      return this.__toString('Seq [', ']');
    };

    IndexedSeq.prototype.__iterate = function(fn, reverse) {
      return seqIterate(this, fn, reverse, false);
    };

    IndexedSeq.prototype.__iterator = function(type, reverse) {
      return seqIterator(this, type, reverse, false);
    };



  createClass(SetSeq, Seq);
    function SetSeq(value) {
      return (
        value === null || value === undefined ? emptySequence() :
        !isIterable(value) ? indexedSeqFromValue(value) :
        isKeyed(value) ? value.entrySeq() : value
      ).toSetSeq();
    }

    SetSeq.of = function(/*...values*/) {
      return SetSeq(arguments);
    };

    SetSeq.prototype.toSetSeq = function() {
      return this;
    };



  Seq.isSeq = isSeq;
  Seq.Keyed = KeyedSeq;
  Seq.Set = SetSeq;
  Seq.Indexed = IndexedSeq;

  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

  Seq.prototype[IS_SEQ_SENTINEL] = true;



  // #pragma Root Sequences

  createClass(ArraySeq, IndexedSeq);
    function ArraySeq(array) {
      this._array = array;
      this.size = array.length;
    }

    ArraySeq.prototype.get = function(index, notSetValue) {
      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
    };

    ArraySeq.prototype.__iterate = function(fn, reverse) {
      var array = this._array;
      var maxIndex = array.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
          return ii + 1;
        }
      }
      return ii;
    };

    ArraySeq.prototype.__iterator = function(type, reverse) {
      var array = this._array;
      var maxIndex = array.length - 1;
      var ii = 0;
      return new src_Iterator__Iterator(function() 
        {return ii > maxIndex ?
          iteratorDone() :
          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}
      );
    };



  createClass(ObjectSeq, KeyedSeq);
    function ObjectSeq(object) {
      var keys = Object.keys(object);
      this._object = object;
      this._keys = keys;
      this.size = keys.length;
    }

    ObjectSeq.prototype.get = function(key, notSetValue) {
      if (notSetValue !== undefined && !this.has(key)) {
        return notSetValue;
      }
      return this._object[key];
    };

    ObjectSeq.prototype.has = function(key) {
      return this._object.hasOwnProperty(key);
    };

    ObjectSeq.prototype.__iterate = function(fn, reverse) {
      var object = this._object;
      var keys = this._keys;
      var maxIndex = keys.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        var key = keys[reverse ? maxIndex - ii : ii];
        if (fn(object[key], key, this) === false) {
          return ii + 1;
        }
      }
      return ii;
    };

    ObjectSeq.prototype.__iterator = function(type, reverse) {
      var object = this._object;
      var keys = this._keys;
      var maxIndex = keys.length - 1;
      var ii = 0;
      return new src_Iterator__Iterator(function()  {
        var key = keys[reverse ? maxIndex - ii : ii];
        return ii++ > maxIndex ?
          iteratorDone() :
          iteratorValue(type, key, object[key]);
      });
    };

  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;


  createClass(IterableSeq, IndexedSeq);
    function IterableSeq(iterable) {
      this._iterable = iterable;
      this.size = iterable.length || iterable.size;
    }

    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterable = this._iterable;
      var iterator = getIterator(iterable);
      var iterations = 0;
      if (isIterator(iterator)) {
        var step;
        while (!(step = iterator.next()).done) {
          if (fn(step.value, iterations++, this) === false) {
            break;
          }
        }
      }
      return iterations;
    };

    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterable = this._iterable;
      var iterator = getIterator(iterable);
      if (!isIterator(iterator)) {
        return new src_Iterator__Iterator(iteratorDone);
      }
      var iterations = 0;
      return new src_Iterator__Iterator(function()  {
        var step = iterator.next();
        return step.done ? step : iteratorValue(type, iterations++, step.value);
      });
    };



  createClass(IteratorSeq, IndexedSeq);
    function IteratorSeq(iterator) {
      this._iterator = iterator;
      this._iteratorCache = [];
    }

    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterator = this._iterator;
      var cache = this._iteratorCache;
      var iterations = 0;
      while (iterations < cache.length) {
        if (fn(cache[iterations], iterations++, this) === false) {
          return iterations;
        }
      }
      var step;
      while (!(step = iterator.next()).done) {
        var val = step.value;
        cache[iterations] = val;
        if (fn(val, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };

    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = this._iterator;
      var cache = this._iteratorCache;
      var iterations = 0;
      return new src_Iterator__Iterator(function()  {
        if (iterations >= cache.length) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          cache[iterations] = step.value;
        }
        return iteratorValue(type, iterations, cache[iterations++]);
      });
    };




  // # pragma Helper functions

  function isSeq(maybeSeq) {
    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
  }

  var EMPTY_SEQ;

  function emptySequence() {
    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
  }

  function keyedSeqFromValue(value) {
    var seq =
      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :
      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :
      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :
      typeof value === 'object' ? new ObjectSeq(value) :
      undefined;
    if (!seq) {
      throw new TypeError(
        'Expected Array or iterable object of [k, v] entries, '+
        'or keyed object: ' + value
      );
    }
    return seq;
  }

  function indexedSeqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (!seq) {
      throw new TypeError(
        'Expected Array or iterable object of values: ' + value
      );
    }
    return seq;
  }

  function seqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value) ||
      (typeof value === 'object' && new ObjectSeq(value));
    if (!seq) {
      throw new TypeError(
        'Expected Array or iterable object of values, or keyed object: ' + value
      );
    }
    return seq;
  }

  function maybeIndexedSeqFromValue(value) {
    return (
      isArrayLike(value) ? new ArraySeq(value) :
      isIterator(value) ? new IteratorSeq(value) :
      hasIterator(value) ? new IterableSeq(value) :
      undefined
    );
  }

  function seqIterate(seq, fn, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        var entry = cache[reverse ? maxIndex - ii : ii];
        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
          return ii + 1;
        }
      }
      return ii;
    }
    return seq.__iterateUncached(fn, reverse);
  }

  function seqIterator(seq, type, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      var ii = 0;
      return new src_Iterator__Iterator(function()  {
        var entry = cache[reverse ? maxIndex - ii : ii];
        return ii++ > maxIndex ?
          iteratorDone() :
          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
      });
    }
    return seq.__iteratorUncached(type, reverse);
  }

  createClass(Collection, Iterable);
    function Collection() {
      throw TypeError('Abstract');
    }


  createClass(KeyedCollection, Collection);function KeyedCollection() {}

  createClass(IndexedCollection, Collection);function IndexedCollection() {}

  createClass(SetCollection, Collection);function SetCollection() {}


  Collection.Keyed = KeyedCollection;
  Collection.Indexed = IndexedCollection;
  Collection.Set = SetCollection;

  /**
   * An extension of the "same-value" algorithm as [described for use by ES6 Map
   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
   *
   * NaN is considered the same as NaN, however -0 and 0 are considered the same
   * value, which is different from the algorithm described by
   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
   *
   * This is extended further to allow Objects to describe the values they
   * represent, by way of `valueOf` or `equals` (and `hashCode`).
   *
   * Note: because of this extension, the key equality of Immutable.Map and the
   * value equality of Immutable.Set will differ from ES6 Map and Set.
   *
   * ### Defining custom values
   *
   * The easiest way to describe the value an object represents is by implementing
   * `valueOf`. For example, `Date` represents a value by returning a unix
   * timestamp for `valueOf`:
   *
   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
   *     var date2 = new Date(1234567890000);
   *     date1.valueOf(); // 1234567890000
   *     assert( date1 !== date2 );
   *     assert( Immutable.is( date1, date2 ) );
   *
   * Note: overriding `valueOf` may have other implications if you use this object
   * where JavaScript expects a primitive, such as implicit string coercion.
   *
   * For more complex types, especially collections, implementing `valueOf` may
   * not be performant. An alternative is to implement `equals` and `hashCode`.
   *
   * `equals` takes another object, presumably of similar type, and returns true
   * if the it is equal. Equality is symmetrical, so the same result should be
   * returned if this and the argument are flipped.
   *
   *     assert( a.equals(b) === b.equals(a) );
   *
   * `hashCode` returns a 32bit integer number representing the object which will
   * be used to determine how to store the value object in a Map or Set. You must
   * provide both or neither methods, one must not exist without the other.
   *
   * Also, an important relationship between these methods must be upheld: if two
   * values are equal, they *must* return the same hashCode. If the values are not
   * equal, they might have the same hashCode; this is called a hash collision,
   * and while undesirable for performance reasons, it is acceptable.
   *
   *     if (a.equals(b)) {
   *       assert( a.hashCode() === b.hashCode() );
   *     }
   *
   * All Immutable collections implement `equals` and `hashCode`.
   *
   */
  function is(valueA, valueB) {
    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
    if (typeof valueA.valueOf === 'function' &&
        typeof valueB.valueOf === 'function') {
      valueA = valueA.valueOf();
      valueB = valueB.valueOf();
      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
    }
    if (typeof valueA.equals === 'function' &&
        typeof valueB.equals === 'function' &&
        valueA.equals(valueB)) {
      return true;
    }
    return false;
  }

  function fromJS(json, converter) {
    return converter ?
      fromJSWith(converter, json, '', {'': json}) :
      fromJSDefault(json);
  }

  function fromJSWith(converter, json, key, parentJSON) {
    if (Array.isArray(json)) {
      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
    }
    if (isPlainObj(json)) {
      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
    }
    return json;
  }

  function fromJSDefault(json) {
    if (Array.isArray(json)) {
      return IndexedSeq(json).map(fromJSDefault).toList();
    }
    if (isPlainObj(json)) {
      return KeyedSeq(json).map(fromJSDefault).toMap();
    }
    return json;
  }

  function isPlainObj(value) {
    return value && (value.constructor === Object || value.constructor === undefined);
  }

  var src_Math__imul =
    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?
    Math.imul :
    function imul(a, b) {
      a = a | 0; // int
      b = b | 0; // int
      var c = a & 0xffff;
      var d = b & 0xffff;
      // Shift by 0 fixes the sign on the high part.
      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int
    };

  // v8 has an optimization for storing 31-bit signed numbers.
  // Values which have either 00 or 11 as the high order bits qualify.
  // This function drops the highest order bit in a signed number, maintaining
  // the sign bit.
  function smi(i32) {
    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);
  }

  function hash(o) {
    if (o === false || o === null || o === undefined) {
      return 0;
    }
    if (typeof o.valueOf === 'function') {
      o = o.valueOf();
      if (o === false || o === null || o === undefined) {
        return 0;
      }
    }
    if (o === true) {
      return 1;
    }
    var type = typeof o;
    if (type === 'number') {
      var h = o | 0;
      if (h !== o) {
        h ^= o * 0xFFFFFFFF;
      }
      while (o > 0xFFFFFFFF) {
        o /= 0xFFFFFFFF;
        h ^= o;
      }
      return smi(h);
    }
    if (type === 'string') {
      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
    }
    if (typeof o.hashCode === 'function') {
      return o.hashCode();
    }
    return hashJSObj(o);
  }

  function cachedHashString(string) {
    var hash = stringHashCache[string];
    if (hash === undefined) {
      hash = hashString(string);
      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
        STRING_HASH_CACHE_SIZE = 0;
        stringHashCache = {};
      }
      STRING_HASH_CACHE_SIZE++;
      stringHashCache[string] = hash;
    }
    return hash;
  }

  // http://jsperf.com/hashing-strings
  function hashString(string) {
    // This is the hash from JVM
    // The hash code for a string is computed as
    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
    // where s[i] is the ith character of the string and n is the length of
    // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
    // (exclusive) by dropping high bits.
    var hash = 0;
    for (var ii = 0; ii < string.length; ii++) {
      hash = 31 * hash + string.charCodeAt(ii) | 0;
    }
    return smi(hash);
  }

  function hashJSObj(obj) {
    var hash;
    if (usingWeakMap) {
      hash = weakMap.get(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = obj[UID_HASH_KEY];
    if (hash !== undefined) {
      return hash;
    }

    if (!canDefineProperty) {
      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
      if (hash !== undefined) {
        return hash;
      }

      hash = getIENodeHash(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = ++objHashUID;
    if (objHashUID & 0x40000000) {
      objHashUID = 0;
    }

    if (usingWeakMap) {
      weakMap.set(obj, hash);
    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
      throw new Error('Non-extensible objects are not allowed as keys.');
    } else if (canDefineProperty) {
      Object.defineProperty(obj, UID_HASH_KEY, {
        'enumerable': false,
        'configurable': false,
        'writable': false,
        'value': hash
      });
    } else if (obj.propertyIsEnumerable !== undefined &&
               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
      // Since we can't define a non-enumerable property on the object
      // we'll hijack one of the less-used non-enumerable properties to
      // save our hash on it. Since this is a function it will not show up in
      // `JSON.stringify` which is what we want.
      obj.propertyIsEnumerable = function() {
        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
      };
      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
    } else if (obj.nodeType !== undefined) {
      // At this point we couldn't get the IE `uniqueID` to use as a hash
      // and we couldn't use a non-enumerable property to exploit the
      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
      // itself.
      obj[UID_HASH_KEY] = hash;
    } else {
      throw new Error('Unable to set a non-enumerable property on object.');
    }

    return hash;
  }

  // Get references to ES5 object methods.
  var isExtensible = Object.isExtensible;

  // True if Object.defineProperty works as expected. IE8 fails this test.
  var canDefineProperty = (function() {
    try {
      Object.defineProperty({}, '@', {});
      return true;
    } catch (e) {
      return false;
    }
  }());

  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
  // and avoid memory leaks from the IE cloneNode bug.
  function getIENodeHash(node) {
    if (node && node.nodeType > 0) {
      switch (node.nodeType) {
        case 1: // Element
          return node.uniqueID;
        case 9: // Document
          return node.documentElement && node.documentElement.uniqueID;
      }
    }
  }

  // If possible, use a WeakMap.
  var usingWeakMap = typeof WeakMap === 'function';
  var weakMap;
  if (usingWeakMap) {
    weakMap = new WeakMap();
  }

  var objHashUID = 0;

  var UID_HASH_KEY = '__immutablehash__';
  if (typeof Symbol === 'function') {
    UID_HASH_KEY = Symbol(UID_HASH_KEY);
  }

  var STRING_HASH_CACHE_MIN_STRLEN = 16;
  var STRING_HASH_CACHE_MAX_SIZE = 255;
  var STRING_HASH_CACHE_SIZE = 0;
  var stringHashCache = {};

  function invariant(condition, error) {
    if (!condition) throw new Error(error);
  }

  function assertNotInfinite(size) {
    invariant(
      size !== Infinity,
      'Cannot perform this action with an infinite size.'
    );
  }

  createClass(ToKeyedSequence, KeyedSeq);
    function ToKeyedSequence(indexed, useKeys) {
      this._iter = indexed;
      this._useKeys = useKeys;
      this.size = indexed.size;
    }

    ToKeyedSequence.prototype.get = function(key, notSetValue) {
      return this._iter.get(key, notSetValue);
    };

    ToKeyedSequence.prototype.has = function(key) {
      return this._iter.has(key);
    };

    ToKeyedSequence.prototype.valueSeq = function() {
      return this._iter.valueSeq();
    };

    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;
      var reversedSequence = reverseFactory(this, true);
      if (!this._useKeys) {
        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};
      }
      return reversedSequence;
    };

    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;
      var mappedSequence = mapFactory(this, mapper, context);
      if (!this._useKeys) {
        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};
      }
      return mappedSequence;
    };

    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      var ii;
      return this._iter.__iterate(
        this._useKeys ?
          function(v, k)  {return fn(v, k, this$0)} :
          ((ii = reverse ? resolveSize(this) : 0),
            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),
        reverse
      );
    };

    ToKeyedSequence.prototype.__iterator = function(type, reverse) {
      if (this._useKeys) {
        return this._iter.__iterator(type, reverse);
      }
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      var ii = reverse ? resolveSize(this) : 0;
      return new src_Iterator__Iterator(function()  {
        var step = iterator.next();
        return step.done ? step :
          iteratorValue(type, reverse ? --ii : ii++, step.value, step);
      });
    };

  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;


  createClass(ToIndexedSequence, IndexedSeq);
    function ToIndexedSequence(iter) {
      this._iter = iter;
      this.size = iter.size;
    }

    ToIndexedSequence.prototype.includes = function(value) {
      return this._iter.includes(value);
    };

    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      var iterations = 0;
      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);
    };

    ToIndexedSequence.prototype.__iterator = function(type, reverse) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      var iterations = 0;
      return new src_Iterator__Iterator(function()  {
        var step = iterator.next();
        return step.done ? step :
          iteratorValue(type, iterations++, step.value, step)
      });
    };



  createClass(ToSetSequence, SetSeq);
    function ToSetSequence(iter) {
      this._iter = iter;
      this.size = iter.size;
    }

    ToSetSequence.prototype.has = function(key) {
      return this._iter.includes(key);
    };

    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);
    };

    ToSetSequence.prototype.__iterator = function(type, reverse) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      return new src_Iterator__Iterator(function()  {
        var step = iterator.next();
        return step.done ? step :
          iteratorValue(type, step.value, step.value, step);
      });
    };



  createClass(FromEntriesSequence, KeyedSeq);
    function FromEntriesSequence(entries) {
      this._iter = entries;
      this.size = entries.size;
    }

    FromEntriesSequence.prototype.entrySeq = function() {
      return this._iter.toSeq();
    };

    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._iter.__iterate(function(entry ) {
        // Check if entry exists first so array access doesn't throw for holes
        // in the parent iteration.
        if (entry) {
          validateEntry(entry);
          var indexedIterable = isIterable(entry);
          return fn(
            indexedIterable ? entry.get(1) : entry[1],
            indexedIterable ? entry.get(0) : entry[0],
            this$0
          );
        }
      }, reverse);
    };

    FromEntriesSequence.prototype.__iterator = function(type, reverse) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      return new src_Iterator__Iterator(function()  {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          // Check if entry exists first so array access doesn't throw for holes
          // in the parent iteration.
          if (entry) {
            validateEntry(entry);
            var indexedIterable = isIterable(entry);
            return iteratorValue(
              type,
              indexedIterable ? entry.get(0) : entry[0],
              indexedIterable ? entry.get(1) : entry[1],
              step
            );
          }
        }
      });
    };


  ToIndexedSequence.prototype.cacheResult =
  ToKeyedSequence.prototype.cacheResult =
  ToSetSequence.prototype.cacheResult =
  FromEntriesSequence.prototype.cacheResult =
    cacheResultThrough;


  function flipFactory(iterable) {
    var flipSequence = makeSequence(iterable);
    flipSequence._iter = iterable;
    flipSequence.size = iterable.size;
    flipSequence.flip = function()  {return iterable};
    flipSequence.reverse = function () {
      var reversedSequence = iterable.reverse.apply(this); // super.reverse()
      reversedSequence.flip = function()  {return iterable.reverse()};
      return reversedSequence;
    };
    flipSequence.has = function(key ) {return iterable.includes(key)};
    flipSequence.includes = function(key ) {return iterable.has(key)};
    flipSequence.cacheResult = cacheResultThrough;
    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);
    }
    flipSequence.__iteratorUncached = function(type, reverse) {
      if (type === ITERATE_ENTRIES) {
        var iterator = iterable.__iterator(type, reverse);
        return new src_Iterator__Iterator(function()  {
          var step = iterator.next();
          if (!step.done) {
            var k = step.value[0];
            step.value[0] = step.value[1];
            step.value[1] = k;
          }
          return step;
        });
      }
      return iterable.__iterator(
        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
        reverse
      );
    }
    return flipSequence;
  }


  function mapFactory(iterable, mapper, context) {
    var mappedSequence = makeSequence(iterable);
    mappedSequence.size = iterable.size;
    mappedSequence.has = function(key ) {return iterable.has(key)};
    mappedSequence.get = function(key, notSetValue)  {
      var v = iterable.get(key, NOT_SET);
      return v === NOT_SET ?
        notSetValue :
        mapper.call(context, v, key, iterable);
    };
    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      return iterable.__iterate(
        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},
        reverse
      );
    }
    mappedSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      return new src_Iterator__Iterator(function()  {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        return iteratorValue(
          type,
          key,
          mapper.call(context, entry[1], key, iterable),
          step
        );
      });
    }
    return mappedSequence;
  }


  function reverseFactory(iterable, useKeys) {
    var reversedSequence = makeSequence(iterable);
    reversedSequence._iter = iterable;
    reversedSequence.size = iterable.size;
    reversedSequence.reverse = function()  {return iterable};
    if (iterable.flip) {
      reversedSequence.flip = function () {
        var flipSequence = flipFactory(iterable);
        flipSequence.reverse = function()  {return iterable.flip()};
        return flipSequence;
      };
    }
    reversedSequence.get = function(key, notSetValue) 
      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};
    reversedSequence.has = function(key )
      {return iterable.has(useKeys ? key : -1 - key)};
    reversedSequence.includes = function(value ) {return iterable.includes(value)};
    reversedSequence.cacheResult = cacheResultThrough;
    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;
      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);
    };
    reversedSequence.__iterator =
      function(type, reverse)  {return iterable.__iterator(type, !reverse)};
    return reversedSequence;
  }


  function filterFactory(iterable, predicate, context, useKeys) {
    var filterSequence = makeSequence(iterable);
    if (useKeys) {
      filterSequence.has = function(key ) {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
      };
      filterSequence.get = function(key, notSetValue)  {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?
          v : notSetValue;
      };
    }
    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function(v, k, c)  {
        if (predicate.call(context, v, k, c)) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      }, reverse);
      return iterations;
    };
    filterSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterations = 0;
      return new src_Iterator__Iterator(function()  {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          var value = entry[1];
          if (predicate.call(context, value, key, iterable)) {
            return iteratorValue(type, useKeys ? key : iterations++, value, step);
          }
        }
      });
    }
    return filterSequence;
  }


  function countByFactory(iterable, grouper, context) {
    var groups = src_Map__Map().asMutable();
    iterable.__iterate(function(v, k)  {
      groups.update(
        grouper.call(context, v, k, iterable),
        0,
        function(a ) {return a + 1}
      );
    });
    return groups.asImmutable();
  }


  function groupByFactory(iterable, grouper, context) {
    var isKeyedIter = isKeyed(iterable);
    var groups = (isOrdered(iterable) ? OrderedMap() : src_Map__Map()).asMutable();
    iterable.__iterate(function(v, k)  {
      groups.update(
        grouper.call(context, v, k, iterable),
        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}
      );
    });
    var coerce = iterableClass(iterable);
    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});
  }


  function sliceFactory(iterable, begin, end, useKeys) {
    var originalSize = iterable.size;

    // Sanitize begin & end using this shorthand for ToInt32(argument)
    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      end = end | 0;
    }

    if (wholeSlice(begin, end, originalSize)) {
      return iterable;
    }

    var resolvedBegin = resolveBegin(begin, originalSize);
    var resolvedEnd = resolveEnd(end, originalSize);

    // begin or end will be NaN if they were provided as negative numbers and
    // this iterable's size is unknown. In that case, cache first so there is
    // a known size and these do not resolve to NaN.
    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
    }

    // Note: resolvedEnd is undefined when the original sequence's length is
    // unknown and this slice did not supply an end and should contain all
    // elements after resolvedBegin.
    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
    var resolvedSize = resolvedEnd - resolvedBegin;
    var sliceSize;
    if (resolvedSize === resolvedSize) {
      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
    }

    var sliceSeq = makeSequence(iterable);

    // If iterable.size is undefined, the size of the realized sliceSeq is
    // unknown at this point unless the number of items to slice is 0
    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
      sliceSeq.get = function (index, notSetValue) {
        index = wrapIndex(this, index);
        return index >= 0 && index < sliceSize ?
          iterable.get(index + resolvedBegin, notSetValue) :
          notSetValue;
      }
    }

    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;
      if (sliceSize === 0) {
        return 0;
      }
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var skipped = 0;
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function(v, k)  {
        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
                 iterations !== sliceSize;
        }
      });
      return iterations;
    };

    sliceSeq.__iteratorUncached = function(type, reverse) {
      if (sliceSize !== 0 && reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      // Don't bother instantiating parent iterator if taking 0.
      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
      var skipped = 0;
      var iterations = 0;
      return new src_Iterator__Iterator(function()  {
        while (skipped++ < resolvedBegin) {
          iterator.next();
        }
        if (++iterations > sliceSize) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (useKeys || type === ITERATE_VALUES) {
          return step;
        } else if (type === ITERATE_KEYS) {
          return iteratorValue(type, iterations - 1, undefined, step);
        } else {
          return iteratorValue(type, iterations - 1, step.value[1], step);
        }
      });
    }

    return sliceSeq;
  }


  function takeWhileFactory(iterable, predicate, context) {
    var takeSequence = makeSequence(iterable);
    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterations = 0;
      iterable.__iterate(function(v, k, c) 
        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}
      );
      return iterations;
    };
    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterating = true;
      return new src_Iterator__Iterator(function()  {
        if (!iterating) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var k = entry[0];
        var v = entry[1];
        if (!predicate.call(context, v, k, this$0)) {
          iterating = false;
          return iteratorDone();
        }
        return type === ITERATE_ENTRIES ? step :
          iteratorValue(type, k, v, step);
      });
    };
    return takeSequence;
  }


  function skipWhileFactory(iterable, predicate, context, useKeys) {
    var skipSequence = makeSequence(iterable);
    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function(v, k, c)  {
        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      });
      return iterations;
    };
    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var skipping = true;
      var iterations = 0;
      return new src_Iterator__Iterator(function()  {
        var step, k, v;
        do {
          step = iterator.next();
          if (step.done) {
            if (useKeys || type === ITERATE_VALUES) {
              return step;
            } else if (type === ITERATE_KEYS) {
              return iteratorValue(type, iterations++, undefined, step);
            } else {
              return iteratorValue(type, iterations++, step.value[1], step);
            }
          }
          var entry = step.value;
          k = entry[0];
          v = entry[1];
          skipping && (skipping = predicate.call(context, v, k, this$0));
        } while (skipping);
        return type === ITERATE_ENTRIES ? step :
          iteratorValue(type, k, v, step);
      });
    };
    return skipSequence;
  }


  function concatFactory(iterable, values) {
    var isKeyedIterable = isKeyed(iterable);
    var iters = [iterable].concat(values).map(function(v ) {
      if (!isIterable(v)) {
        v = isKeyedIterable ?
          keyedSeqFromValue(v) :
          indexedSeqFromValue(Array.isArray(v) ? v : [v]);
      } else if (isKeyedIterable) {
        v = KeyedIterable(v);
      }
      return v;
    }).filter(function(v ) {return v.size !== 0});

    if (iters.length === 0) {
      return iterable;
    }

    if (iters.length === 1) {
      var singleton = iters[0];
      if (singleton === iterable ||
          isKeyedIterable && isKeyed(singleton) ||
          isIndexed(iterable) && isIndexed(singleton)) {
        return singleton;
      }
    }

    var concatSeq = new ArraySeq(iters);
    if (isKeyedIterable) {
      concatSeq = concatSeq.toKeyedSeq();
    } else if (!isIndexed(iterable)) {
      concatSeq = concatSeq.toSetSeq();
    }
    concatSeq = concatSeq.flatten(true);
    concatSeq.size = iters.reduce(
      function(sum, seq)  {
        if (sum !== undefined) {
          var size = seq.size;
          if (size !== undefined) {
            return sum + size;
          }
        }
      },
      0
    );
    return concatSeq;
  }


  function flattenFactory(iterable, depth, useKeys) {
    var flatSequence = makeSequence(iterable);
    flatSequence.__iterateUncached = function(fn, reverse) {
      var iterations = 0;
      var stopped = false;
      function flatDeep(iter, currentDepth) {var this$0 = this;
        iter.__iterate(function(v, k)  {
          if ((!depth || currentDepth < depth) && isIterable(v)) {
            flatDeep(v, currentDepth + 1);
          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
            stopped = true;
          }
          return !stopped;
        }, reverse);
      }
      flatDeep(iterable, 0);
      return iterations;
    }
    flatSequence.__iteratorUncached = function(type, reverse) {
      var iterator = iterable.__iterator(type, reverse);
      var stack = [];
      var iterations = 0;
      return new src_Iterator__Iterator(function()  {
        while (iterator) {
          var step = iterator.next();
          if (step.done !== false) {
            iterator = stack.pop();
            continue;
          }
          var v = step.value;
          if (type === ITERATE_ENTRIES) {
            v = v[1];
          }
          if ((!depth || stack.length < depth) && isIterable(v)) {
            stack.push(iterator);
            iterator = v.__iterator(type, reverse);
          } else {
            return useKeys ? step : iteratorValue(type, iterations++, v, step);
          }
        }
        return iteratorDone();
      });
    }
    return flatSequence;
  }


  function flatMapFactory(iterable, mapper, context) {
    var coerce = iterableClass(iterable);
    return iterable.toSeq().map(
      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}
    ).flatten(true);
  }


  function interposeFactory(iterable, separator) {
    var interposedSequence = makeSequence(iterable);
    interposedSequence.size = iterable.size && iterable.size * 2 -1;
    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function(v, k) 
        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&
        fn(v, iterations++, this$0) !== false},
        reverse
      );
      return iterations;
    };
    interposedSequence.__iteratorUncached = function(type, reverse) {
      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
      var iterations = 0;
      var step;
      return new src_Iterator__Iterator(function()  {
        if (!step || iterations % 2) {
          step = iterator.next();
          if (step.done) {
            return step;
          }
        }
        return iterations % 2 ?
          iteratorValue(type, iterations++, separator) :
          iteratorValue(type, iterations++, step.value, step);
      });
    };
    return interposedSequence;
  }


  function sortFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    var isKeyedIterable = isKeyed(iterable);
    var index = 0;
    var entries = iterable.toSeq().map(
      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}
    ).toArray();
    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(
      isKeyedIterable ?
      function(v, i)  { entries[i].length = 2; } :
      function(v, i)  { entries[i] = v[1]; }
    );
    return isKeyedIterable ? KeyedSeq(entries) :
      isIndexed(iterable) ? IndexedSeq(entries) :
      SetSeq(entries);
  }


  function maxFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    if (mapper) {
      var entry = iterable.toSeq()
        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})
        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});
      return entry && entry[0];
    } else {
      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});
    }
  }

  function maxCompare(comparator, a, b) {
    var comp = comparator(b, a);
    // b is considered the new max if the comparator declares them equal, but
    // they are not equal and b is in fact a nullish value.
    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;
  }


  function zipWithFactory(keyIter, zipper, iters) {
    var zipSequence = makeSequence(keyIter);
    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();
    // Note: this a generic base implementation of __iterate in terms of
    // __iterator which may be more generically useful in the future.
    zipSequence.__iterate = function(fn, reverse) {
      /* generic:
      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        iterations++;
        if (fn(step.value[1], step.value[0], this) === false) {
          break;
        }
      }
      return iterations;
      */
      // indexed:
      var iterator = this.__iterator(ITERATE_VALUES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };
    zipSequence.__iteratorUncached = function(type, reverse) {
      var iterators = iters.map(function(i )
        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}
      );
      var iterations = 0;
      var isDone = false;
      return new src_Iterator__Iterator(function()  {
        var steps;
        if (!isDone) {
          steps = iterators.map(function(i ) {return i.next()});
          isDone = steps.some(function(s ) {return s.done});
        }
        if (isDone) {
          return iteratorDone();
        }
        return iteratorValue(
          type,
          iterations++,
          zipper.apply(null, steps.map(function(s ) {return s.value}))
        );
      });
    };
    return zipSequence
  }


  // #pragma Helper Functions

  function reify(iter, seq) {
    return isSeq(iter) ? seq : iter.constructor(seq);
  }

  function validateEntry(entry) {
    if (entry !== Object(entry)) {
      throw new TypeError('Expected [K, V] tuple: ' + entry);
    }
  }

  function resolveSize(iter) {
    assertNotInfinite(iter.size);
    return ensureSize(iter);
  }

  function iterableClass(iterable) {
    return isKeyed(iterable) ? KeyedIterable :
      isIndexed(iterable) ? IndexedIterable :
      SetIterable;
  }

  function makeSequence(iterable) {
    return Object.create(
      (
        isKeyed(iterable) ? KeyedSeq :
        isIndexed(iterable) ? IndexedSeq :
        SetSeq
      ).prototype
    );
  }

  function cacheResultThrough() {
    if (this._iter.cacheResult) {
      this._iter.cacheResult();
      this.size = this._iter.size;
      return this;
    } else {
      return Seq.prototype.cacheResult.call(this);
    }
  }

  function defaultComparator(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  function forceIterator(keyPath) {
    var iter = getIterator(keyPath);
    if (!iter) {
      // Array might not be iterable in this environment, so we need a fallback
      // to our wrapped type.
      if (!isArrayLike(keyPath)) {
        throw new TypeError('Expected iterable or array-like: ' + keyPath);
      }
      iter = getIterator(Iterable(keyPath));
    }
    return iter;
  }

  createClass(src_Map__Map, KeyedCollection);

    // @pragma Construction

    function src_Map__Map(value) {
      return value === null || value === undefined ? emptyMap() :
        isMap(value) && !isOrdered(value) ? value :
        emptyMap().withMutations(function(map ) {
          var iter = KeyedIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v, k)  {return map.set(k, v)});
        });
    }

    src_Map__Map.prototype.toString = function() {
      return this.__toString('Map {', '}');
    };

    // @pragma Access

    src_Map__Map.prototype.get = function(k, notSetValue) {
      return this._root ?
        this._root.get(0, undefined, k, notSetValue) :
        notSetValue;
    };

    // @pragma Modification

    src_Map__Map.prototype.set = function(k, v) {
      return updateMap(this, k, v);
    };

    src_Map__Map.prototype.setIn = function(keyPath, v) {
      return this.updateIn(keyPath, NOT_SET, function()  {return v});
    };

    src_Map__Map.prototype.remove = function(k) {
      return updateMap(this, k, NOT_SET);
    };

    src_Map__Map.prototype.deleteIn = function(keyPath) {
      return this.updateIn(keyPath, function()  {return NOT_SET});
    };

    src_Map__Map.prototype.update = function(k, notSetValue, updater) {
      return arguments.length === 1 ?
        k(this) :
        this.updateIn([k], notSetValue, updater);
    };

    src_Map__Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
      if (!updater) {
        updater = notSetValue;
        notSetValue = undefined;
      }
      var updatedValue = updateInDeepMap(
        this,
        forceIterator(keyPath),
        notSetValue,
        updater
      );
      return updatedValue === NOT_SET ? undefined : updatedValue;
    };

    src_Map__Map.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._root = null;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return emptyMap();
    };

    // @pragma Composition

    src_Map__Map.prototype.merge = function(/*...iters*/) {
      return mergeIntoMapWith(this, undefined, arguments);
    };

    src_Map__Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoMapWith(this, merger, iters);
    };

    src_Map__Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
      return this.updateIn(
        keyPath,
        emptyMap(),
        function(m ) {return typeof m.merge === 'function' ?
          m.merge.apply(m, iters) :
          iters[iters.length - 1]}
      );
    };

    src_Map__Map.prototype.mergeDeep = function(/*...iters*/) {
      return mergeIntoMapWith(this, deepMerger(undefined), arguments);
    };

    src_Map__Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoMapWith(this, deepMerger(merger), iters);
    };

    src_Map__Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
      return this.updateIn(
        keyPath,
        emptyMap(),
        function(m ) {return typeof m.mergeDeep === 'function' ?
          m.mergeDeep.apply(m, iters) :
          iters[iters.length - 1]}
      );
    };

    src_Map__Map.prototype.sort = function(comparator) {
      // Late binding
      return OrderedMap(sortFactory(this, comparator));
    };

    src_Map__Map.prototype.sortBy = function(mapper, comparator) {
      // Late binding
      return OrderedMap(sortFactory(this, comparator, mapper));
    };

    // @pragma Mutability

    src_Map__Map.prototype.withMutations = function(fn) {
      var mutable = this.asMutable();
      fn(mutable);
      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
    };

    src_Map__Map.prototype.asMutable = function() {
      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
    };

    src_Map__Map.prototype.asImmutable = function() {
      return this.__ensureOwner();
    };

    src_Map__Map.prototype.wasAltered = function() {
      return this.__altered;
    };

    src_Map__Map.prototype.__iterator = function(type, reverse) {
      return new MapIterator(this, type, reverse);
    };

    src_Map__Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      var iterations = 0;
      this._root && this._root.iterate(function(entry ) {
        iterations++;
        return fn(entry[1], entry[0], this$0);
      }, reverse);
      return iterations;
    };

    src_Map__Map.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeMap(this.size, this._root, ownerID, this.__hash);
    };


  function isMap(maybeMap) {
    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
  }

  src_Map__Map.isMap = isMap;

  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

  var MapPrototype = src_Map__Map.prototype;
  MapPrototype[IS_MAP_SENTINEL] = true;
  MapPrototype[DELETE] = MapPrototype.remove;
  MapPrototype.removeIn = MapPrototype.deleteIn;


  // #pragma Trie Nodes



    function ArrayMapNode(ownerID, entries) {
      this.ownerID = ownerID;
      this.entries = entries;
    }

    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      var entries = this.entries;
      for (var ii = 0, len = entries.length; ii < len; ii++) {
        if (is(key, entries[ii][0])) {
          return entries[ii][1];
        }
      }
      return notSetValue;
    };

    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      var removed = value === NOT_SET;

      var entries = this.entries;
      var idx = 0;
      for (var len = entries.length; idx < len; idx++) {
        if (is(key, entries[idx][0])) {
          break;
        }
      }
      var exists = idx < len;

      if (exists ? entries[idx][1] === value : removed) {
        return this;
      }

      SetRef(didAlter);
      (removed || !exists) && SetRef(didChangeSize);

      if (removed && entries.length === 1) {
        return; // undefined
      }

      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
        return createNodes(ownerID, entries, key, value);
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newEntries = isEditable ? entries : arrCopy(entries);

      if (exists) {
        if (removed) {
          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
        } else {
          newEntries[idx] = [key, value];
        }
      } else {
        newEntries.push([key, value]);
      }

      if (isEditable) {
        this.entries = newEntries;
        return this;
      }

      return new ArrayMapNode(ownerID, newEntries);
    };




    function BitmapIndexedNode(ownerID, bitmap, nodes) {
      this.ownerID = ownerID;
      this.bitmap = bitmap;
      this.nodes = nodes;
    }

    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));
      var bitmap = this.bitmap;
      return (bitmap & bit) === 0 ? notSetValue :
        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);
    };

    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var bit = 1 << keyHashFrag;
      var bitmap = this.bitmap;
      var exists = (bitmap & bit) !== 0;

      if (!exists && value === NOT_SET) {
        return this;
      }

      var idx = popCount(bitmap & (bit - 1));
      var nodes = this.nodes;
      var node = exists ? nodes[idx] : undefined;
      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

      if (newNode === node) {
        return this;
      }

      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
      }

      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
        return nodes[idx ^ 1];
      }

      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
        return newNode;
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
      var newNodes = exists ? newNode ?
        setIn(nodes, idx, newNode, isEditable) :
        spliceOut(nodes, idx, isEditable) :
        spliceIn(nodes, idx, newNode, isEditable);

      if (isEditable) {
        this.bitmap = newBitmap;
        this.nodes = newNodes;
        return this;
      }

      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
    };




    function HashArrayMapNode(ownerID, count, nodes) {
      this.ownerID = ownerID;
      this.count = count;
      this.nodes = nodes;
    }

    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var node = this.nodes[idx];
      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
    };

    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var removed = value === NOT_SET;
      var nodes = this.nodes;
      var node = nodes[idx];

      if (removed && !node) {
        return this;
      }

      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
      if (newNode === node) {
        return this;
      }

      var newCount = this.count;
      if (!node) {
        newCount++;
      } else if (!newNode) {
        newCount--;
        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
          return packNodes(ownerID, nodes, newCount, idx);
        }
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newNodes = setIn(nodes, idx, newNode, isEditable);

      if (isEditable) {
        this.count = newCount;
        this.nodes = newNodes;
        return this;
      }

      return new HashArrayMapNode(ownerID, newCount, newNodes);
    };




    function HashCollisionNode(ownerID, keyHash, entries) {
      this.ownerID = ownerID;
      this.keyHash = keyHash;
      this.entries = entries;
    }

    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      var entries = this.entries;
      for (var ii = 0, len = entries.length; ii < len; ii++) {
        if (is(key, entries[ii][0])) {
          return entries[ii][1];
        }
      }
      return notSetValue;
    };

    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }

      var removed = value === NOT_SET;

      if (keyHash !== this.keyHash) {
        if (removed) {
          return this;
        }
        SetRef(didAlter);
        SetRef(didChangeSize);
        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
      }

      var entries = this.entries;
      var idx = 0;
      for (var len = entries.length; idx < len; idx++) {
        if (is(key, entries[idx][0])) {
          break;
        }
      }
      var exists = idx < len;

      if (exists ? entries[idx][1] === value : removed) {
        return this;
      }

      SetRef(didAlter);
      (removed || !exists) && SetRef(didChangeSize);

      if (removed && len === 2) {
        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newEntries = isEditable ? entries : arrCopy(entries);

      if (exists) {
        if (removed) {
          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
        } else {
          newEntries[idx] = [key, value];
        }
      } else {
        newEntries.push([key, value]);
      }

      if (isEditable) {
        this.entries = newEntries;
        return this;
      }

      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
    };




    function ValueNode(ownerID, keyHash, entry) {
      this.ownerID = ownerID;
      this.keyHash = keyHash;
      this.entry = entry;
    }

    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
    };

    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      var removed = value === NOT_SET;
      var keyMatch = is(key, this.entry[0]);
      if (keyMatch ? value === this.entry[1] : removed) {
        return this;
      }

      SetRef(didAlter);

      if (removed) {
        SetRef(didChangeSize);
        return; // undefined
      }

      if (keyMatch) {
        if (ownerID && ownerID === this.ownerID) {
          this.entry[1] = value;
          return this;
        }
        return new ValueNode(ownerID, this.keyHash, [key, value]);
      }

      SetRef(didChangeSize);
      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
    };



  // #pragma Iterators

  ArrayMapNode.prototype.iterate =
  HashCollisionNode.prototype.iterate = function (fn, reverse) {
    var entries = this.entries;
    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
        return false;
      }
    }
  }

  BitmapIndexedNode.prototype.iterate =
  HashArrayMapNode.prototype.iterate = function (fn, reverse) {
    var nodes = this.nodes;
    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
      var node = nodes[reverse ? maxIndex - ii : ii];
      if (node && node.iterate(fn, reverse) === false) {
        return false;
      }
    }
  }

  ValueNode.prototype.iterate = function (fn, reverse) {
    return fn(this.entry);
  }

  createClass(MapIterator, src_Iterator__Iterator);

    function MapIterator(map, type, reverse) {
      this._type = type;
      this._reverse = reverse;
      this._stack = map._root && mapIteratorFrame(map._root);
    }

    MapIterator.prototype.next = function() {
      var type = this._type;
      var stack = this._stack;
      while (stack) {
        var node = stack.node;
        var index = stack.index++;
        var maxIndex;
        if (node.entry) {
          if (index === 0) {
            return mapIteratorValue(type, node.entry);
          }
        } else if (node.entries) {
          maxIndex = node.entries.length - 1;
          if (index <= maxIndex) {
            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
          }
        } else {
          maxIndex = node.nodes.length - 1;
          if (index <= maxIndex) {
            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
            if (subNode) {
              if (subNode.entry) {
                return mapIteratorValue(type, subNode.entry);
              }
              stack = this._stack = mapIteratorFrame(subNode, stack);
            }
            continue;
          }
        }
        stack = this._stack = this._stack.__prev;
      }
      return iteratorDone();
    };


  function mapIteratorValue(type, entry) {
    return iteratorValue(type, entry[0], entry[1]);
  }

  function mapIteratorFrame(node, prev) {
    return {
      node: node,
      index: 0,
      __prev: prev
    };
  }

  function makeMap(size, root, ownerID, hash) {
    var map = Object.create(MapPrototype);
    map.size = size;
    map._root = root;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_MAP;
  function emptyMap() {
    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
  }

  function updateMap(map, k, v) {
    var newRoot;
    var newSize;
    if (!map._root) {
      if (v === NOT_SET) {
        return map;
      }
      newSize = 1;
      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
    } else {
      var didChangeSize = MakeRef(CHANGE_LENGTH);
      var didAlter = MakeRef(DID_ALTER);
      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
      if (!didAlter.value) {
        return map;
      }
      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
    }
    if (map.__ownerID) {
      map.size = newSize;
      map._root = newRoot;
      map.__hash = undefined;
      map.__altered = true;
      return map;
    }
    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
  }

  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (!node) {
      if (value === NOT_SET) {
        return node;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return new ValueNode(ownerID, keyHash, [key, value]);
    }
    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
  }

  function isLeafNode(node) {
    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
  }

  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
    if (node.keyHash === keyHash) {
      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
    }

    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

    var newNode;
    var nodes = idx1 === idx2 ?
      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :
      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);

    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
  }

  function createNodes(ownerID, entries, key, value) {
    if (!ownerID) {
      ownerID = new OwnerID();
    }
    var node = new ValueNode(ownerID, hash(key), [key, value]);
    for (var ii = 0; ii < entries.length; ii++) {
      var entry = entries[ii];
      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
    }
    return node;
  }

  function packNodes(ownerID, nodes, count, excluding) {
    var bitmap = 0;
    var packedII = 0;
    var packedNodes = new Array(count);
    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
      var node = nodes[ii];
      if (node !== undefined && ii !== excluding) {
        bitmap |= bit;
        packedNodes[packedII++] = node;
      }
    }
    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
  }

  function expandNodes(ownerID, nodes, bitmap, including, node) {
    var count = 0;
    var expandedNodes = new Array(SIZE);
    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
    }
    expandedNodes[including] = node;
    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
  }

  function mergeIntoMapWith(map, merger, iterables) {
    var iters = [];
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = KeyedIterable(value);
      if (!isIterable(value)) {
        iter = iter.map(function(v ) {return fromJS(v)});
      }
      iters.push(iter);
    }
    return mergeIntoCollectionWith(map, merger, iters);
  }

  function deepMerger(merger) {
    return function(existing, value, key) 
      {return existing && existing.mergeDeepWith && isIterable(value) ?
        existing.mergeDeepWith(merger, value) :
        merger ? merger(existing, value, key) : value};
  }

  function mergeIntoCollectionWith(collection, merger, iters) {
    iters = iters.filter(function(x ) {return x.size !== 0});
    if (iters.length === 0) {
      return collection;
    }
    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
      return collection.constructor(iters[0]);
    }
    return collection.withMutations(function(collection ) {
      var mergeIntoMap = merger ?
        function(value, key)  {
          collection.update(key, NOT_SET, function(existing )
            {return existing === NOT_SET ? value : merger(existing, value, key)}
          );
        } :
        function(value, key)  {
          collection.set(key, value);
        }
      for (var ii = 0; ii < iters.length; ii++) {
        iters[ii].forEach(mergeIntoMap);
      }
    });
  }

  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
    var isNotSet = existing === NOT_SET;
    var step = keyPathIter.next();
    if (step.done) {
      var existingValue = isNotSet ? notSetValue : existing;
      var newValue = updater(existingValue);
      return newValue === existingValue ? existing : newValue;
    }
    invariant(
      isNotSet || (existing && existing.set),
      'invalid keyPath'
    );
    var key = step.value;
    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
    var nextUpdated = updateInDeepMap(
      nextExisting,
      keyPathIter,
      notSetValue,
      updater
    );
    return nextUpdated === nextExisting ? existing :
      nextUpdated === NOT_SET ? existing.remove(key) :
      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
  }

  function popCount(x) {
    x = x - ((x >> 1) & 0x55555555);
    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
    x = (x + (x >> 4)) & 0x0f0f0f0f;
    x = x + (x >> 8);
    x = x + (x >> 16);
    return x & 0x7f;
  }

  function setIn(array, idx, val, canEdit) {
    var newArray = canEdit ? array : arrCopy(array);
    newArray[idx] = val;
    return newArray;
  }

  function spliceIn(array, idx, val, canEdit) {
    var newLen = array.length + 1;
    if (canEdit && idx + 1 === newLen) {
      array[idx] = val;
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        newArray[ii] = val;
        after = -1;
      } else {
        newArray[ii] = array[ii + after];
      }
    }
    return newArray;
  }

  function spliceOut(array, idx, canEdit) {
    var newLen = array.length - 1;
    if (canEdit && idx === newLen) {
      array.pop();
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        after = 1;
      }
      newArray[ii] = array[ii + after];
    }
    return newArray;
  }

  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

  createClass(List, IndexedCollection);

    // @pragma Construction

    function List(value) {
      var empty = emptyList();
      if (value === null || value === undefined) {
        return empty;
      }
      if (isList(value)) {
        return value;
      }
      var iter = IndexedIterable(value);
      var size = iter.size;
      if (size === 0) {
        return empty;
      }
      assertNotInfinite(size);
      if (size > 0 && size < SIZE) {
        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
      }
      return empty.withMutations(function(list ) {
        list.setSize(size);
        iter.forEach(function(v, i)  {return list.set(i, v)});
      });
    }

    List.of = function(/*...values*/) {
      return this(arguments);
    };

    List.prototype.toString = function() {
      return this.__toString('List [', ']');
    };

    // @pragma Access

    List.prototype.get = function(index, notSetValue) {
      index = wrapIndex(this, index);
      if (index >= 0 && index < this.size) {
        index += this._origin;
        var node = listNodeFor(this, index);
        return node && node.array[index & MASK];
      }
      return notSetValue;
    };

    // @pragma Modification

    List.prototype.set = function(index, value) {
      return updateList(this, index, value);
    };

    List.prototype.remove = function(index) {
      return !this.has(index) ? this :
        index === 0 ? this.shift() :
        index === this.size - 1 ? this.pop() :
        this.splice(index, 1);
    };

    List.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = this._origin = this._capacity = 0;
        this._level = SHIFT;
        this._root = this._tail = null;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return emptyList();
    };

    List.prototype.push = function(/*...values*/) {
      var values = arguments;
      var oldSize = this.size;
      return this.withMutations(function(list ) {
        setListBounds(list, 0, oldSize + values.length);
        for (var ii = 0; ii < values.length; ii++) {
          list.set(oldSize + ii, values[ii]);
        }
      });
    };

    List.prototype.pop = function() {
      return setListBounds(this, 0, -1);
    };

    List.prototype.unshift = function(/*...values*/) {
      var values = arguments;
      return this.withMutations(function(list ) {
        setListBounds(list, -values.length);
        for (var ii = 0; ii < values.length; ii++) {
          list.set(ii, values[ii]);
        }
      });
    };

    List.prototype.shift = function() {
      return setListBounds(this, 1);
    };

    // @pragma Composition

    List.prototype.merge = function(/*...iters*/) {
      return mergeIntoListWith(this, undefined, arguments);
    };

    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoListWith(this, merger, iters);
    };

    List.prototype.mergeDeep = function(/*...iters*/) {
      return mergeIntoListWith(this, deepMerger(undefined), arguments);
    };

    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoListWith(this, deepMerger(merger), iters);
    };

    List.prototype.setSize = function(size) {
      return setListBounds(this, 0, size);
    };

    // @pragma Iteration

    List.prototype.slice = function(begin, end) {
      var size = this.size;
      if (wholeSlice(begin, end, size)) {
        return this;
      }
      return setListBounds(
        this,
        resolveBegin(begin, size),
        resolveEnd(end, size)
      );
    };

    List.prototype.__iterator = function(type, reverse) {
      var index = 0;
      var values = iterateList(this, reverse);
      return new src_Iterator__Iterator(function()  {
        var value = values();
        return value === DONE ?
          iteratorDone() :
          iteratorValue(type, index++, value);
      });
    };

    List.prototype.__iterate = function(fn, reverse) {
      var index = 0;
      var values = iterateList(this, reverse);
      var value;
      while ((value = values()) !== DONE) {
        if (fn(value, index++, this) === false) {
          break;
        }
      }
      return index;
    };

    List.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        this.__ownerID = ownerID;
        return this;
      }
      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
    };


  function isList(maybeList) {
    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
  }

  List.isList = isList;

  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

  var ListPrototype = List.prototype;
  ListPrototype[IS_LIST_SENTINEL] = true;
  ListPrototype[DELETE] = ListPrototype.remove;
  ListPrototype.setIn = MapPrototype.setIn;
  ListPrototype.deleteIn =
  ListPrototype.removeIn = MapPrototype.removeIn;
  ListPrototype.update = MapPrototype.update;
  ListPrototype.updateIn = MapPrototype.updateIn;
  ListPrototype.mergeIn = MapPrototype.mergeIn;
  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  ListPrototype.withMutations = MapPrototype.withMutations;
  ListPrototype.asMutable = MapPrototype.asMutable;
  ListPrototype.asImmutable = MapPrototype.asImmutable;
  ListPrototype.wasAltered = MapPrototype.wasAltered;



    function VNode(array, ownerID) {
      this.array = array;
      this.ownerID = ownerID;
    }

    // TODO: seems like these methods are very similar

    VNode.prototype.removeBefore = function(ownerID, level, index) {
      if (index === level ? 1 << level : 0 || this.array.length === 0) {
        return this;
      }
      var originIndex = (index >>> level) & MASK;
      if (originIndex >= this.array.length) {
        return new VNode([], ownerID);
      }
      var removingFirst = originIndex === 0;
      var newChild;
      if (level > 0) {
        var oldChild = this.array[originIndex];
        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
        if (newChild === oldChild && removingFirst) {
          return this;
        }
      }
      if (removingFirst && !newChild) {
        return this;
      }
      var editable = editableVNode(this, ownerID);
      if (!removingFirst) {
        for (var ii = 0; ii < originIndex; ii++) {
          editable.array[ii] = undefined;
        }
      }
      if (newChild) {
        editable.array[originIndex] = newChild;
      }
      return editable;
    };

    VNode.prototype.removeAfter = function(ownerID, level, index) {
      if (index === (level ? 1 << level : 0) || this.array.length === 0) {
        return this;
      }
      var sizeIndex = ((index - 1) >>> level) & MASK;
      if (sizeIndex >= this.array.length) {
        return this;
      }

      var newChild;
      if (level > 0) {
        var oldChild = this.array[sizeIndex];
        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
        if (newChild === oldChild && sizeIndex === this.array.length - 1) {
          return this;
        }
      }

      var editable = editableVNode(this, ownerID);
      editable.array.splice(sizeIndex + 1);
      if (newChild) {
        editable.array[sizeIndex] = newChild;
      }
      return editable;
    };



  var DONE = {};

  function iterateList(list, reverse) {
    var left = list._origin;
    var right = list._capacity;
    var tailPos = getTailOffset(right);
    var tail = list._tail;

    return iterateNodeOrLeaf(list._root, list._level, 0);

    function iterateNodeOrLeaf(node, level, offset) {
      return level === 0 ?
        iterateLeaf(node, offset) :
        iterateNode(node, level, offset);
    }

    function iterateLeaf(node, offset) {
      var array = offset === tailPos ? tail && tail.array : node && node.array;
      var from = offset > left ? 0 : left - offset;
      var to = right - offset;
      if (to > SIZE) {
        to = SIZE;
      }
      return function()  {
        if (from === to) {
          return DONE;
        }
        var idx = reverse ? --to : from++;
        return array && array[idx];
      };
    }

    function iterateNode(node, level, offset) {
      var values;
      var array = node && node.array;
      var from = offset > left ? 0 : (left - offset) >> level;
      var to = ((right - offset) >> level) + 1;
      if (to > SIZE) {
        to = SIZE;
      }
      return function()  {
        do {
          if (values) {
            var value = values();
            if (value !== DONE) {
              return value;
            }
            values = null;
          }
          if (from === to) {
            return DONE;
          }
          var idx = reverse ? --to : from++;
          values = iterateNodeOrLeaf(
            array && array[idx], level - SHIFT, offset + (idx << level)
          );
        } while (true);
      };
    }
  }

  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
    var list = Object.create(ListPrototype);
    list.size = capacity - origin;
    list._origin = origin;
    list._capacity = capacity;
    list._level = level;
    list._root = root;
    list._tail = tail;
    list.__ownerID = ownerID;
    list.__hash = hash;
    list.__altered = false;
    return list;
  }

  var EMPTY_LIST;
  function emptyList() {
    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
  }

  function updateList(list, index, value) {
    index = wrapIndex(list, index);

    if (index !== index) {
      return list;
    }

    if (index >= list.size || index < 0) {
      return list.withMutations(function(list ) {
        index < 0 ?
          setListBounds(list, index).set(0, value) :
          setListBounds(list, 0, index + 1).set(index, value)
      });
    }

    index += list._origin;

    var newTail = list._tail;
    var newRoot = list._root;
    var didAlter = MakeRef(DID_ALTER);
    if (index >= getTailOffset(list._capacity)) {
      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
    } else {
      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
    }

    if (!didAlter.value) {
      return list;
    }

    if (list.__ownerID) {
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
  }

  function updateVNode(node, ownerID, level, index, value, didAlter) {
    var idx = (index >>> level) & MASK;
    var nodeHas = node && idx < node.array.length;
    if (!nodeHas && value === undefined) {
      return node;
    }

    var newNode;

    if (level > 0) {
      var lowerNode = node && node.array[idx];
      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
      if (newLowerNode === lowerNode) {
        return node;
      }
      newNode = editableVNode(node, ownerID);
      newNode.array[idx] = newLowerNode;
      return newNode;
    }

    if (nodeHas && node.array[idx] === value) {
      return node;
    }

    SetRef(didAlter);

    newNode = editableVNode(node, ownerID);
    if (value === undefined && idx === newNode.array.length - 1) {
      newNode.array.pop();
    } else {
      newNode.array[idx] = value;
    }
    return newNode;
  }

  function editableVNode(node, ownerID) {
    if (ownerID && node && ownerID === node.ownerID) {
      return node;
    }
    return new VNode(node ? node.array.slice() : [], ownerID);
  }

  function listNodeFor(list, rawIndex) {
    if (rawIndex >= getTailOffset(list._capacity)) {
      return list._tail;
    }
    if (rawIndex < 1 << (list._level + SHIFT)) {
      var node = list._root;
      var level = list._level;
      while (node && level > 0) {
        node = node.array[(rawIndex >>> level) & MASK];
        level -= SHIFT;
      }
      return node;
    }
  }

  function setListBounds(list, begin, end) {
    // Sanitize begin & end using this shorthand for ToInt32(argument)
    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      end = end | 0;
    }
    var owner = list.__ownerID || new OwnerID();
    var oldOrigin = list._origin;
    var oldCapacity = list._capacity;
    var newOrigin = oldOrigin + begin;
    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
      return list;
    }

    // If it's going to end after it starts, it's empty.
    if (newOrigin >= newCapacity) {
      return list.clear();
    }

    var newLevel = list._level;
    var newRoot = list._root;

    // New origin might need creating a higher root.
    var offsetShift = 0;
    while (newOrigin + offsetShift < 0) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
      newLevel += SHIFT;
      offsetShift += 1 << newLevel;
    }
    if (offsetShift) {
      newOrigin += offsetShift;
      oldOrigin += offsetShift;
      newCapacity += offsetShift;
      oldCapacity += offsetShift;
    }

    var oldTailOffset = getTailOffset(oldCapacity);
    var newTailOffset = getTailOffset(newCapacity);

    // New size might need creating a higher root.
    while (newTailOffset >= 1 << (newLevel + SHIFT)) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
      newLevel += SHIFT;
    }

    // Locate or create the new tail.
    var oldTail = list._tail;
    var newTail = newTailOffset < oldTailOffset ?
      listNodeFor(list, newCapacity - 1) :
      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

    // Merge Tail into tree.
    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
      newRoot = editableVNode(newRoot, owner);
      var node = newRoot;
      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
        var idx = (oldTailOffset >>> level) & MASK;
        node = node.array[idx] = editableVNode(node.array[idx], owner);
      }
      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
    }

    // If the size has been reduced, there's a chance the tail needs to be trimmed.
    if (newCapacity < oldCapacity) {
      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
    }

    // If the new origin is within the tail, then we do not need a root.
    if (newOrigin >= newTailOffset) {
      newOrigin -= newTailOffset;
      newCapacity -= newTailOffset;
      newLevel = SHIFT;
      newRoot = null;
      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

    // Otherwise, if the root has been trimmed, garbage collect.
    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
      offsetShift = 0;

      // Identify the new top root node of the subtree of the old root.
      while (newRoot) {
        var beginIndex = (newOrigin >>> newLevel) & MASK;
        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {
          break;
        }
        if (beginIndex) {
          offsetShift += (1 << newLevel) * beginIndex;
        }
        newLevel -= SHIFT;
        newRoot = newRoot.array[beginIndex];
      }

      // Trim the new sides of the new root.
      if (newRoot && newOrigin > oldOrigin) {
        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
      }
      if (newRoot && newTailOffset < oldTailOffset) {
        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
      }
      if (offsetShift) {
        newOrigin -= offsetShift;
        newCapacity -= offsetShift;
      }
    }

    if (list.__ownerID) {
      list.size = newCapacity - newOrigin;
      list._origin = newOrigin;
      list._capacity = newCapacity;
      list._level = newLevel;
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
  }

  function mergeIntoListWith(list, merger, iterables) {
    var iters = [];
    var maxSize = 0;
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = IndexedIterable(value);
      if (iter.size > maxSize) {
        maxSize = iter.size;
      }
      if (!isIterable(value)) {
        iter = iter.map(function(v ) {return fromJS(v)});
      }
      iters.push(iter);
    }
    if (maxSize > list.size) {
      list = list.setSize(maxSize);
    }
    return mergeIntoCollectionWith(list, merger, iters);
  }

  function getTailOffset(size) {
    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);
  }

  createClass(OrderedMap, src_Map__Map);

    // @pragma Construction

    function OrderedMap(value) {
      return value === null || value === undefined ? emptyOrderedMap() :
        isOrderedMap(value) ? value :
        emptyOrderedMap().withMutations(function(map ) {
          var iter = KeyedIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v, k)  {return map.set(k, v)});
        });
    }

    OrderedMap.of = function(/*...values*/) {
      return this(arguments);
    };

    OrderedMap.prototype.toString = function() {
      return this.__toString('OrderedMap {', '}');
    };

    // @pragma Access

    OrderedMap.prototype.get = function(k, notSetValue) {
      var index = this._map.get(k);
      return index !== undefined ? this._list.get(index)[1] : notSetValue;
    };

    // @pragma Modification

    OrderedMap.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._map.clear();
        this._list.clear();
        return this;
      }
      return emptyOrderedMap();
    };

    OrderedMap.prototype.set = function(k, v) {
      return updateOrderedMap(this, k, v);
    };

    OrderedMap.prototype.remove = function(k) {
      return updateOrderedMap(this, k, NOT_SET);
    };

    OrderedMap.prototype.wasAltered = function() {
      return this._map.wasAltered() || this._list.wasAltered();
    };

    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._list.__iterate(
        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},
        reverse
      );
    };

    OrderedMap.prototype.__iterator = function(type, reverse) {
      return this._list.fromEntrySeq().__iterator(type, reverse);
    };

    OrderedMap.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      var newList = this._list.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._map = newMap;
        this._list = newList;
        return this;
      }
      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
    };


  function isOrderedMap(maybeOrderedMap) {
    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
  }

  OrderedMap.isOrderedMap = isOrderedMap;

  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;



  function makeOrderedMap(map, list, ownerID, hash) {
    var omap = Object.create(OrderedMap.prototype);
    omap.size = map ? map.size : 0;
    omap._map = map;
    omap._list = list;
    omap.__ownerID = ownerID;
    omap.__hash = hash;
    return omap;
  }

  var EMPTY_ORDERED_MAP;
  function emptyOrderedMap() {
    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
  }

  function updateOrderedMap(omap, k, v) {
    var map = omap._map;
    var list = omap._list;
    var i = map.get(k);
    var has = i !== undefined;
    var newMap;
    var newList;
    if (v === NOT_SET) { // removed
      if (!has) {
        return omap;
      }
      if (list.size >= SIZE && list.size >= map.size * 2) {
        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});
        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();
        if (omap.__ownerID) {
          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
        }
      } else {
        newMap = map.remove(k);
        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
      }
    } else {
      if (has) {
        if (v === list.get(i)[1]) {
          return omap;
        }
        newMap = map;
        newList = list.set(i, [k, v]);
      } else {
        newMap = map.set(k, list.size);
        newList = list.set(list.size, [k, v]);
      }
    }
    if (omap.__ownerID) {
      omap.size = newMap.size;
      omap._map = newMap;
      omap._list = newList;
      omap.__hash = undefined;
      return omap;
    }
    return makeOrderedMap(newMap, newList);
  }

  createClass(Stack, IndexedCollection);

    // @pragma Construction

    function Stack(value) {
      return value === null || value === undefined ? emptyStack() :
        isStack(value) ? value :
        emptyStack().unshiftAll(value);
    }

    Stack.of = function(/*...values*/) {
      return this(arguments);
    };

    Stack.prototype.toString = function() {
      return this.__toString('Stack [', ']');
    };

    // @pragma Access

    Stack.prototype.get = function(index, notSetValue) {
      var head = this._head;
      index = wrapIndex(this, index);
      while (head && index--) {
        head = head.next;
      }
      return head ? head.value : notSetValue;
    };

    Stack.prototype.peek = function() {
      return this._head && this._head.value;
    };

    // @pragma Modification

    Stack.prototype.push = function(/*...values*/) {
      if (arguments.length === 0) {
        return this;
      }
      var newSize = this.size + arguments.length;
      var head = this._head;
      for (var ii = arguments.length - 1; ii >= 0; ii--) {
        head = {
          value: arguments[ii],
          next: head
        };
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };

    Stack.prototype.pushAll = function(iter) {
      iter = IndexedIterable(iter);
      if (iter.size === 0) {
        return this;
      }
      assertNotInfinite(iter.size);
      var newSize = this.size;
      var head = this._head;
      iter.reverse().forEach(function(value ) {
        newSize++;
        head = {
          value: value,
          next: head
        };
      });
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };

    Stack.prototype.pop = function() {
      return this.slice(1);
    };

    Stack.prototype.unshift = function(/*...values*/) {
      return this.push.apply(this, arguments);
    };

    Stack.prototype.unshiftAll = function(iter) {
      return this.pushAll(iter);
    };

    Stack.prototype.shift = function() {
      return this.pop.apply(this, arguments);
    };

    Stack.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._head = undefined;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return emptyStack();
    };

    Stack.prototype.slice = function(begin, end) {
      if (wholeSlice(begin, end, this.size)) {
        return this;
      }
      var resolvedBegin = resolveBegin(begin, this.size);
      var resolvedEnd = resolveEnd(end, this.size);
      if (resolvedEnd !== this.size) {
        // super.slice(begin, end);
        return IndexedCollection.prototype.slice.call(this, begin, end);
      }
      var newSize = this.size - resolvedBegin;
      var head = this._head;
      while (resolvedBegin--) {
        head = head.next;
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };

    // @pragma Mutability

    Stack.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeStack(this.size, this._head, ownerID, this.__hash);
    };

    // @pragma Iteration

    Stack.prototype.__iterate = function(fn, reverse) {
      if (reverse) {
        return this.reverse().__iterate(fn);
      }
      var iterations = 0;
      var node = this._head;
      while (node) {
        if (fn(node.value, iterations++, this) === false) {
          break;
        }
        node = node.next;
      }
      return iterations;
    };

    Stack.prototype.__iterator = function(type, reverse) {
      if (reverse) {
        return this.reverse().__iterator(type);
      }
      var iterations = 0;
      var node = this._head;
      return new src_Iterator__Iterator(function()  {
        if (node) {
          var value = node.value;
          node = node.next;
          return iteratorValue(type, iterations++, value);
        }
        return iteratorDone();
      });
    };


  function isStack(maybeStack) {
    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
  }

  Stack.isStack = isStack;

  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

  var StackPrototype = Stack.prototype;
  StackPrototype[IS_STACK_SENTINEL] = true;
  StackPrototype.withMutations = MapPrototype.withMutations;
  StackPrototype.asMutable = MapPrototype.asMutable;
  StackPrototype.asImmutable = MapPrototype.asImmutable;
  StackPrototype.wasAltered = MapPrototype.wasAltered;


  function makeStack(size, head, ownerID, hash) {
    var map = Object.create(StackPrototype);
    map.size = size;
    map._head = head;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_STACK;
  function emptyStack() {
    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
  }

  createClass(src_Set__Set, SetCollection);

    // @pragma Construction

    function src_Set__Set(value) {
      return value === null || value === undefined ? emptySet() :
        isSet(value) && !isOrdered(value) ? value :
        emptySet().withMutations(function(set ) {
          var iter = SetIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v ) {return set.add(v)});
        });
    }

    src_Set__Set.of = function(/*...values*/) {
      return this(arguments);
    };

    src_Set__Set.fromKeys = function(value) {
      return this(KeyedIterable(value).keySeq());
    };

    src_Set__Set.prototype.toString = function() {
      return this.__toString('Set {', '}');
    };

    // @pragma Access

    src_Set__Set.prototype.has = function(value) {
      return this._map.has(value);
    };

    // @pragma Modification

    src_Set__Set.prototype.add = function(value) {
      return updateSet(this, this._map.set(value, true));
    };

    src_Set__Set.prototype.remove = function(value) {
      return updateSet(this, this._map.remove(value));
    };

    src_Set__Set.prototype.clear = function() {
      return updateSet(this, this._map.clear());
    };

    // @pragma Composition

    src_Set__Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);
      iters = iters.filter(function(x ) {return x.size !== 0});
      if (iters.length === 0) {
        return this;
      }
      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
        return this.constructor(iters[0]);
      }
      return this.withMutations(function(set ) {
        for (var ii = 0; ii < iters.length; ii++) {
          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});
        }
      });
    };

    src_Set__Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter ) {return SetIterable(iter)});
      var originalSet = this;
      return this.withMutations(function(set ) {
        originalSet.forEach(function(value ) {
          if (!iters.every(function(iter ) {return iter.includes(value)})) {
            set.remove(value);
          }
        });
      });
    };

    src_Set__Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter ) {return SetIterable(iter)});
      var originalSet = this;
      return this.withMutations(function(set ) {
        originalSet.forEach(function(value ) {
          if (iters.some(function(iter ) {return iter.includes(value)})) {
            set.remove(value);
          }
        });
      });
    };

    src_Set__Set.prototype.merge = function() {
      return this.union.apply(this, arguments);
    };

    src_Set__Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return this.union.apply(this, iters);
    };

    src_Set__Set.prototype.sort = function(comparator) {
      // Late binding
      return OrderedSet(sortFactory(this, comparator));
    };

    src_Set__Set.prototype.sortBy = function(mapper, comparator) {
      // Late binding
      return OrderedSet(sortFactory(this, comparator, mapper));
    };

    src_Set__Set.prototype.wasAltered = function() {
      return this._map.wasAltered();
    };

    src_Set__Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);
    };

    src_Set__Set.prototype.__iterator = function(type, reverse) {
      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);
    };

    src_Set__Set.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return this.__make(newMap, ownerID);
    };


  function isSet(maybeSet) {
    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
  }

  src_Set__Set.isSet = isSet;

  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

  var SetPrototype = src_Set__Set.prototype;
  SetPrototype[IS_SET_SENTINEL] = true;
  SetPrototype[DELETE] = SetPrototype.remove;
  SetPrototype.mergeDeep = SetPrototype.merge;
  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
  SetPrototype.withMutations = MapPrototype.withMutations;
  SetPrototype.asMutable = MapPrototype.asMutable;
  SetPrototype.asImmutable = MapPrototype.asImmutable;

  SetPrototype.__empty = emptySet;
  SetPrototype.__make = makeSet;

  function updateSet(set, newMap) {
    if (set.__ownerID) {
      set.size = newMap.size;
      set._map = newMap;
      return set;
    }
    return newMap === set._map ? set :
      newMap.size === 0 ? set.__empty() :
      set.__make(newMap);
  }

  function makeSet(map, ownerID) {
    var set = Object.create(SetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_SET;
  function emptySet() {
    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
  }

  createClass(OrderedSet, src_Set__Set);

    // @pragma Construction

    function OrderedSet(value) {
      return value === null || value === undefined ? emptyOrderedSet() :
        isOrderedSet(value) ? value :
        emptyOrderedSet().withMutations(function(set ) {
          var iter = SetIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v ) {return set.add(v)});
        });
    }

    OrderedSet.of = function(/*...values*/) {
      return this(arguments);
    };

    OrderedSet.fromKeys = function(value) {
      return this(KeyedIterable(value).keySeq());
    };

    OrderedSet.prototype.toString = function() {
      return this.__toString('OrderedSet {', '}');
    };


  function isOrderedSet(maybeOrderedSet) {
    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
  }

  OrderedSet.isOrderedSet = isOrderedSet;

  var OrderedSetPrototype = OrderedSet.prototype;
  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

  OrderedSetPrototype.__empty = emptyOrderedSet;
  OrderedSetPrototype.__make = makeOrderedSet;

  function makeOrderedSet(map, ownerID) {
    var set = Object.create(OrderedSetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_ORDERED_SET;
  function emptyOrderedSet() {
    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
  }

  createClass(Record, KeyedCollection);

    function Record(defaultValues, name) {
      var hasInitialized;

      var RecordType = function Record(values) {
        if (values instanceof RecordType) {
          return values;
        }
        if (!(this instanceof RecordType)) {
          return new RecordType(values);
        }
        if (!hasInitialized) {
          hasInitialized = true;
          var keys = Object.keys(defaultValues);
          setProps(RecordTypePrototype, keys);
          RecordTypePrototype.size = keys.length;
          RecordTypePrototype._name = name;
          RecordTypePrototype._keys = keys;
          RecordTypePrototype._defaultValues = defaultValues;
        }
        this._map = src_Map__Map(values);
      };

      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
      RecordTypePrototype.constructor = RecordType;

      return RecordType;
    }

    Record.prototype.toString = function() {
      return this.__toString(recordName(this) + ' {', '}');
    };

    // @pragma Access

    Record.prototype.has = function(k) {
      return this._defaultValues.hasOwnProperty(k);
    };

    Record.prototype.get = function(k, notSetValue) {
      if (!this.has(k)) {
        return notSetValue;
      }
      var defaultVal = this._defaultValues[k];
      return this._map ? this._map.get(k, defaultVal) : defaultVal;
    };

    // @pragma Modification

    Record.prototype.clear = function() {
      if (this.__ownerID) {
        this._map && this._map.clear();
        return this;
      }
      var RecordType = this.constructor;
      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
    };

    Record.prototype.set = function(k, v) {
      if (!this.has(k)) {
        throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
      }
      var newMap = this._map && this._map.set(k, v);
      if (this.__ownerID || newMap === this._map) {
        return this;
      }
      return makeRecord(this, newMap);
    };

    Record.prototype.remove = function(k) {
      if (!this.has(k)) {
        return this;
      }
      var newMap = this._map && this._map.remove(k);
      if (this.__ownerID || newMap === this._map) {
        return this;
      }
      return makeRecord(this, newMap);
    };

    Record.prototype.wasAltered = function() {
      return this._map.wasAltered();
    };

    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;
      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);
    };

    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);
    };

    Record.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map && this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return makeRecord(this, newMap, ownerID);
    };


  var RecordPrototype = Record.prototype;
  RecordPrototype[DELETE] = RecordPrototype.remove;
  RecordPrototype.deleteIn =
  RecordPrototype.removeIn = MapPrototype.removeIn;
  RecordPrototype.merge = MapPrototype.merge;
  RecordPrototype.mergeWith = MapPrototype.mergeWith;
  RecordPrototype.mergeIn = MapPrototype.mergeIn;
  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  RecordPrototype.setIn = MapPrototype.setIn;
  RecordPrototype.update = MapPrototype.update;
  RecordPrototype.updateIn = MapPrototype.updateIn;
  RecordPrototype.withMutations = MapPrototype.withMutations;
  RecordPrototype.asMutable = MapPrototype.asMutable;
  RecordPrototype.asImmutable = MapPrototype.asImmutable;


  function makeRecord(likeRecord, map, ownerID) {
    var record = Object.create(Object.getPrototypeOf(likeRecord));
    record._map = map;
    record.__ownerID = ownerID;
    return record;
  }

  function recordName(record) {
    return record._name || record.constructor.name || 'Record';
  }

  function setProps(prototype, names) {
    try {
      names.forEach(setProp.bind(undefined, prototype));
    } catch (error) {
      // Object.defineProperty failed. Probably IE8.
    }
  }

  function setProp(prototype, name) {
    Object.defineProperty(prototype, name, {
      get: function() {
        return this.get(name);
      },
      set: function(value) {
        invariant(this.__ownerID, 'Cannot set on an immutable record.');
        this.set(name, value);
      }
    });
  }

  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }

    if (
      !isIterable(b) ||
      a.size !== undefined && b.size !== undefined && a.size !== b.size ||
      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||
      isKeyed(a) !== isKeyed(b) ||
      isIndexed(a) !== isIndexed(b) ||
      isOrdered(a) !== isOrdered(b)
    ) {
      return false;
    }

    if (a.size === 0 && b.size === 0) {
      return true;
    }

    var notAssociative = !isAssociative(a);

    if (isOrdered(a)) {
      var entries = a.entries();
      return b.every(function(v, k)  {
        var entry = entries.next().value;
        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
      }) && entries.next().done;
    }

    var flipped = false;

    if (a.size === undefined) {
      if (b.size === undefined) {
        if (typeof a.cacheResult === 'function') {
          a.cacheResult();
        }
      } else {
        flipped = true;
        var _ = a;
        a = b;
        b = _;
      }
    }

    var allEqual = true;
    var bSize = b.__iterate(function(v, k)  {
      if (notAssociative ? !a.has(v) :
          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
        allEqual = false;
        return false;
      }
    });

    return allEqual && a.size === bSize;
  }

  createClass(Range, IndexedSeq);

    function Range(start, end, step) {
      if (!(this instanceof Range)) {
        return new Range(start, end, step);
      }
      invariant(step !== 0, 'Cannot step a Range by 0');
      start = start || 0;
      if (end === undefined) {
        end = Infinity;
      }
      step = step === undefined ? 1 : Math.abs(step);
      if (end < start) {
        step = -step;
      }
      this._start = start;
      this._end = end;
      this._step = step;
      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
      if (this.size === 0) {
        if (EMPTY_RANGE) {
          return EMPTY_RANGE;
        }
        EMPTY_RANGE = this;
      }
    }

    Range.prototype.toString = function() {
      if (this.size === 0) {
        return 'Range []';
      }
      return 'Range [ ' +
        this._start + '...' + this._end +
        (this._step > 1 ? ' by ' + this._step : '') +
      ' ]';
    };

    Range.prototype.get = function(index, notSetValue) {
      return this.has(index) ?
        this._start + wrapIndex(this, index) * this._step :
        notSetValue;
    };

    Range.prototype.includes = function(searchValue) {
      var possibleIndex = (searchValue - this._start) / this._step;
      return possibleIndex >= 0 &&
        possibleIndex < this.size &&
        possibleIndex === Math.floor(possibleIndex);
    };

    Range.prototype.slice = function(begin, end) {
      if (wholeSlice(begin, end, this.size)) {
        return this;
      }
      begin = resolveBegin(begin, this.size);
      end = resolveEnd(end, this.size);
      if (end <= begin) {
        return new Range(0, 0);
      }
      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
    };

    Range.prototype.indexOf = function(searchValue) {
      var offsetValue = searchValue - this._start;
      if (offsetValue % this._step === 0) {
        var index = offsetValue / this._step;
        if (index >= 0 && index < this.size) {
          return index
        }
      }
      return -1;
    };

    Range.prototype.lastIndexOf = function(searchValue) {
      return this.indexOf(searchValue);
    };

    Range.prototype.__iterate = function(fn, reverse) {
      var maxIndex = this.size - 1;
      var step = this._step;
      var value = reverse ? this._start + maxIndex * step : this._start;
      for (var ii = 0; ii <= maxIndex; ii++) {
        if (fn(value, ii, this) === false) {
          return ii + 1;
        }
        value += reverse ? -step : step;
      }
      return ii;
    };

    Range.prototype.__iterator = function(type, reverse) {
      var maxIndex = this.size - 1;
      var step = this._step;
      var value = reverse ? this._start + maxIndex * step : this._start;
      var ii = 0;
      return new src_Iterator__Iterator(function()  {
        var v = value;
        value += reverse ? -step : step;
        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
      });
    };

    Range.prototype.equals = function(other) {
      return other instanceof Range ?
        this._start === other._start &&
        this._end === other._end &&
        this._step === other._step :
        deepEqual(this, other);
    };


  var EMPTY_RANGE;

  createClass(Repeat, IndexedSeq);

    function Repeat(value, times) {
      if (!(this instanceof Repeat)) {
        return new Repeat(value, times);
      }
      this._value = value;
      this.size = times === undefined ? Infinity : Math.max(0, times);
      if (this.size === 0) {
        if (EMPTY_REPEAT) {
          return EMPTY_REPEAT;
        }
        EMPTY_REPEAT = this;
      }
    }

    Repeat.prototype.toString = function() {
      if (this.size === 0) {
        return 'Repeat []';
      }
      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
    };

    Repeat.prototype.get = function(index, notSetValue) {
      return this.has(index) ? this._value : notSetValue;
    };

    Repeat.prototype.includes = function(searchValue) {
      return is(this._value, searchValue);
    };

    Repeat.prototype.slice = function(begin, end) {
      var size = this.size;
      return wholeSlice(begin, end, size) ? this :
        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
    };

    Repeat.prototype.reverse = function() {
      return this;
    };

    Repeat.prototype.indexOf = function(searchValue) {
      if (is(this._value, searchValue)) {
        return 0;
      }
      return -1;
    };

    Repeat.prototype.lastIndexOf = function(searchValue) {
      if (is(this._value, searchValue)) {
        return this.size;
      }
      return -1;
    };

    Repeat.prototype.__iterate = function(fn, reverse) {
      for (var ii = 0; ii < this.size; ii++) {
        if (fn(this._value, ii, this) === false) {
          return ii + 1;
        }
      }
      return ii;
    };

    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;
      var ii = 0;
      return new src_Iterator__Iterator(function() 
        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}
      );
    };

    Repeat.prototype.equals = function(other) {
      return other instanceof Repeat ?
        is(this._value, other._value) :
        deepEqual(other);
    };


  var EMPTY_REPEAT;

  /**
   * Contributes additional methods to a constructor
   */
  function mixin(ctor, methods) {
    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };
    Object.keys(methods).forEach(keyCopier);
    Object.getOwnPropertySymbols &&
      Object.getOwnPropertySymbols(methods).forEach(keyCopier);
    return ctor;
  }

  Iterable.Iterator = src_Iterator__Iterator;

  mixin(Iterable, {

    // ### Conversion to other types

    toArray: function() {
      assertNotInfinite(this.size);
      var array = new Array(this.size || 0);
      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });
      return array;
    },

    toIndexedSeq: function() {
      return new ToIndexedSequence(this);
    },

    toJS: function() {
      return this.toSeq().map(
        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}
      ).__toJS();
    },

    toJSON: function() {
      return this.toSeq().map(
        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}
      ).__toJS();
    },

    toKeyedSeq: function() {
      return new ToKeyedSequence(this, true);
    },

    toMap: function() {
      // Use Late Binding here to solve the circular dependency.
      return src_Map__Map(this.toKeyedSeq());
    },

    toObject: function() {
      assertNotInfinite(this.size);
      var object = {};
      this.__iterate(function(v, k)  { object[k] = v; });
      return object;
    },

    toOrderedMap: function() {
      // Use Late Binding here to solve the circular dependency.
      return OrderedMap(this.toKeyedSeq());
    },

    toOrderedSet: function() {
      // Use Late Binding here to solve the circular dependency.
      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
    },

    toSet: function() {
      // Use Late Binding here to solve the circular dependency.
      return src_Set__Set(isKeyed(this) ? this.valueSeq() : this);
    },

    toSetSeq: function() {
      return new ToSetSequence(this);
    },

    toSeq: function() {
      return isIndexed(this) ? this.toIndexedSeq() :
        isKeyed(this) ? this.toKeyedSeq() :
        this.toSetSeq();
    },

    toStack: function() {
      // Use Late Binding here to solve the circular dependency.
      return Stack(isKeyed(this) ? this.valueSeq() : this);
    },

    toList: function() {
      // Use Late Binding here to solve the circular dependency.
      return List(isKeyed(this) ? this.valueSeq() : this);
    },


    // ### Common JavaScript methods and properties

    toString: function() {
      return '[Iterable]';
    },

    __toString: function(head, tail) {
      if (this.size === 0) {
        return head + tail;
      }
      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
    },


    // ### ES6 Collection methods (ES6 Array and Map)

    concat: function() {var values = SLICE$0.call(arguments, 0);
      return reify(this, concatFactory(this, values));
    },

    includes: function(searchValue) {
      return this.some(function(value ) {return is(value, searchValue)});
    },

    entries: function() {
      return this.__iterator(ITERATE_ENTRIES);
    },

    every: function(predicate, context) {
      assertNotInfinite(this.size);
      var returnValue = true;
      this.__iterate(function(v, k, c)  {
        if (!predicate.call(context, v, k, c)) {
          returnValue = false;
          return false;
        }
      });
      return returnValue;
    },

    filter: function(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, true));
    },

    find: function(predicate, context, notSetValue) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[1] : notSetValue;
    },

    findEntry: function(predicate, context) {
      var found;
      this.__iterate(function(v, k, c)  {
        if (predicate.call(context, v, k, c)) {
          found = [k, v];
          return false;
        }
      });
      return found;
    },

    findLastEntry: function(predicate, context) {
      return this.toSeq().reverse().findEntry(predicate, context);
    },

    forEach: function(sideEffect, context) {
      assertNotInfinite(this.size);
      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
    },

    join: function(separator) {
      assertNotInfinite(this.size);
      separator = separator !== undefined ? '' + separator : ',';
      var joined = '';
      var isFirst = true;
      this.__iterate(function(v ) {
        isFirst ? (isFirst = false) : (joined += separator);
        joined += v !== null && v !== undefined ? v.toString() : '';
      });
      return joined;
    },

    keys: function() {
      return this.__iterator(ITERATE_KEYS);
    },

    map: function(mapper, context) {
      return reify(this, mapFactory(this, mapper, context));
    },

    reduce: function(reducer, initialReduction, context) {
      assertNotInfinite(this.size);
      var reduction;
      var useFirst;
      if (arguments.length < 2) {
        useFirst = true;
      } else {
        reduction = initialReduction;
      }
      this.__iterate(function(v, k, c)  {
        if (useFirst) {
          useFirst = false;
          reduction = v;
        } else {
          reduction = reducer.call(context, reduction, v, k, c);
        }
      });
      return reduction;
    },

    reduceRight: function(reducer, initialReduction, context) {
      var reversed = this.toKeyedSeq().reverse();
      return reversed.reduce.apply(reversed, arguments);
    },

    reverse: function() {
      return reify(this, reverseFactory(this, true));
    },

    slice: function(begin, end) {
      return reify(this, sliceFactory(this, begin, end, true));
    },

    some: function(predicate, context) {
      return !this.every(not(predicate), context);
    },

    sort: function(comparator) {
      return reify(this, sortFactory(this, comparator));
    },

    values: function() {
      return this.__iterator(ITERATE_VALUES);
    },


    // ### More sequential methods

    butLast: function() {
      return this.slice(0, -1);
    },

    isEmpty: function() {
      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});
    },

    count: function(predicate, context) {
      return ensureSize(
        predicate ? this.toSeq().filter(predicate, context) : this
      );
    },

    countBy: function(grouper, context) {
      return countByFactory(this, grouper, context);
    },

    equals: function(other) {
      return deepEqual(this, other);
    },

    entrySeq: function() {
      var iterable = this;
      if (iterable._cache) {
        // We cache as an entries array, so we can just return the cache!
        return new ArraySeq(iterable._cache);
      }
      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};
      return entriesSequence;
    },

    filterNot: function(predicate, context) {
      return this.filter(not(predicate), context);
    },

    findLast: function(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
    },

    first: function() {
      return this.find(returnTrue);
    },

    flatMap: function(mapper, context) {
      return reify(this, flatMapFactory(this, mapper, context));
    },

    flatten: function(depth) {
      return reify(this, flattenFactory(this, depth, true));
    },

    fromEntrySeq: function() {
      return new FromEntriesSequence(this);
    },

    get: function(searchKey, notSetValue) {
      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);
    },

    getIn: function(searchKeyPath, notSetValue) {
      var nested = this;
      // Note: in an ES6 environment, we would prefer:
      // for (var key of searchKeyPath) {
      var iter = forceIterator(searchKeyPath);
      var step;
      while (!(step = iter.next()).done) {
        var key = step.value;
        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
        if (nested === NOT_SET) {
          return notSetValue;
        }
      }
      return nested;
    },

    groupBy: function(grouper, context) {
      return groupByFactory(this, grouper, context);
    },

    has: function(searchKey) {
      return this.get(searchKey, NOT_SET) !== NOT_SET;
    },

    hasIn: function(searchKeyPath) {
      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
    },

    isSubset: function(iter) {
      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
      return this.every(function(value ) {return iter.includes(value)});
    },

    isSuperset: function(iter) {
      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
      return iter.isSubset(this);
    },

    keySeq: function() {
      return this.toSeq().map(keyMapper).toIndexedSeq();
    },

    last: function() {
      return this.toSeq().reverse().first();
    },

    max: function(comparator) {
      return maxFactory(this, comparator);
    },

    maxBy: function(mapper, comparator) {
      return maxFactory(this, comparator, mapper);
    },

    min: function(comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
    },

    minBy: function(mapper, comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
    },

    rest: function() {
      return this.slice(1);
    },

    skip: function(amount) {
      return this.slice(Math.max(0, amount));
    },

    skipLast: function(amount) {
      return reify(this, this.toSeq().reverse().skip(amount).reverse());
    },

    skipWhile: function(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, true));
    },

    skipUntil: function(predicate, context) {
      return this.skipWhile(not(predicate), context);
    },

    sortBy: function(mapper, comparator) {
      return reify(this, sortFactory(this, comparator, mapper));
    },

    take: function(amount) {
      return this.slice(0, Math.max(0, amount));
    },

    takeLast: function(amount) {
      return reify(this, this.toSeq().reverse().take(amount).reverse());
    },

    takeWhile: function(predicate, context) {
      return reify(this, takeWhileFactory(this, predicate, context));
    },

    takeUntil: function(predicate, context) {
      return this.takeWhile(not(predicate), context);
    },

    valueSeq: function() {
      return this.toIndexedSeq();
    },


    // ### Hashable Object

    hashCode: function() {
      return this.__hash || (this.__hash = hashIterable(this));
    }


    // ### Internal

    // abstract __iterate(fn, reverse)

    // abstract __iterator(type, reverse)
  });

  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  var IterablePrototype = Iterable.prototype;
  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
  IterablePrototype.__toJS = IterablePrototype.toArray;
  IterablePrototype.__toStringMapper = quoteString;
  IterablePrototype.inspect =
  IterablePrototype.toSource = function() { return this.toString(); };
  IterablePrototype.chain = IterablePrototype.flatMap;
  IterablePrototype.contains = IterablePrototype.includes;

  // Temporary warning about using length
  (function () {
    try {
      Object.defineProperty(IterablePrototype, 'length', {
        get: function () {
          if (!Iterable.noLengthWarning) {
            var stack;
            try {
              throw new Error();
            } catch (error) {
              stack = error.stack;
            }
            if (stack.indexOf('_wrapObject') === -1) {
              console && console.warn && console.warn(
                'iterable.length has been deprecated, '+
                'use iterable.size or iterable.count(). '+
                'This warning will become a silent error in a future version. ' +
                stack
              );
              return this.size;
            }
          }
        }
      });
    } catch (e) {}
  })();



  mixin(KeyedIterable, {

    // ### More sequential methods

    flip: function() {
      return reify(this, flipFactory(this));
    },

    findKey: function(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry && entry[0];
    },

    findLastKey: function(predicate, context) {
      return this.toSeq().reverse().findKey(predicate, context);
    },

    keyOf: function(searchValue) {
      return this.findKey(function(value ) {return is(value, searchValue)});
    },

    lastKeyOf: function(searchValue) {
      return this.findLastKey(function(value ) {return is(value, searchValue)});
    },

    mapEntries: function(mapper, context) {var this$0 = this;
      var iterations = 0;
      return reify(this,
        this.toSeq().map(
          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}
        ).fromEntrySeq()
      );
    },

    mapKeys: function(mapper, context) {var this$0 = this;
      return reify(this,
        this.toSeq().flip().map(
          function(k, v)  {return mapper.call(context, k, v, this$0)}
        ).flip()
      );
    }

  });

  var KeyedIterablePrototype = KeyedIterable.prototype;
  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};



  mixin(IndexedIterable, {

    // ### Conversion to other types

    toKeyedSeq: function() {
      return new ToKeyedSequence(this, false);
    },


    // ### ES6 Collection methods (ES6 Array and Map)

    filter: function(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, false));
    },

    findIndex: function(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    indexOf: function(searchValue) {
      var key = this.toKeyedSeq().keyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    lastIndexOf: function(searchValue) {
      return this.toSeq().reverse().indexOf(searchValue);
    },

    reverse: function() {
      return reify(this, reverseFactory(this, false));
    },

    slice: function(begin, end) {
      return reify(this, sliceFactory(this, begin, end, false));
    },

    splice: function(index, removeNum /*, ...values*/) {
      var numArgs = arguments.length;
      removeNum = Math.max(removeNum | 0, 0);
      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
        return this;
      }
      // If index is negative, it should resolve relative to the size of the
      // collection. However size may be expensive to compute if not cached, so
      // only call count() if the number is in fact negative.
      index = resolveBegin(index, index < 0 ? this.count() : this.size);
      var spliced = this.slice(0, index);
      return reify(
        this,
        numArgs === 1 ?
          spliced :
          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
      );
    },


    // ### More collection methods

    findLastIndex: function(predicate, context) {
      var key = this.toKeyedSeq().findLastKey(predicate, context);
      return key === undefined ? -1 : key;
    },

    first: function() {
      return this.get(0);
    },

    flatten: function(depth) {
      return reify(this, flattenFactory(this, depth, false));
    },

    get: function(index, notSetValue) {
      index = wrapIndex(this, index);
      return (index < 0 || (this.size === Infinity ||
          (this.size !== undefined && index > this.size))) ?
        notSetValue :
        this.find(function(_, key)  {return key === index}, undefined, notSetValue);
    },

    has: function(index) {
      index = wrapIndex(this, index);
      return index >= 0 && (this.size !== undefined ?
        this.size === Infinity || index < this.size :
        this.indexOf(index) !== -1
      );
    },

    interpose: function(separator) {
      return reify(this, interposeFactory(this, separator));
    },

    interleave: function(/*...iterables*/) {
      var iterables = [this].concat(arrCopy(arguments));
      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
      var interleaved = zipped.flatten(true);
      if (zipped.size) {
        interleaved.size = zipped.size * iterables.length;
      }
      return reify(this, interleaved);
    },

    last: function() {
      return this.get(-1);
    },

    skipWhile: function(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, false));
    },

    zip: function(/*, ...iterables */) {
      var iterables = [this].concat(arrCopy(arguments));
      return reify(this, zipWithFactory(this, defaultZipper, iterables));
    },

    zipWith: function(zipper/*, ...iterables */) {
      var iterables = arrCopy(arguments);
      iterables[0] = this;
      return reify(this, zipWithFactory(this, zipper, iterables));
    }

  });

  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;



  mixin(SetIterable, {

    // ### ES6 Collection methods (ES6 Array and Map)

    get: function(value, notSetValue) {
      return this.has(value) ? value : notSetValue;
    },

    includes: function(value) {
      return this.has(value);
    },


    // ### More sequential methods

    keySeq: function() {
      return this.valueSeq();
    }

  });

  SetIterable.prototype.has = IterablePrototype.includes;


  // Mixin subclasses

  mixin(KeyedSeq, KeyedIterable.prototype);
  mixin(IndexedSeq, IndexedIterable.prototype);
  mixin(SetSeq, SetIterable.prototype);

  mixin(KeyedCollection, KeyedIterable.prototype);
  mixin(IndexedCollection, IndexedIterable.prototype);
  mixin(SetCollection, SetIterable.prototype);


  // #pragma Helper functions

  function keyMapper(v, k) {
    return k;
  }

  function entryMapper(v, k) {
    return [k, v];
  }

  function not(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    }
  }

  function neg(predicate) {
    return function() {
      return -predicate.apply(this, arguments);
    }
  }

  function quoteString(value) {
    return typeof value === 'string' ? JSON.stringify(value) : value;
  }

  function defaultZipper() {
    return arrCopy(arguments);
  }

  function defaultNegComparator(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
  }

  function hashIterable(iterable) {
    if (iterable.size === Infinity) {
      return 0;
    }
    var ordered = isOrdered(iterable);
    var keyed = isKeyed(iterable);
    var h = ordered ? 1 : 0;
    var size = iterable.__iterate(
      keyed ?
        ordered ?
          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :
          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :
        ordered ?
          function(v ) { h = 31 * h + hash(v) | 0; } :
          function(v ) { h = h + hash(v) | 0; }
    );
    return murmurHashOfSize(size, h);
  }

  function murmurHashOfSize(size, h) {
    h = src_Math__imul(h, 0xCC9E2D51);
    h = src_Math__imul(h << 15 | h >>> -15, 0x1B873593);
    h = src_Math__imul(h << 13 | h >>> -13, 5);
    h = (h + 0xE6546B64 | 0) ^ size;
    h = src_Math__imul(h ^ h >>> 16, 0x85EBCA6B);
    h = src_Math__imul(h ^ h >>> 13, 0xC2B2AE35);
    h = smi(h ^ h >>> 16);
    return h;
  }

  function hashMerge(a, b) {
    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
  }

  var Immutable = {

    Iterable: Iterable,

    Seq: Seq,
    Collection: Collection,
    Map: src_Map__Map,
    OrderedMap: OrderedMap,
    List: List,
    Stack: Stack,
    Set: src_Set__Set,
    OrderedSet: OrderedSet,

    Record: Record,
    Range: Range,
    Repeat: Repeat,

    is: is,
    fromJS: fromJS

  };

  return Immutable;

}));
},{}],53:[function(require,module,exports){
module.exports=[
    "biatch",
    "bitch",
    "chinaman",
    "chinamen",
    "chink",
    "crip",
    "cunt",
    "dago",
    "daygo",
    "dego",
    "dick",
    "douchebag",
    "dyke",
    "fag",
    "fatass",
    "fatso",
    "gash",
    "gimp",
    "golliwog",
    "gook",
    "gyp",
    "homo",
    "hooker",
    "jap",
    "kike",
    "kraut",
    "lardass",
    "lesbo",
    "negro",
    "nigger",
    "paki",
    "pussy",
    "raghead",
    "retard",
    "shemale",
    "skank",
    "slut",
    "spic",
    "tard",
    "tits",
    "titt",
    "trannies",
    "tranny",
    "twat",
    "wetback",
    "whore",
    "wop"
]

},{}],54:[function(require,module,exports){
/*
 * wordfilter
 * https://github.com/dariusk/wordfilter
 *
 * Copyright (c) 2013 Darius Kazemi
 * Licensed under the MIT license.
 */

'use strict';

var blacklist, regex;

function rebuild() {
  regex = new RegExp(blacklist.join('|'), 'i');
}

blacklist = require('./badwords.json');
rebuild();

module.exports = {
  blacklisted: function(string) {
    return !!blacklist.length && regex.test(string);
  },
  addWords: function(array) {
    blacklist = blacklist.concat(array);
    rebuild();
  },
  removeWord: function(word) {
    var index = blacklist.indexOf(word);
    if (index > -1) {
      blacklist.splice(index, 1);
      rebuild();
    }
  },
  clearList: function() {
    blacklist = [];
    rebuild();
  },
};

},{"./badwords.json":53}],55:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],56:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],57:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":56,"_process":34,"inherits":25}],58:[function(require,module,exports){
var pick = require('pick-random')
var imageMap = require('./imageMap')
var cap = require('capitalize')

var absence = require('./actors/absence')
var baes = require('./actors/baes')
var snake_oil = require('./actors/snake_oil')
var snowballer = require('./actors/snowballer')

var imageMap = require('./imageMap')

var actors = [absence, baes, snake_oil, snowballer]
module.exports = function (name, num, topics) {
  var section = document.createElement('section') // nice semantics here
  section.className = 'section'


  var cover = document.createElement('center') // nice semantics here
  cover.className = 'page'

  var heading  = document.createElement('h1')
  heading.textContent = name
  cover.appendChild(heading)

  for (var i = 0; i < 4; i++) {
    var subImage = document.createElement('img')
    subImage.className = 'section--img'
    subImage.src = pick(pick(imageMap)[0])[0]
    cover.appendChild(subImage)

    if (i == 1) {
      cover.appendChild(document.createElement('br'))
    }
  }


  section.appendChild(cover)

  for (var i = 0; i < 7; i++) {
    var page = document.createElement('center') // nice semantics here
    page.className = 'page'


    for (var j = 0; j < 20; j++) {
      var item = document.createElement('div')
      item.className = 'item'

      var actor = pick(actors)[0]
      var itemImg = document.createElement('img')
      itemImg.className = 'item--img'
      itemImg.src = pick(pick(imageMap)[0])[0]
      item.appendChild(itemImg)

      var text = document.createElement('h' + (~~(Math.random() * 5) + 2))
      text.textContent = actor((~~(Math.random() * 7) + 3))
      item.appendChild(itemImg)
      item.appendChild(text)
      if (Math.random() < 0.75) {
        var summary = document.createElement('center')
        summary.textContent = actor((~~(Math.random() * 12) + 7))
        item.appendChild(summary)
      } else if (Math.random() < 0.5) {
        var list = document.createElement('ol')
        list.className = 'item--list'
        topics.forEach(function (topic) {
          var el = document.createElement('li')
          el.textContent = actor((~~(Math.random() * 12) + 7))
          list.appendChild(el)
        })
        item.appendChild(list)
      } else {
        var author = document.createElement('h5')
        author.textContent = 'by ' + actor(3).split(' ').map(function (w) {return cap(w)})
        var opEd = document.createElement('div')
        opEd.textContent = [1,2,3,4,5,6,7,8,9,10,11,12].map(function (i) {
          return actor(i + ~~(Math.random() * 25))
        }).join('. ')
        item.appendChild(author)
        item.appendChild(opEd)
      }
      page.appendChild(item)
    }
    section.appendChild(page)
  }
  return section
}

},{"./actors/absence":1,"./actors/baes":2,"./actors/snake_oil":3,"./actors/snowballer":4,"./imageMap":10,"capitalize":21,"pick-random":32}],59:[function(require,module,exports){
var q = require('queneau-buckets')()
q.seed(require('./corpuses/subtitles'))

module.exports = function () {
  return q.fill(~~(Math.random() * 3) + 2).toUpperCase()
}

},{"./corpuses/subtitles":7,"queneau-buckets":35}],60:[function(require,module,exports){
var q = require('queneau-buckets')()
q.seed(require('./corpuses/TOC'))

module.exports = function () {
  return [1, 2, 3, 4, 5, 6, 7].map(function () {
    var sec = q.fill(~~(Math.random() * 3) + 2)
    console.log(sec)
    return sec.toUpperCase()
  })
}

},{"./corpuses/TOC":5,"queneau-buckets":35}],61:[function(require,module,exports){

var pick = require('pick-random')
module.exports = function (topics) {


  var tocPage = document.createElement('section')
  tocPage.className = 'toc page'
  var centoc = document.createElement('center')
  var headline = document.createElement('h1')
  headline.className = 'toc--headline'
  headline.textContent = 'THEE NULLE EARTHE CATALOGE'
  centoc.appendChild(headline)


  var list = document.createElement('ol')
  list.className = 'toc--list'

  topics.forEach(function (topic) {
    var el = document.createElement('li')
    el.className = 'toc--header'
    el.textContent = topic.toUpperCase()
    list.appendChild(el)
  })


  centoc.appendChild(list)
  tocPage.appendChild(centoc)
  return tocPage
}
},{"pick-random":32}],62:[function(require,module,exports){

var pick = require('pick-random')
var imageMap = require('./imageMap')
var missionStatement = require('./missionStatement')()
module.exports = function (uses) {


  var usePage = document.createElement('section')
  usePage.className = 'use page'



  var cento = document.createElement('center')
  var headline = document.createElement('h1')
  headline.className = 'use--headline'
  headline.textContent = 'HOW 2 USE THIS TEXT'
  cento.appendChild(headline)


  var list = document.createElement('ol')
  list.className = 'use--list'

  uses.forEach(function (use) {
    var el = document.createElement('li')
    el.className = 'use--header'
    el.textContent = use.toUpperCase()
    list.appendChild(el)
  })

  cento.appendChild(list)

  var subImage = document.createElement('img')
  subImage.className = 'use--img'
  subImage.src = pick(pick(imageMap)[0])[0]
  cento.appendChild(subImage)

  var theMission = document.createElement('div')
  theMission.className = 'use--mission'
  theMission.textContent = missionStatement
  cento.appendChild(theMission)
  usePage.appendChild(cento)
  return usePage
}
},{"./imageMap":10,"./missionStatement":12,"pick-random":32}],63:[function(require,module,exports){
var pick = require('pick-random')


module.exports = function () {
  return pick(["PURPOSE", "FUNCTION", "USE", "HOPES", "FEARS", "DREAMS", "CATS", "PORPOISE", "MAGIC",
               "ABSTRACT-EXPRESSIONISM", "ANTI-CAPITALISM", "NET ART", "TIPS FOR TWITTER", "EMPATHY",
               "LIBERATION", "MARXISM", "TOP 40 POP STARS"], {count: 3})
}
},{"pick-random":32}]},{},[11])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
